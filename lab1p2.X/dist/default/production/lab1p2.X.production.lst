

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Feb 02 22:52:47 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           	psect	smallconst
    35  001000                     __psmallconst:
    36                           	opt stack 0
    37  001000  00                 	db	0
    38  001001                     _dpowers:
    39                           	opt stack 0
    40  001001  0001               	dw	1
    41  001003  0000               	dw	0
    42  001005  000A               	dw	10
    43  001007  0000               	dw	0
    44  001009  0064               	dw	100
    45  00100B  0000               	dw	0
    46  00100D  03E8               	dw	1000
    47  00100F  0000               	dw	0
    48  001011  2710               	dw	10000
    49  001013  0000               	dw	0
    50  001015  86A0               	dw	34464
    51  001017  0001               	dw	1
    52  001019  4240               	dw	16960
    53  00101B  000F               	dw	15
    54  00101D  9680               	dw	38528
    55  00101F  0098               	dw	152
    56  001021  E100               	dw	57600
    57  001023  05F5               	dw	1525
    58  001025  CA00               	dw	51712
    59  001027  3B9A               	dw	15258
    60  001029                     __end_of_dpowers:
    61                           	opt stack 0
    62  001029                     __npowers_:
    63                           	opt stack 0
    64  001029  00                 	db	0
    65  00102A  80                 	db	128
    66  00102B  3F                 	db	63
    67  00102C  CD                 	db	205
    68  00102D  CC                 	db	204
    69  00102E  3D                 	db	61
    70  00102F  D7                 	db	215
    71  001030  23                 	db	35
    72  001031  3C                 	db	60
    73  001032  12                 	db	18
    74  001033  83                 	db	131
    75  001034  3A                 	db	58
    76  001035  B7                 	db	183
    77  001036  D1                 	db	209
    78  001037  38                 	db	56
    79  001038  C6                 	db	198
    80  001039  27                 	db	39
    81  00103A  37                 	db	55
    82  00103B  38                 	db	56
    83  00103C  86                 	db	134
    84  00103D  35                 	db	53
    85  00103E  C0                 	db	192
    86  00103F  D6                 	db	214
    87  001040  33                 	db	51
    88  001041  CC                 	db	204
    89  001042  2B                 	db	43
    90  001043  32                 	db	50
    91  001044  70                 	db	112
    92  001045  89                 	db	137
    93  001046  30                 	db	48
    94  001047  E7                 	db	231
    95  001048  DB                 	db	219
    96  001049  2E                 	db	46
    97  00104A  E5                 	db	229
    98  00104B  3C                 	db	60
    99  00104C  1E                 	db	30
   100  00104D  42                 	db	66
   101  00104E  A2                 	db	162
   102  00104F  0D                 	db	13
   103  001050                     __end_of__npowers_:
   104                           	opt stack 0
   105  001050                     __powers_:
   106                           	opt stack 0
   107  001050  00                 	db	0
   108  001051  80                 	db	128
   109  001052  3F                 	db	63
   110  001053  00                 	db	0
   111  001054  20                 	db	32
   112  001055  41                 	db	65
   113  001056  00                 	db	0
   114  001057  C8                 	db	200
   115  001058  42                 	db	66
   116  001059  00                 	db	0
   117  00105A  7A                 	db	122
   118  00105B  44                 	db	68
   119  00105C  40                 	db	64
   120  00105D  1C                 	db	28
   121  00105E  46                 	db	70
   122  00105F  50                 	db	80
   123  001060  C3                 	db	195
   124  001061  47                 	db	71
   125  001062  24                 	db	36
   126  001063  74                 	db	116
   127  001064  49                 	db	73
   128  001065  97                 	db	151
   129  001066  18                 	db	24
   130  001067  4B                 	db	75
   131  001068  BC                 	db	188
   132  001069  BE                 	db	190
   133  00106A  4C                 	db	76
   134  00106B  6B                 	db	107
   135  00106C  6E                 	db	110
   136  00106D  4E                 	db	78
   137  00106E  03                 	db	3
   138  00106F  15                 	db	21
   139  001070  50                 	db	80
   140  001071  79                 	db	121
   141  001072  AD                 	db	173
   142  001073  60                 	db	96
   143  001074  F3                 	db	243
   144  001075  49                 	db	73
   145  001076  71                 	db	113
   146  001077                     __end_of__powers_:
   147                           	opt stack 0
   148  0000                     _OSCCON	set	4051
   149  0000                     _PIE1bits	set	3997
   150  0000                     _PIR1bits	set	3998
   151  0000                     _RCSTA	set	4011
   152  0000                     _RCSTAbits	set	4011
   153  0000                     _SPBRG	set	4015
   154  0000                     _SPBRGH	set	4016
   155  0000                     _TRISCbits	set	3988
   156  0000                     _TXREG	set	4013
   157  0000                     _TXSTA	set	4012
   158  0000                     _TXSTAbits	set	4012
   159  0000                     _TRMT	set	32097
   160  001077                     STR_1:
   161  001077  0D                 	db	13
   162  001078  0A                 	db	10
   163  001079  0A                 	db	10
   164  00107A  48                 	db	72	;'H'
   165  00107B  65                 	db	101	;'e'
   166  00107C  6C                 	db	108	;'l'
   167  00107D  6C                 	db	108	;'l'
   168  00107E  6F                 	db	111	;'o'
   169  00107F  20                 	db	32
   170  001080  57                 	db	87	;'W'
   171  001081  6F                 	db	111	;'o'
   172  001082  72                 	db	114	;'r'
   173  001083  6C                 	db	108	;'l'
   174  001084  64                 	db	100	;'d'
   175  001085  21                 	db	33
   176  001086  20                 	db	32
   177  001087  46                 	db	70	;'F'
   178  001088  6C                 	db	108	;'l'
   179  001089  6F                 	db	111	;'o'
   180  00108A  61                 	db	97	;'a'
   181  00108B  74                 	db	116	;'t'
   182  00108C  69                 	db	105	;'i'
   183  00108D  6E                 	db	110	;'n'
   184  00108E  67                 	db	103	;'g'
   185  00108F  20                 	db	32
   186  001090  50                 	db	80	;'P'
   187  001091  6F                 	db	111	;'o'
   188  001092  69                 	db	105	;'i'
   189  001093  6E                 	db	110	;'n'
   190  001094  74                 	db	116	;'t'
   191  001095  20                 	db	32
   192  001096  50                 	db	80	;'P'
   193  001097  72                 	db	114	;'r'
   194  001098  69                 	db	105	;'i'
   195  001099  6E                 	db	110	;'n'
   196  00109A  74                 	db	116	;'t'
   197  00109B  20                 	db	32
   198  00109C  77                 	db	119	;'w'
   199  00109D  69                 	db	105	;'i'
   200  00109E  74                 	db	116	;'t'
   201  00109F  68                 	db	104	;'h'
   202  0010A0  20                 	db	32
   203  0010A1  31                 	db	49	;'1'
   204  0010A2  20                 	db	32
   205  0010A3  64                 	db	100	;'d'
   206  0010A4  65                 	db	101	;'e'
   207  0010A5  63                 	db	99	;'c'
   208  0010A6  69                 	db	105	;'i'
   209  0010A7  6D                 	db	109	;'m'
   210  0010A8  61                 	db	97	;'a'
   211  0010A9  6C                 	db	108	;'l'
   212  0010AA  20                 	db	32
   213  0010AB  70                 	db	112	;'p'
   214  0010AC  6C                 	db	108	;'l'
   215  0010AD  61                 	db	97	;'a'
   216  0010AE  63                 	db	99	;'c'
   217  0010AF  65                 	db	101	;'e'
   218  0010B0  20                 	db	32
   219  0010B1  74                 	db	116	;'t'
   220  0010B2  3D                 	db	61	;'='
   221  0010B3  25                 	db	37
   222  0010B4  36                 	db	54	;'6'
   223  0010B5  2E                 	db	46
   224  0010B6  31                 	db	49	;'1'
   225  0010B7  66                 	db	102	;'f'
   226  0010B8  00                 	db	0
   227  0010B9                     STR_2:
   228  0010B9  0D                 	db	13
   229  0010BA  0A                 	db	10
   230  0010BB  0A                 	db	10
   231  0010BC  48                 	db	72	;'H'
   232  0010BD  65                 	db	101	;'e'
   233  0010BE  6C                 	db	108	;'l'
   234  0010BF  6C                 	db	108	;'l'
   235  0010C0  6F                 	db	111	;'o'
   236  0010C1  20                 	db	32
   237  0010C2  57                 	db	87	;'W'
   238  0010C3  6F                 	db	111	;'o'
   239  0010C4  72                 	db	114	;'r'
   240  0010C5  6C                 	db	108	;'l'
   241  0010C6  64                 	db	100	;'d'
   242  0010C7  21                 	db	33
   243  0010C8  20                 	db	32
   244  0010C9  46                 	db	70	;'F'
   245  0010CA  6C                 	db	108	;'l'
   246  0010CB  6F                 	db	111	;'o'
   247  0010CC  61                 	db	97	;'a'
   248  0010CD  74                 	db	116	;'t'
   249  0010CE  69                 	db	105	;'i'
   250  0010CF  6E                 	db	110	;'n'
   251  0010D0  67                 	db	103	;'g'
   252  0010D1  20                 	db	32
   253  0010D2  50                 	db	80	;'P'
   254  0010D3  6F                 	db	111	;'o'
   255  0010D4  69                 	db	105	;'i'
   256  0010D5  6E                 	db	110	;'n'
   257  0010D6  74                 	db	116	;'t'
   258  0010D7  20                 	db	32
   259  0010D8  50                 	db	80	;'P'
   260  0010D9  72                 	db	114	;'r'
   261  0010DA  69                 	db	105	;'i'
   262  0010DB  6E                 	db	110	;'n'
   263  0010DC  74                 	db	116	;'t'
   264  0010DD  20                 	db	32
   265  0010DE  77                 	db	119	;'w'
   266  0010DF  69                 	db	105	;'i'
   267  0010E0  74                 	db	116	;'t'
   268  0010E1  68                 	db	104	;'h'
   269  0010E2  20                 	db	32
   270  0010E3  32                 	db	50	;'2'
   271  0010E4  20                 	db	32
   272  0010E5  64                 	db	100	;'d'
   273  0010E6  65                 	db	101	;'e'
   274  0010E7  63                 	db	99	;'c'
   275  0010E8  69                 	db	105	;'i'
   276  0010E9  6D                 	db	109	;'m'
   277  0010EA  61                 	db	97	;'a'
   278  0010EB  6C                 	db	108	;'l'
   279  0010EC  20                 	db	32
   280  0010ED  70                 	db	112	;'p'
   281  0010EE  6C                 	db	108	;'l'
   282  0010EF  61                 	db	97	;'a'
   283  0010F0  63                 	db	99	;'c'
   284  0010F1  65                 	db	101	;'e'
   285  0010F2  20                 	db	32
   286  0010F3  74                 	db	116	;'t'
   287  0010F4  3D                 	db	61	;'='
   288  0010F5  25                 	db	37
   289  0010F6  36                 	db	54	;'6'
   290  0010F7  2E                 	db	46
   291  0010F8  32                 	db	50	;'2'
   292  0010F9  66                 	db	102	;'f'
   293  0010FA  00                 	db	0
   294                           
   295                           ; #config settings
   296  0010FB  00                 	db	0	; dummy byte at the end
   297  0000                     
   298                           	psect	cinit
   299  002ACA                     __pcinit:
   300                           	opt stack 0
   301  002ACA                     start_initialization:
   302                           	opt stack 0
   303  002ACA                     __initialization:
   304                           	opt stack 0
   305  002ACA                     end_of_initialization:
   306                           	opt stack 0
   307  002ACA                     __end_of__initialization:
   308                           	opt stack 0
   309  002ACA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   310  002ACC  6EF8               	movwf	tblptru,c
   311  002ACE  0100               	movlb	0
   312  002AD0  EFD6  F014         	goto	_main	;jump to C main() function
   313                           tblptru	equ	0xFF8
   314                           
   315                           	psect	cstackCOMRAM
   316  000001                     __pcstackCOMRAM:
   317                           	opt stack 0
   318  000001                     ??_isdigit:
   319  000001                     ?___awmod:
   320                           	opt stack 0
   321  000001                     ?___ftpack:
   322                           	opt stack 0
   323  000001                     ?___ftneg:
   324                           	opt stack 0
   325  000001                     ?__tdiv_to_l_:
   326                           	opt stack 0
   327  000001                     ?__div_to_l_:
   328                           	opt stack 0
   329  000001                     ?___lldiv:
   330                           	opt stack 0
   331  000001                     ?___llmod:
   332                           	opt stack 0
   333  000001                     putch@c:
   334                           	opt stack 0
   335  000001                     OpenUSART@spbrg:
   336                           	opt stack 0
   337  000001                     ___awmod@dividend:
   338                           	opt stack 0
   339  000001                     __div_to_l_@f1:
   340                           	opt stack 0
   341  000001                     ___ftpack@arg:
   342                           	opt stack 0
   343  000001                     __tdiv_to_l_@f1:
   344                           	opt stack 0
   345  000001                     ___ftge@ff1:
   346                           	opt stack 0
   347  000001                     ___ftneg@f1:
   348                           	opt stack 0
   349  000001                     ___lldiv@dividend:
   350                           	opt stack 0
   351  000001                     ___llmod@dividend:
   352                           	opt stack 0
   353                           
   354                           ; 4 bytes @ 0x0
   355  000001                     	ds	1
   356  000002                     _isdigit$680:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x1
   360  000002                     	ds	1
   361  000003                     OpenUSART@config:
   362                           	opt stack 0
   363  000003                     isdigit@c:
   364                           	opt stack 0
   365  000003                     ___awmod@divisor:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x2
   369  000003                     	ds	1
   370  000004                     ___ftpack@exp:
   371                           	opt stack 0
   372  000004                     __div_to_l_@f2:
   373                           	opt stack 0
   374  000004                     __tdiv_to_l_@f2:
   375                           	opt stack 0
   376  000004                     ___ftge@ff2:
   377                           	opt stack 0
   378                           
   379                           ; 3 bytes @ 0x3
   380  000004                     	ds	1
   381  000005                     ___awmod@counter:
   382                           	opt stack 0
   383  000005                     ___ftpack@sign:
   384                           	opt stack 0
   385  000005                     ___lldiv@divisor:
   386                           	opt stack 0
   387  000005                     ___llmod@divisor:
   388                           	opt stack 0
   389                           
   390                           ; 4 bytes @ 0x4
   391  000005                     	ds	1
   392  000006                     ??___ftpack:
   393  000006                     ___awmod@sign:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x5
   397  000006                     	ds	1
   398  000007                     ??__tdiv_to_l_:
   399  000007                     ??___ftge:
   400  000007                     ?___awdiv:
   401                           	opt stack 0
   402  000007                     ___awdiv@dividend:
   403                           	opt stack 0
   404  000007                     __div_to_l_@quot:
   405                           	opt stack 0
   406                           
   407                           ; 4 bytes @ 0x6
   408  000007                     	ds	2
   409  000009                     ?___lltoft:
   410                           	opt stack 0
   411  000009                     ___llmod@counter:
   412                           	opt stack 0
   413  000009                     ___awdiv@divisor:
   414                           	opt stack 0
   415  000009                     ___lldiv@quotient:
   416                           	opt stack 0
   417  000009                     ___lltoft@c:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0x8
   421  000009                     	ds	1
   422  00000A                     __tdiv_to_l_@quot:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x9
   426  00000A                     	ds	1
   427  00000B                     ___awdiv@counter:
   428                           	opt stack 0
   429  00000B                     __div_to_l_@cntr:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0xA
   433  00000B                     	ds	1
   434  00000C                     ___awdiv@sign:
   435                           	opt stack 0
   436  00000C                     __div_to_l_@exp1:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0xB
   440  00000C                     	ds	1
   441  00000D                     ??___lltoft:
   442  00000D                     ___lldiv@counter:
   443                           	opt stack 0
   444  00000D                     ___awdiv@quotient:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0xC
   448  00000D                     	ds	1
   449  00000E                     __tdiv_to_l_@cntr:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xD
   453  00000E                     	ds	1
   454  00000F                     ?___wmul:
   455                           	opt stack 0
   456  00000F                     __tdiv_to_l_@exp1:
   457                           	opt stack 0
   458  00000F                     ___wmul@multiplier:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0xE
   462  00000F                     	ds	2
   463  000011                     ___lltoft@exp:
   464                           	opt stack 0
   465  000011                     ___wmul@multiplicand:
   466                           	opt stack 0
   467                           
   468                           ; 2 bytes @ 0x10
   469  000011                     	ds	2
   470  000013                     ___wmul@product:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x12
   474  000013                     	ds	2
   475  000015                     ?___ftmul:
   476                           	opt stack 0
   477  000015                     ___ftmul@f1:
   478                           	opt stack 0
   479                           
   480                           ; 3 bytes @ 0x14
   481  000015                     	ds	3
   482  000018                     ___ftmul@f2:
   483                           	opt stack 0
   484                           
   485                           ; 3 bytes @ 0x17
   486  000018                     	ds	3
   487  00001B                     ??___ftmul:
   488                           
   489                           ; 0 bytes @ 0x1A
   490  00001B                     	ds	3
   491  00001E                     ___ftmul@exp:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x1D
   495  00001E                     	ds	1
   496  00001F                     ___ftmul@f3_as_product:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x1E
   500  00001F                     	ds	3
   501  000022                     ___ftmul@cntr:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x21
   505  000022                     	ds	1
   506  000023                     ___ftmul@sign:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x22
   510  000023                     	ds	1
   511  000024                     ?_fround:
   512                           	opt stack 0
   513  000024                     ?_scale:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x23
   517  000024                     	ds	3
   518  000027                     _fround$909:
   519                           	opt stack 0
   520  000027                     _scale$910:
   521                           	opt stack 0
   522                           
   523                           ; 3 bytes @ 0x26
   524  000027                     	ds	3
   525  00002A                     scale@scl:
   526                           	opt stack 0
   527  00002A                     _fround$908:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x29
   531  00002A                     	ds	1
   532  00002B                     ?___fttol:
   533                           	opt stack 0
   534  00002B                     ___fttol@f1:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x2A
   538  00002B                     	ds	2
   539  00002D                     fround@prec:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x2C
   543  00002D                     	ds	1
   544  00002E                     ?___ftadd:
   545                           	opt stack 0
   546  00002E                     ___ftadd@f1:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x2D
   550  00002E                     	ds	1
   551  00002F                     ??___fttol:
   552                           
   553                           ; 0 bytes @ 0x2E
   554  00002F                     	ds	2
   555  000031                     ___ftadd@f2:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x30
   559  000031                     	ds	3
   560  000034                     ??___ftadd:
   561  000034                     ___fttol@sign1:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x33
   565  000034                     	ds	1
   566  000035                     ___fttol@lval:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x34
   570  000035                     	ds	2
   571  000037                     ___ftadd@sign:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x36
   575  000037                     	ds	1
   576  000038                     ___ftadd@exp2:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x37
   580  000038                     	ds	1
   581  000039                     ___ftadd@exp1:
   582                           	opt stack 0
   583  000039                     ___fttol@exp1:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0x38
   587  000039                     	ds	1
   588  00003A                     ?___ftsub:
   589                           	opt stack 0
   590  00003A                     ___ftsub@f1:
   591                           	opt stack 0
   592                           
   593                           ; 3 bytes @ 0x39
   594  00003A                     	ds	3
   595  00003D                     ___ftsub@f2:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x3C
   599  00003D                     	ds	3
   600  000040                     ?_printf:
   601                           	opt stack 0
   602  000040                     printf@f:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x3F
   606  000040                     	ds	5
   607  000045                     ??_printf:
   608                           
   609                           ; 0 bytes @ 0x44
   610  000045                     	ds	6
   611  00004B                     _printf$911:
   612                           	opt stack 0
   613                           
   614                           ; 3 bytes @ 0x4A
   615  00004B                     	ds	3
   616  00004E                     printf@ap:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x4D
   620  00004E                     	ds	2
   621  000050                     printf@val:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x4F
   625  000050                     	ds	4
   626  000054                     printf@flag:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x53
   630  000054                     	ds	2
   631  000056                     printf@width:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x55
   635  000056                     	ds	2
   636  000058                     printf@tmpval:
   637                           	opt stack 0
   638                           
   639                           ; 4 bytes @ 0x57
   640  000058                     	ds	4
   641  00005C                     printf@exp:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x5B
   645  00005C                     	ds	2
   646  00005E                     printf@fval:
   647                           	opt stack 0
   648                           
   649                           ; 3 bytes @ 0x5D
   650  00005E                     	ds	3
   651  000061                     printf@prec:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x60
   655  000061                     	ds	2
   656  000063                     printf@c:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x62
   660  000063                     	ds	1
   661  000064                     main@t:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x63
   665  000064                     	ds	3
   666                           tblptru	equ	0xFF8
   667                           
   668 ;;
   669 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   670 ;;
   671 ;; *************** function _main *****************
   672 ;; Defined at:
   673 ;;		line 24 in file "lab1p2.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;  t               3   99[COMRAM] float 
   678 ;;  k               1    0        unsigned char 
   679 ;; Return value:  Size  Location     Type
   680 ;;		None               void
   681 ;; Registers used:
   682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : 0/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;Total ram usage:        3 bytes
   693 ;; Hardware stack levels required when called:    4
   694 ;; This function calls:
   695 ;;		_Init_UART
   696 ;;		_printf
   697 ;; This function is called by:
   698 ;;		Startup code after reset
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text0
   703  0029AC                     __ptext0:
   704                           	opt stack 0
   705  0029AC                     _main:
   706                           	opt stack 27
   707                           
   708                           ;lab1p2.c: 25: char k;
   709                           ;lab1p2.c: 26: float t;
   710                           ;lab1p2.c: 27: Init_UART();
   711                           
   712                           ;incstack = 0
   713  0029AC  EC53  F015         	call	_Init_UART	;wreg free
   714  0029B0  D000               	goto	l2525
   715  0029B2                     l2525:
   716                           
   717                           ;lab1p2.c: 30: t = 19.909;
   718  0029B2  0E46               	movlw	70
   719  0029B4  6E64               	movwf	main@t,c
   720  0029B6  0E9F               	movlw	159
   721  0029B8  6E65               	movwf	main@t+1,c
   722  0029BA  0E41               	movlw	65
   723  0029BC  6E66               	movwf	main@t+2,c
   724                           
   725                           ;lab1p2.c: 31: printf("\r\n\nHello World! Floating Point Print with 1 decimal place t=%6
      +                          .1f", t);
   726  0029BE  0E77               	movlw	low STR_1
   727  0029C0  6E40               	movwf	printf@f,c
   728  0029C2  0E10               	movlw	high STR_1
   729  0029C4  6E41               	movwf	printf@f+1,c
   730  0029C6  C064  F042         	movff	main@t,?_printf+2
   731  0029CA  C065  F043         	movff	main@t+1,?_printf+3
   732  0029CE  C066  F044         	movff	main@t+2,?_printf+4
   733  0029D2  EC7E  F008         	call	_printf	;wreg free
   734                           
   735                           ;lab1p2.c: 32: printf("\r\n\nHello World! Floating Point Print with 2 decimal place t=%6
      +                          .2f", t);
   736  0029D6  0EB9               	movlw	low STR_2
   737  0029D8  6E40               	movwf	printf@f,c
   738  0029DA  0E10               	movlw	high STR_2
   739  0029DC  6E41               	movwf	printf@f+1,c
   740  0029DE  C064  F042         	movff	main@t,?_printf+2
   741  0029E2  C065  F043         	movff	main@t+1,?_printf+3
   742  0029E6  C066  F044         	movff	main@t+2,?_printf+4
   743  0029EA  EC7E  F008         	call	_printf	;wreg free
   744  0029EE  D7E1               	goto	l2525
   745  0029F0  EF00  F000         	goto	start
   746  0029F4                     __end_of_main:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           
   750 ;; *************** function _printf *****************
   751 ;; Defined at:
   752 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  f               2   63[COMRAM] PTR const unsigned char 
   755 ;;		 -> STR_2(66), STR_1(66), 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  tmpval          4   87[COMRAM] struct .
   758 ;;  val             4   79[COMRAM] unsigned long 
   759 ;;  fval            3   93[COMRAM] unsigned long 
   760 ;;  cp              3    0        PTR const unsigned char 
   761 ;;  prec            2   96[COMRAM] int 
   762 ;;  exp             2   91[COMRAM] int 
   763 ;;  width           2   85[COMRAM] int 
   764 ;;  flag            2   83[COMRAM] unsigned short 
   765 ;;  ap              2   77[COMRAM] PTR void [1]
   766 ;;		 -> ?_printf(2), 
   767 ;;  len             2    0        unsigned int 
   768 ;;  c               1   98[COMRAM] char 
   769 ;;  d               1    0        unsigned char 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  2   63[COMRAM] int 
   772 ;; Registers used:
   773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   779 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   780 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   781 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   782 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   783 ;;Total ram usage:       36 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    3
   786 ;; This function calls:
   787 ;;		___awdiv
   788 ;;		___ftadd
   789 ;;		___ftge
   790 ;;		___ftmul
   791 ;;		___ftneg
   792 ;;		___ftsub
   793 ;;		___fttol
   794 ;;		___lldiv
   795 ;;		___llmod
   796 ;;		___lltoft
   797 ;;		___wmul
   798 ;;		__div_to_l_
   799 ;;		__tdiv_to_l_
   800 ;;		_fround
   801 ;;		_isdigit
   802 ;;		_putch
   803 ;;		_scale
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text1
   810  0010FC                     __ptext1:
   811                           	opt stack 0
   812  0010FC                     _printf:
   813                           	opt stack 27
   814                           
   815                           ;doprnt.c: 466: va_list ap;
   816                           ;doprnt.c: 499: signed char c;
   817                           ;doprnt.c: 501: int width;
   818                           ;doprnt.c: 504: int prec;
   819                           ;doprnt.c: 508: unsigned short flag;
   820                           ;doprnt.c: 515: char d;
   821                           ;doprnt.c: 516: double fval;
   822                           ;doprnt.c: 517: int exp;
   823                           ;doprnt.c: 523: union {
   824                           ;doprnt.c: 524: unsigned long vd;
   825                           ;doprnt.c: 525: double integ;
   826                           ;doprnt.c: 526: } tmpval;
   827                           ;doprnt.c: 528: unsigned long val;
   828                           ;doprnt.c: 529: unsigned len;
   829                           ;doprnt.c: 530: const char * cp;
   830                           ;doprnt.c: 533: *ap = __va_start();
   831                           
   832                           ;incstack = 0
   833  0010FC  0E42               	movlw	low (?_printf+2)
   834  0010FE  6E4E               	movwf	printf@ap,c
   835  001100  0E00               	movlw	high (?_printf+2)
   836  001102  6E4F               	movwf	printf@ap+1,c
   837                           
   838                           ;doprnt.c: 536: while(c = *f++) {
   839  001104  EFB6  F00C         	goto	l2521
   840  001108                     l2289:
   841                           
   842                           ;doprnt.c: 538: if(c != '%')
   843  001108  0E25               	movlw	37
   844  00110A  1863               	xorwf	printf@c,w,c
   845  00110C  B4D8               	btfsc	status,2,c
   846  00110E  D005               	goto	l2293
   847                           
   848                           ;doprnt.c: 540: {
   849                           ;doprnt.c: 541: (putch(c) );
   850  001110  5063               	movf	printf@c,w,c
   851  001112  EC5D  F015         	call	_putch
   852                           
   853                           ;doprnt.c: 542: continue;
   854  001116  EFB6  F00C         	goto	l2521
   855  00111A                     l2293:
   856                           
   857                           ;doprnt.c: 543: }
   858                           ;doprnt.c: 546: width = 0;
   859  00111A  0E00               	movlw	0
   860  00111C  6E57               	movwf	printf@width+1,c
   861  00111E  0E00               	movlw	0
   862  001120  6E56               	movwf	printf@width,c
   863                           
   864                           ;doprnt.c: 548: flag = 0;
   865  001122  0E00               	movlw	0
   866  001124  6E55               	movwf	printf@flag+1,c
   867  001126  0E00               	movlw	0
   868  001128  6E54               	movwf	printf@flag,c
   869                           
   870                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   871  00112A  C040  FFF6         	movff	printf@f,tblptrl
   872  00112E  C041  FFF7         	movff	printf@f+1,tblptrh
   873  001132                     	if	0	;tblptru may be non-zero
   874  001132                     	endif
   875  001132                     	if	0	;tblptru may be non-zero
   876  001132                     	endif
   877  001132  0008               	tblrd		*
   878  001134  50F5               	movf	tablat,w,c
   879  001136  EC42  F015         	call	_isdigit
   880  00113A  A0D8               	btfss	status,0,c
   881  00113C  D035               	goto	l2307
   882                           
   883                           ;doprnt.c: 598: width = 0;
   884  00113E  0E00               	movlw	0
   885  001140  6E57               	movwf	printf@width+1,c
   886  001142  0E00               	movlw	0
   887  001144  6E56               	movwf	printf@width,c
   888  001146  D000               	goto	l2299
   889  001148                     l2299:
   890                           
   891                           ;doprnt.c: 600: width *= 10;
   892  001148  C056  F00F         	movff	printf@width,___wmul@multiplier
   893  00114C  C057  F010         	movff	printf@width+1,___wmul@multiplier+1
   894  001150  0E00               	movlw	0
   895  001152  6E12               	movwf	___wmul@multiplicand+1,c
   896  001154  0E0A               	movlw	10
   897  001156  6E11               	movwf	___wmul@multiplicand,c
   898  001158  EC1C  F015         	call	___wmul	;wreg free
   899  00115C  C00F  F056         	movff	?___wmul,printf@width
   900  001160  C010  F057         	movff	?___wmul+1,printf@width+1
   901                           
   902                           ;doprnt.c: 601: width += *f++ - '0';
   903  001164  0ED0               	movlw	208
   904  001166  6E45               	movwf	??_printf& (0+255),c
   905  001168  0EFF               	movlw	255
   906  00116A  6E46               	movwf	(??_printf+1)& (0+255),c
   907  00116C  C040  FFF6         	movff	printf@f,tblptrl
   908  001170  C041  FFF7         	movff	printf@f+1,tblptrh
   909  001174                     	if	0	;tblptru may be non-zero
   910  001174                     	endif
   911  001174                     	if	0	;tblptru may be non-zero
   912  001174                     	endif
   913  001174  0008               	tblrd		*
   914  001176  50F5               	movf	tablat,w,c
   915  001178  6E47               	movwf	(??_printf+2)& (0+255),c
   916  00117A  6A48               	clrf	(??_printf+3)& (0+255),c
   917  00117C  5045               	movf	??_printf,w,c
   918  00117E  2647               	addwf	??_printf+2,f,c
   919  001180  5046               	movf	??_printf+1,w,c
   920  001182  2248               	addwfc	??_printf+3,f,c
   921  001184  5047               	movf	??_printf+2,w,c
   922  001186  2656               	addwf	printf@width,f,c
   923  001188  5048               	movf	??_printf+3,w,c
   924  00118A  2257               	addwfc	printf@width+1,f,c
   925  00118C  4A40               	infsnz	printf@f,f,c
   926  00118E  2A41               	incf	printf@f+1,f,c
   927                           
   928                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   929  001190  C040  FFF6         	movff	printf@f,tblptrl
   930  001194  C041  FFF7         	movff	printf@f+1,tblptrh
   931  001198                     	if	0	;tblptru may be non-zero
   932  001198                     	endif
   933  001198                     	if	0	;tblptru may be non-zero
   934  001198                     	endif
   935  001198  0008               	tblrd		*
   936  00119A  50F5               	movf	tablat,w,c
   937  00119C  EC42  F015         	call	_isdigit
   938  0011A0  A0D8               	btfss	status,0,c
   939  0011A2  D002               	goto	l2307
   940  0011A4  D7D1               	goto	l2299
   941  0011A6  D000               	goto	l2307
   942  0011A8                     l2307:
   943                           
   944                           ;doprnt.c: 608: }
   945                           ;doprnt.c: 611: if(*f == '.') {
   946  0011A8  C040  FFF6         	movff	printf@f,tblptrl
   947  0011AC  C041  FFF7         	movff	printf@f+1,tblptrh
   948  0011B0                     	if	0	;tblptru may be non-zero
   949  0011B0                     	endif
   950  0011B0                     	if	0	;tblptru may be non-zero
   951  0011B0                     	endif
   952  0011B0  0008               	tblrd		*
   953  0011B2  50F5               	movf	tablat,w,c
   954  0011B4  0A2E               	xorlw	46
   955  0011B6  A4D8               	btfss	status,2,c
   956  0011B8  D030               	goto	l2319
   957                           
   958                           ;doprnt.c: 612: flag |= 0x4000;
   959  0011BA  8C55               	bsf	printf@flag+1,6,c
   960                           
   961                           ;doprnt.c: 613: f++;
   962  0011BC  4A40               	infsnz	printf@f,f,c
   963  0011BE  2A41               	incf	printf@f+1,f,c
   964                           
   965                           ;doprnt.c: 620: {
   966                           ;doprnt.c: 621: prec = 0;
   967  0011C0  0E00               	movlw	0
   968  0011C2  6E62               	movwf	printf@prec+1,c
   969  0011C4  0E00               	movlw	0
   970  0011C6  6E61               	movwf	printf@prec,c
   971                           
   972                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   973  0011C8  D01C               	goto	l2317
   974  0011CA                     l2313:
   975                           
   976                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   977  0011CA  C061  F00F         	movff	printf@prec,___wmul@multiplier
   978  0011CE  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
   979  0011D2  0E00               	movlw	0
   980  0011D4  6E12               	movwf	___wmul@multiplicand+1,c
   981  0011D6  0E0A               	movlw	10
   982  0011D8  6E11               	movwf	___wmul@multiplicand,c
   983  0011DA  EC1C  F015         	call	___wmul	;wreg free
   984  0011DE  C040  FFF6         	movff	printf@f,tblptrl
   985  0011E2  C041  FFF7         	movff	printf@f+1,tblptrh
   986  0011E6                     	if	0	;tblptru may be non-zero
   987  0011E6                     	endif
   988  0011E6                     	if	0	;tblptru may be non-zero
   989  0011E6                     	endif
   990  0011E6  0008               	tblrd		*
   991  0011E8  50F5               	movf	tablat,w,c
   992  0011EA  260F               	addwf	?___wmul,f,c
   993  0011EC  0E00               	movlw	0
   994  0011EE  2210               	addwfc	?___wmul+1,f,c
   995  0011F0  0ED0               	movlw	208
   996  0011F2  240F               	addwf	?___wmul,w,c
   997  0011F4  6E61               	movwf	printf@prec,c
   998  0011F6  0EFF               	movlw	255
   999  0011F8  2010               	addwfc	?___wmul+1,w,c
  1000  0011FA  6E62               	movwf	printf@prec+1,c
  1001  0011FC  4A40               	infsnz	printf@f,f,c
  1002  0011FE  2A41               	incf	printf@f+1,f,c
  1003  001200  D000               	goto	l2317
  1004  001202                     l2317:
  1005  001202  C040  FFF6         	movff	printf@f,tblptrl
  1006  001206  C041  FFF7         	movff	printf@f+1,tblptrh
  1007  00120A                     	if	0	;tblptru may be non-zero
  1008  00120A                     	endif
  1009  00120A                     	if	0	;tblptru may be non-zero
  1010  00120A                     	endif
  1011  00120A  0008               	tblrd		*
  1012  00120C  50F5               	movf	tablat,w,c
  1013  00120E  EC42  F015         	call	_isdigit
  1014  001212  A0D8               	btfss	status,0,c
  1015  001214  D00D               	goto	l2327
  1016  001216  D7D9               	goto	l2313
  1017                           
  1018                           ;doprnt.c: 624: }
  1019                           ;doprnt.c: 625: } else {
  1020  001218  D00B               	goto	l2327
  1021  00121A                     l2319:
  1022                           
  1023                           ;doprnt.c: 626: prec = 0;
  1024  00121A  0E00               	movlw	0
  1025  00121C  6E62               	movwf	printf@prec+1,c
  1026  00121E  0E00               	movlw	0
  1027  001220  6E61               	movwf	printf@prec,c
  1028                           
  1029                           ;doprnt.c: 628: flag |= 0x1000;
  1030  001222  8855               	bsf	printf@flag+1,4,c
  1031                           
  1032                           ;doprnt.c: 630: }
  1033                           ;doprnt.c: 635: switch(c = *f++) {
  1034  001224  D005               	goto	l2327
  1035                           
  1036                           ;doprnt.c: 638: goto alldone;
  1037                           
  1038                           ;doprnt.c: 637: case 0:
  1039  001226  D3B1               	goto	l137
  1040  001228                     l2323:
  1041                           
  1042                           ;doprnt.c: 663: flag |= 0x400;
  1043  001228  8455               	bsf	printf@flag+1,2,c
  1044                           
  1045                           ;doprnt.c: 664: break;
  1046  00122A  D013               	goto	l2329
  1047                           
  1048                           ;doprnt.c: 813: continue;
  1049                           
  1050                           ;doprnt.c: 802: default:
  1051  00122C  D39F               	goto	l2521
  1052                           
  1053                           ;doprnt.c: 822: }
  1054  00122E  D011               	goto	l2329
  1055  001230                     l2327:
  1056  001230  C040  FFF6         	movff	printf@f,tblptrl
  1057  001234  C041  FFF7         	movff	printf@f+1,tblptrh
  1058  001238  4A40               	infsnz	printf@f,f,c
  1059  00123A  2A41               	incf	printf@f+1,f,c
  1060  00123C                     	if	0	;tblptru may be non-zero
  1061  00123C                     	endif
  1062  00123C                     	if	0	;tblptru may be non-zero
  1063  00123C                     	endif
  1064  00123C  0008               	tblrd		*
  1065  00123E  CFF5 F063          	movff	tablat,printf@c
  1066  001242  5063               	movf	printf@c,w,c
  1067                           
  1068                           ; Switch size 1, requested type "space"
  1069                           ; Number of cases is 2, Range of values is 0 to 102
  1070                           ; switch strategies available:
  1071                           ; Name         Instructions Cycles
  1072                           ; simple_byte            7     4 (average)
  1073                           ;	Chosen strategy is simple_byte
  1074  001244  0A00               	xorlw	0	; case 0
  1075  001246  B4D8               	btfsc	status,2,c
  1076  001248  D3A0               	goto	l137
  1077  00124A  0A66               	xorlw	102	; case 102
  1078  00124C  B4D8               	btfsc	status,2,c
  1079  00124E  D7EC               	goto	l2323
  1080  001250  D38D               	goto	l2521
  1081  001252                     l2329:
  1082                           
  1083                           ;doprnt.c: 825: if(flag & (0x700)) {
  1084  001252  0E07               	movlw	7
  1085  001254  1455               	andwf	printf@flag+1,w,c
  1086  001256  B4D8               	btfsc	status,2,c
  1087  001258  D300               	goto	l2477
  1088                           
  1089                           ;doprnt.c: 827: if(flag & 0x1000)
  1090  00125A  A855               	btfss	printf@flag+1,4,c
  1091  00125C  D005               	goto	l2335
  1092                           
  1093                           ;doprnt.c: 829: prec = 6;
  1094  00125E  0E00               	movlw	0
  1095  001260  6E62               	movwf	printf@prec+1,c
  1096  001262  0E06               	movlw	6
  1097  001264  6E61               	movwf	printf@prec,c
  1098  001266  D000               	goto	l2335
  1099  001268                     l2335:
  1100                           
  1101                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1102  001268  C04E  FFD9         	movff	printf@ap,fsr2l
  1103  00126C  C04F  FFDA         	movff	printf@ap+1,fsr2h
  1104  001270  CFDE F05E          	movff	postinc2,printf@fval
  1105  001274  CFDE F05F          	movff	postinc2,printf@fval+1
  1106  001278  CFDD F060          	movff	postdec2,printf@fval+2
  1107  00127C  0E03               	movlw	3
  1108  00127E  264E               	addwf	printf@ap,f,c
  1109  001280  0E00               	movlw	0
  1110  001282  224F               	addwfc	printf@ap+1,f,c
  1111                           
  1112                           ;doprnt.c: 831: if(fval < 0.0) {
  1113  001284  AE60               	btfss	printf@fval+2,7,c
  1114  001286  D011               	goto	l2345
  1115                           
  1116                           ;doprnt.c: 832: fval = -fval;
  1117  001288  C05E  F001         	movff	printf@fval,___ftneg@f1
  1118  00128C  C05F  F002         	movff	printf@fval+1,___ftneg@f1+1
  1119  001290  C060  F003         	movff	printf@fval+2,___ftneg@f1+2
  1120  001294  EC30  F015         	call	___ftneg	;wreg free
  1121  001298  C001  F05E         	movff	?___ftneg,printf@fval
  1122  00129C  C002  F05F         	movff	?___ftneg+1,printf@fval+1
  1123  0012A0  C003  F060         	movff	?___ftneg+2,printf@fval+2
  1124                           
  1125                           ;doprnt.c: 833: flag |= 0x03;
  1126  0012A4  0E03               	movlw	3
  1127  0012A6  1254               	iorwf	printf@flag,f,c
  1128  0012A8  D000               	goto	l2345
  1129  0012AA                     l2345:
  1130                           
  1131                           ;doprnt.c: 834: }
  1132                           ;doprnt.c: 835: exp = 0;
  1133  0012AA  0E00               	movlw	0
  1134  0012AC  6E5D               	movwf	printf@exp+1,c
  1135  0012AE  0E00               	movlw	0
  1136  0012B0  6E5C               	movwf	printf@exp,c
  1137                           
  1138                           ;doprnt.c: 836: if( fval!=0) {
  1139  0012B2  505E               	movf	printf@fval,w,c
  1140  0012B4  105F               	iorwf	printf@fval+1,w,c
  1141  0012B6  1060               	iorwf	printf@fval+2,w,c
  1142  0012B8  B4D8               	btfsc	status,2,c
  1143  0012BA  D085               	goto	l2373
  1144                           
  1145                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1146  0012BC  0E82               	movlw	130
  1147  0012BE  6E45               	movwf	??_printf& (0+255),c
  1148  0012C0  0EFF               	movlw	255
  1149  0012C2  6E46               	movwf	(??_printf+1)& (0+255),c
  1150  0012C4  C05E  F047         	movff	printf@fval,??_printf+2
  1151  0012C8  C05F  F048         	movff	printf@fval+1,??_printf+3
  1152  0012CC  C060  F049         	movff	printf@fval+2,??_printf+4
  1153  0012D0  C061  F04A         	movff	printf@fval+3,??_printf+5
  1154  0012D4  0E10               	movlw	16
  1155  0012D6  D005               	goto	u2610
  1156  0012D8                     u2615:
  1157  0012D8  90D8               	bcf	status,0,c
  1158  0012DA  324A               	rrcf	??_printf+5,f,c
  1159  0012DC  3249               	rrcf	??_printf+4,f,c
  1160  0012DE  3248               	rrcf	??_printf+3,f,c
  1161  0012E0  3247               	rrcf	??_printf+2,f,c
  1162  0012E2                     u2610:
  1163  0012E2  2EE8               	decfsz	wreg,f,c
  1164  0012E4  D7F9               	goto	u2615
  1165  0012E6  5047               	movf	??_printf+2,w,c
  1166  0012E8  2445               	addwf	??_printf,w,c
  1167  0012EA  6E5C               	movwf	printf@exp,c
  1168  0012EC  0E00               	movlw	0
  1169  0012EE  2046               	addwfc	??_printf+1,w,c
  1170  0012F0  6E5D               	movwf	printf@exp+1,c
  1171                           
  1172                           ;doprnt.c: 838: exp--;
  1173  0012F2  065C               	decf	printf@exp,f,c
  1174  0012F4  A0D8               	btfss	status,0,c
  1175  0012F6  065D               	decf	printf@exp+1,f,c
  1176                           
  1177                           ;doprnt.c: 839: exp *= 3;
  1178  0012F8  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  1179  0012FC  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1180  001300  0E00               	movlw	0
  1181  001302  6E12               	movwf	___wmul@multiplicand+1,c
  1182  001304  0E03               	movlw	3
  1183  001306  6E11               	movwf	___wmul@multiplicand,c
  1184  001308  EC1C  F015         	call	___wmul	;wreg free
  1185  00130C  C00F  F05C         	movff	?___wmul,printf@exp
  1186  001310  C010  F05D         	movff	?___wmul+1,printf@exp+1
  1187                           
  1188                           ;doprnt.c: 840: exp /= 10;
  1189  001314  C05C  F007         	movff	printf@exp,___awdiv@dividend
  1190  001318  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1191  00131C  0E00               	movlw	0
  1192  00131E  6E0A               	movwf	___awdiv@divisor+1,c
  1193  001320  0E0A               	movlw	10
  1194  001322  6E09               	movwf	___awdiv@divisor,c
  1195  001324  EC19  F013         	call	___awdiv	;wreg free
  1196  001328  C007  F05C         	movff	?___awdiv,printf@exp
  1197  00132C  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  1198                           
  1199                           ;doprnt.c: 841: if(exp < 0)
  1200  001330  AE5D               	btfss	printf@exp+1,7,c
  1201  001332  D004               	goto	l2361
  1202                           
  1203                           ;doprnt.c: 842: exp--;
  1204  001334  065C               	decf	printf@exp,f,c
  1205  001336  A0D8               	btfss	status,0,c
  1206  001338  065D               	decf	printf@exp+1,f,c
  1207  00133A  D000               	goto	l2361
  1208  00133C                     l2361:
  1209                           
  1210                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1211  00133C  505C               	movf	printf@exp,w,c
  1212  00133E  0800               	sublw	0
  1213  001340  ECC6  F00C         	call	_scale
  1214  001344  C024  F058         	movff	?_scale,printf@tmpval
  1215  001348  C025  F059         	movff	?_scale+1,printf@tmpval+1
  1216  00134C  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  1217                           
  1218                           ;doprnt.c: 847: tmpval.integ *= fval;
  1219  001350  C058  F015         	movff	printf@tmpval,___ftmul@f1
  1220  001354  C059  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1221  001358  C05A  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1222  00135C  C05E  F018         	movff	printf@fval,___ftmul@f2
  1223  001360  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1224  001364  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1225  001368  ECC7  F011         	call	___ftmul	;wreg free
  1226  00136C  C015  F058         	movff	?___ftmul,printf@tmpval
  1227  001370  C016  F059         	movff	?___ftmul+1,printf@tmpval+1
  1228  001374  C017  F05A         	movff	?___ftmul+2,printf@tmpval+2
  1229                           
  1230                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1231  001378  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1232  00137C  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1233  001380  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1234  001384  0E00               	movlw	0
  1235  001386  6E04               	movwf	___ftge@ff2,c
  1236  001388  0E80               	movlw	128
  1237  00138A  6E05               	movwf	___ftge@ff2+1,c
  1238  00138C  0E3F               	movlw	63
  1239  00138E  6E06               	movwf	___ftge@ff2+2,c
  1240  001390  EC64  F013         	call	___ftge	;wreg free
  1241  001394  B0D8               	btfsc	status,0,c
  1242  001396  D004               	goto	l2369
  1243                           
  1244                           ;doprnt.c: 849: exp--;
  1245  001398  065C               	decf	printf@exp,f,c
  1246  00139A  A0D8               	btfss	status,0,c
  1247  00139C  065D               	decf	printf@exp+1,f,c
  1248  00139E  D013               	goto	l2373
  1249  0013A0                     l2369:
  1250                           
  1251                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1252  0013A0  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1253  0013A4  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1254  0013A8  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1255  0013AC  0E00               	movlw	0
  1256  0013AE  6E04               	movwf	___ftge@ff2,c
  1257  0013B0  0E20               	movlw	32
  1258  0013B2  6E05               	movwf	___ftge@ff2+1,c
  1259  0013B4  0E41               	movlw	65
  1260  0013B6  6E06               	movwf	___ftge@ff2+2,c
  1261  0013B8  EC64  F013         	call	___ftge	;wreg free
  1262  0013BC  A0D8               	btfss	status,0,c
  1263  0013BE  D003               	goto	l2373
  1264                           
  1265                           ;doprnt.c: 851: exp++;
  1266  0013C0  4A5C               	infsnz	printf@exp,f,c
  1267  0013C2  2A5D               	incf	printf@exp+1,f,c
  1268  0013C4  D000               	goto	l2373
  1269  0013C6                     l2373:
  1270                           
  1271                           ;doprnt.c: 852: }
  1272                           ;doprnt.c: 1112: if(prec <= 12)
  1273  0013C6  BE62               	btfsc	printf@prec+1,7,c
  1274  0013C8  D006               	goto	l2375
  1275  0013CA  5062               	movf	printf@prec+1,w,c
  1276  0013CC  E11C               	bnz	l2377
  1277  0013CE  0E0D               	movlw	13
  1278  0013D0  5C61               	subwf	printf@prec,w,c
  1279  0013D2  B0D8               	btfsc	status,0,c
  1280  0013D4  D018               	goto	l2377
  1281  0013D6                     l2375:
  1282                           
  1283                           ;doprnt.c: 1113: fval += fround(prec);
  1284  0013D6  C05E  F02E         	movff	printf@fval,___ftadd@f1
  1285  0013DA  C05F  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1286  0013DE  C060  F030         	movff	printf@fval+2,___ftadd@f1+2
  1287  0013E2  5061               	movf	printf@prec,w,c
  1288  0013E4  ECB6  F00E         	call	_fround
  1289  0013E8  C024  F031         	movff	?_fround,___ftadd@f2
  1290  0013EC  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1291  0013F0  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1292  0013F4  ECD8  F00F         	call	___ftadd	;wreg free
  1293  0013F8  C02E  F05E         	movff	?___ftadd,printf@fval
  1294  0013FC  C02F  F05F         	movff	?___ftadd+1,printf@fval+1
  1295  001400  C030  F060         	movff	?___ftadd+2,printf@fval+2
  1296  001404  D000               	goto	l2377
  1297  001406                     l2377:
  1298                           
  1299                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1300  001406  BE5D               	btfsc	printf@exp+1,7,c
  1301  001408  D006               	goto	l2379
  1302  00140A  505D               	movf	printf@exp+1,w,c
  1303  00140C  E120               	bnz	l2385
  1304  00140E  0E0A               	movlw	10
  1305  001410  5C5C               	subwf	printf@exp,w,c
  1306  001412  B0D8               	btfsc	status,0,c
  1307  001414  D01C               	goto	l2385
  1308  001416                     l2379:
  1309  001416  505E               	movf	printf@fval,w,c
  1310  001418  105F               	iorwf	printf@fval+1,w,c
  1311  00141A  1060               	iorwf	printf@fval+2,w,c
  1312  00141C  B4D8               	btfsc	status,2,c
  1313  00141E  D06D               	goto	l2399
  1314  001420  C05E  F02B         	movff	printf@fval,___fttol@f1
  1315  001424  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1316  001428  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1317  00142C  EC43  F012         	call	___fttol	;wreg free
  1318  001430  502B               	movf	?___fttol,w,c
  1319  001432  102C               	iorwf	?___fttol+1,w,c
  1320  001434  102D               	iorwf	?___fttol+2,w,c
  1321  001436  102E               	iorwf	?___fttol+3,w,c
  1322  001438  B4D8               	btfsc	status,2,c
  1323  00143A  BE5D               	btfsc	printf@exp+1,7,c
  1324  00143C  D05E               	goto	l2399
  1325  00143E  505D               	movf	printf@exp+1,w,c
  1326  001440  E106               	bnz	l2385
  1327  001442  0E02               	movlw	2
  1328  001444  5C5C               	subwf	printf@exp,w,c
  1329  001446  B0D8               	btfsc	status,0,c
  1330  001448  D002               	goto	l2385
  1331  00144A  D057               	goto	l2399
  1332  00144C  D000               	goto	l2385
  1333  00144E                     l2385:
  1334                           
  1335                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1336  00144E  C058  F001         	movff	printf@tmpval,___ftge@ff1
  1337  001452  C059  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1338  001456  C05A  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1339  00145A  0E70               	movlw	112
  1340  00145C  6E04               	movwf	___ftge@ff2,c
  1341  00145E  0E89               	movlw	137
  1342  001460  6E05               	movwf	___ftge@ff2+1,c
  1343  001462  0E40               	movlw	64
  1344  001464  6E06               	movwf	___ftge@ff2+2,c
  1345  001466  EC64  F013         	call	___ftge	;wreg free
  1346  00146A  B0D8               	btfsc	status,0,c
  1347  00146C  D002               	goto	l2389
  1348                           
  1349                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1350  00146E  0EF7               	movlw	247
  1351  001470  D001               	goto	L1
  1352  001472                     l2389:
  1353                           
  1354                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1355  001472  0EF8               	movlw	248
  1356  001474                     L1:
  1357  001474  265C               	addwf	printf@exp,f,c
  1358  001476  0EFF               	movlw	255
  1359  001478  225D               	addwfc	printf@exp+1,f,c
  1360  00147A  D000               	goto	l2391
  1361  00147C                     l2391:
  1362                           
  1363                           ;doprnt.c: 1124: }
  1364                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1365  00147C  505C               	movf	printf@exp,w,c
  1366  00147E  ECC6  F00C         	call	_scale
  1367  001482  C024  F058         	movff	?_scale,printf@tmpval
  1368  001486  C025  F059         	movff	?_scale+1,printf@tmpval+1
  1369  00148A  C026  F05A         	movff	?_scale+2,printf@tmpval+2
  1370                           
  1371                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1372  00148E  D017               	goto	l2395
  1373  001490  C05E  F001         	movff	printf@fval,__div_to_l_@f1
  1374  001494  C05F  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1375  001498  C060  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1376  00149C  C058  F004         	movff	printf@tmpval,__div_to_l_@f2
  1377  0014A0  C059  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1378  0014A4  C05A  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1379  0014A8  EC42  F011         	call	__div_to_l_	;wreg free
  1380  0014AC  C001  F050         	movff	?__div_to_l_,printf@val
  1381  0014B0  C002  F051         	movff	?__div_to_l_+1,printf@val+1
  1382  0014B4  C003  F052         	movff	?__div_to_l_+2,printf@val+2
  1383  0014B8  C004  F053         	movff	?__div_to_l_+3,printf@val+3
  1384  0014BC  D017               	goto	l2397
  1385  0014BE                     l2395:
  1386  0014BE  C05E  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1387  0014C2  C05F  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1388  0014C6  C060  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1389  0014CA  C058  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1390  0014CE  C059  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1391  0014D2  C05A  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1392  0014D6  ECBA  F010         	call	__tdiv_to_l_	;wreg free
  1393  0014DA  C001  F050         	movff	?__tdiv_to_l_,printf@val
  1394  0014DE  C002  F051         	movff	?__tdiv_to_l_+1,printf@val+1
  1395  0014E2  C003  F052         	movff	?__tdiv_to_l_+2,printf@val+2
  1396  0014E6  C004  F053         	movff	?__tdiv_to_l_+3,printf@val+3
  1397  0014EA  D000               	goto	l2397
  1398  0014EC                     l2397:
  1399                           
  1400                           ;doprnt.c: 1129: fval = 0.0;
  1401  0014EC  0E00               	movlw	0
  1402  0014EE  6E5E               	movwf	printf@fval,c
  1403  0014F0  0E00               	movlw	0
  1404  0014F2  6E5F               	movwf	printf@fval+1,c
  1405  0014F4  0E00               	movlw	0
  1406  0014F6  6E60               	movwf	printf@fval+2,c
  1407                           
  1408                           ;doprnt.c: 1130: } else {
  1409  0014F8  D033               	goto	l2403
  1410  0014FA                     l2399:
  1411                           
  1412                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1413  0014FA  C05E  F02B         	movff	printf@fval,___fttol@f1
  1414  0014FE  C05F  F02C         	movff	printf@fval+1,___fttol@f1+1
  1415  001502  C060  F02D         	movff	printf@fval+2,___fttol@f1+2
  1416  001506  EC43  F012         	call	___fttol	;wreg free
  1417  00150A  C02B  F050         	movff	?___fttol,printf@val
  1418  00150E  C02C  F051         	movff	?___fttol+1,printf@val+1
  1419  001512  C02D  F052         	movff	?___fttol+2,printf@val+2
  1420  001516  C02E  F053         	movff	?___fttol+3,printf@val+3
  1421                           
  1422                           ;doprnt.c: 1132: fval -= (double)val;
  1423  00151A  C05E  F03A         	movff	printf@fval,___ftsub@f1
  1424  00151E  C05F  F03B         	movff	printf@fval+1,___ftsub@f1+1
  1425  001522  C060  F03C         	movff	printf@fval+2,___ftsub@f1+2
  1426  001526  C050  F009         	movff	printf@val,___lltoft@c
  1427  00152A  C051  F00A         	movff	printf@val+1,___lltoft@c+1
  1428  00152E  C052  F00B         	movff	printf@val+2,___lltoft@c+2
  1429  001532  C053  F00C         	movff	printf@val+3,___lltoft@c+3
  1430  001536  ECA6  F014         	call	___lltoft	;wreg free
  1431  00153A  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1432  00153E  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1433  001542  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1434  001546  ECFA  F014         	call	___ftsub	;wreg free
  1435  00154A  C03A  F05E         	movff	?___ftsub,printf@fval
  1436  00154E  C03B  F05F         	movff	?___ftsub+1,printf@fval+1
  1437  001552  C03C  F060         	movff	?___ftsub+2,printf@fval+2
  1438                           
  1439                           ;doprnt.c: 1133: exp = 0;
  1440  001556  0E00               	movlw	0
  1441  001558  6E5D               	movwf	printf@exp+1,c
  1442  00155A  0E00               	movlw	0
  1443  00155C  6E5C               	movwf	printf@exp,c
  1444  00155E  D000               	goto	l2403
  1445  001560                     l2403:
  1446                           
  1447                           ;doprnt.c: 1134: }
  1448                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1449  001560  0E01               	movlw	1
  1450  001562  6E63               	movwf	printf@c,c
  1451  001564                     l2405:
  1452  001564  0E0A               	movlw	10
  1453  001566  1863               	xorwf	printf@c,w,c
  1454  001568  B4D8               	btfsc	status,2,c
  1455  00156A  D01C               	goto	l2417
  1456  00156C  D001               	goto	l2409
  1457  00156E  D01A               	goto	l2417
  1458  001570                     l2409:
  1459                           
  1460                           ;doprnt.c: 1137: if(val < dpowers[c])
  1461  001570  5063               	movf	printf@c,w,c
  1462  001572  0D04               	mullw	4
  1463  001574  0E01               	movlw	low _dpowers
  1464  001576  24F3               	addwf	prodl,w,c
  1465  001578  6EF6               	movwf	tblptrl,c
  1466  00157A  0E10               	movlw	high _dpowers
  1467  00157C  20F4               	addwfc	prodh,w,c
  1468  00157E  6EF7               	movwf	tblptrh,c
  1469  001580                     	if	0	;There are less than 3 active tblptr bytes
  1470  001580                     	endif
  1471  001580  0009               	tblrd		*+
  1472  001582  50F5               	movf	tablat,w,c
  1473  001584  5C50               	subwf	printf@val,w,c
  1474  001586  0009               	tblrd		*+
  1475  001588  50F5               	movf	tablat,w,c
  1476  00158A  5851               	subwfb	printf@val+1,w,c
  1477  00158C  0009               	tblrd		*+
  1478  00158E  50F5               	movf	tablat,w,c
  1479  001590  5852               	subwfb	printf@val+2,w,c
  1480  001592  0009               	tblrd		*+
  1481  001594  50F5               	movf	tablat,w,c
  1482  001596  5853               	subwfb	printf@val+3,w,c
  1483  001598  A0D8               	btfss	status,0,c
  1484  00159A  D004               	goto	l2417
  1485  00159C  D001               	goto	l2413
  1486                           
  1487                           ;doprnt.c: 1138: break;
  1488  00159E  D002               	goto	l2417
  1489  0015A0                     l2413:
  1490  0015A0  2A63               	incf	printf@c,f,c
  1491  0015A2  D7E0               	goto	l2405
  1492  0015A4                     l2417:
  1493                           
  1494                           ;doprnt.c: 1142: width -= prec + c + exp;
  1495  0015A4  C063  F045         	movff	printf@c,??_printf
  1496  0015A8  6A46               	clrf	(??_printf+1)& (0+255),c
  1497  0015AA  BE45               	btfsc	??_printf& (0+255),7,c
  1498  0015AC  0646               	decf	(??_printf+1)& (0+255),f,c
  1499  0015AE  5061               	movf	printf@prec,w,c
  1500  0015B0  2645               	addwf	??_printf,f,c
  1501  0015B2  5062               	movf	printf@prec+1,w,c
  1502  0015B4  2246               	addwfc	??_printf+1,f,c
  1503  0015B6  505C               	movf	printf@exp,w,c
  1504  0015B8  2645               	addwf	??_printf,f,c
  1505  0015BA  505D               	movf	printf@exp+1,w,c
  1506  0015BC  2246               	addwfc	??_printf+1,f,c
  1507  0015BE  5045               	movf	??_printf,w,c
  1508  0015C0  5E56               	subwf	printf@width,f,c
  1509  0015C2  5046               	movf	??_printf+1,w,c
  1510  0015C4  5A57               	subwfb	printf@width+1,f,c
  1511                           
  1512                           ;doprnt.c: 1143: if(
  1513                           ;doprnt.c: 1147: prec)
  1514  0015C6  5061               	movf	printf@prec,w,c
  1515  0015C8  1062               	iorwf	printf@prec+1,w,c
  1516  0015CA  B4D8               	btfsc	status,2,c
  1517  0015CC  D004               	goto	l2421
  1518                           
  1519                           ;doprnt.c: 1148: width--;
  1520  0015CE  0656               	decf	printf@width,f,c
  1521  0015D0  A0D8               	btfss	status,0,c
  1522  0015D2  0657               	decf	printf@width+1,f,c
  1523  0015D4  D000               	goto	l2421
  1524  0015D6                     l2421:
  1525                           
  1526                           ;doprnt.c: 1149: if(flag & 0x03)
  1527  0015D6  0E03               	movlw	3
  1528  0015D8  1454               	andwf	printf@flag,w,c
  1529  0015DA  6E45               	movwf	??_printf& (0+255),c
  1530  0015DC  0E00               	movlw	0
  1531  0015DE  1455               	andwf	printf@flag+1,w,c
  1532  0015E0  6E46               	movwf	(??_printf+1)& (0+255),c
  1533  0015E2  5045               	movf	??_printf,w,c
  1534  0015E4  1046               	iorwf	??_printf+1,w,c
  1535  0015E6  B4D8               	btfsc	status,2,c
  1536  0015E8  D009               	goto	l2429
  1537  0015EA  D004               	goto	l2427
  1538                           
  1539                           ;doprnt.c: 1175: {
  1540                           ;doprnt.c: 1180: while(width > 0) {
  1541                           
  1542                           ;doprnt.c: 1150: width--;
  1543  0015EC  D007               	goto	l2429
  1544  0015EE                     l2425:
  1545                           
  1546                           ;doprnt.c: 1181: (putch(' ') );
  1547  0015EE  0E20               	movlw	32
  1548  0015F0  EC5D  F015         	call	_putch
  1549  0015F4                     l2427:
  1550                           
  1551                           ;doprnt.c: 1182: width--;
  1552  0015F4  0656               	decf	printf@width,f,c
  1553  0015F6  A0D8               	btfss	status,0,c
  1554  0015F8  0657               	decf	printf@width+1,f,c
  1555  0015FA  D000               	goto	l2429
  1556  0015FC                     l2429:
  1557  0015FC  BE57               	btfsc	printf@width+1,7,c
  1558  0015FE  D005               	goto	l2431
  1559  001600  5057               	movf	printf@width+1,w,c
  1560  001602  E1F5               	bnz	l2425
  1561  001604  0456               	decf	printf@width,w,c
  1562  001606  B0D8               	btfsc	status,0,c
  1563  001608  D7F2               	goto	l2425
  1564  00160A                     l2431:
  1565                           
  1566                           ;doprnt.c: 1183: }
  1567                           ;doprnt.c: 1188: if(flag & 0x03)
  1568  00160A  0E03               	movlw	3
  1569  00160C  1454               	andwf	printf@flag,w,c
  1570  00160E  6E45               	movwf	??_printf& (0+255),c
  1571  001610  0E00               	movlw	0
  1572  001612  1455               	andwf	printf@flag+1,w,c
  1573  001614  6E46               	movwf	(??_printf+1)& (0+255),c
  1574  001616  5045               	movf	??_printf,w,c
  1575  001618  1046               	iorwf	??_printf+1,w,c
  1576  00161A  B4D8               	btfsc	status,2,c
  1577  00161C  D049               	goto	l2441
  1578                           
  1579                           ;doprnt.c: 1190: (putch('-') );
  1580  00161E  0E2D               	movlw	45
  1581  001620  EC5D  F015         	call	_putch
  1582                           
  1583                           ;doprnt.c: 1195: }
  1584                           ;doprnt.c: 1196: while(c--) {
  1585  001624  D045               	goto	l2441
  1586  001626                     l2435:
  1587                           
  1588                           ;doprnt.c: 1200: {
  1589                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1590  001626  C050  F001         	movff	printf@val,___lldiv@dividend
  1591  00162A  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  1592  00162E  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  1593  001632  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  1594  001636  5063               	movf	printf@c,w,c
  1595  001638  0D04               	mullw	4
  1596  00163A  0E01               	movlw	low _dpowers
  1597  00163C  24F3               	addwf	prodl,w,c
  1598  00163E  6EF6               	movwf	tblptrl,c
  1599  001640  0E10               	movlw	high _dpowers
  1600  001642  20F4               	addwfc	prodh,w,c
  1601  001644  6EF7               	movwf	tblptrh,c
  1602  001646                     	if	0	;There are less than 3 active tblptr bytes
  1603  001646                     	endif
  1604  001646  0009               	tblrd		*+
  1605  001648  CFF5 F005          	movff	tablat,___lldiv@divisor
  1606  00164C  0009               	tblrd		*+
  1607  00164E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1608  001652  0009               	tblrd		*+
  1609  001654  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1610  001658  000A               	tblrd		*-
  1611  00165A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1612  00165E  ECAF  F013         	call	___lldiv	;wreg free
  1613  001662  C001  F058         	movff	?___lldiv,printf@tmpval
  1614  001666  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  1615  00166A  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  1616  00166E  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  1617                           
  1618                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1619  001672  C058  F001         	movff	printf@tmpval,___llmod@dividend
  1620  001676  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1621  00167A  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1622  00167E  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1623  001682  0E0A               	movlw	10
  1624  001684  6E05               	movwf	___llmod@divisor,c
  1625  001686  0E00               	movlw	0
  1626  001688  6E06               	movwf	___llmod@divisor+1,c
  1627  00168A  0E00               	movlw	0
  1628  00168C  6E07               	movwf	___llmod@divisor+2,c
  1629  00168E  0E00               	movlw	0
  1630  001690  6E08               	movwf	___llmod@divisor+3,c
  1631  001692  EC36  F014         	call	___llmod	;wreg free
  1632  001696  C001  F058         	movff	?___llmod,printf@tmpval
  1633  00169A  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  1634  00169E  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  1635  0016A2  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  1636                           
  1637                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1638  0016A6  5058               	movf	printf@tmpval,w,c
  1639  0016A8  0F30               	addlw	48
  1640  0016AA  EC5D  F015         	call	_putch
  1641  0016AE  D000               	goto	l2441
  1642  0016B0                     l2441:
  1643  0016B0  0663               	decf	printf@c,f,c
  1644  0016B2  2863               	incf	printf@c,w,c
  1645  0016B4  B4D8               	btfsc	status,2,c
  1646  0016B6  D009               	goto	l2447
  1647  0016B8  D7B6               	goto	l2435
  1648                           
  1649                           ;doprnt.c: 1204: }
  1650                           ;doprnt.c: 1206: }
  1651                           ;doprnt.c: 1207: while(exp > 0) {
  1652  0016BA  D007               	goto	l2447
  1653  0016BC                     l2443:
  1654                           
  1655                           ;doprnt.c: 1208: (putch('0') );
  1656  0016BC  0E30               	movlw	48
  1657  0016BE  EC5D  F015         	call	_putch
  1658                           
  1659                           ;doprnt.c: 1209: exp--;
  1660  0016C2  065C               	decf	printf@exp,f,c
  1661  0016C4  A0D8               	btfss	status,0,c
  1662  0016C6  065D               	decf	printf@exp+1,f,c
  1663  0016C8  D000               	goto	l2447
  1664  0016CA                     l2447:
  1665  0016CA  BE5D               	btfsc	printf@exp+1,7,c
  1666  0016CC  D005               	goto	l2449
  1667  0016CE  505D               	movf	printf@exp+1,w,c
  1668  0016D0  E1F5               	bnz	l2443
  1669  0016D2  045C               	decf	printf@exp,w,c
  1670  0016D4  B0D8               	btfsc	status,0,c
  1671  0016D6  D7F2               	goto	l2443
  1672  0016D8                     l2449:
  1673                           
  1674                           ;doprnt.c: 1210: }
  1675                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1676  0016D8  BE62               	btfsc	printf@prec+1,7,c
  1677  0016DA  D009               	goto	l113
  1678  0016DC  5062               	movf	printf@prec+1,w,c
  1679  0016DE  E104               	bnz	u2800
  1680  0016E0  0E09               	movlw	9
  1681  0016E2  5C61               	subwf	printf@prec,w,c
  1682  0016E4  A0D8               	btfss	status,0,c
  1683  0016E6  D003               	goto	l113
  1684  0016E8                     u2800:
  1685                           
  1686                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1687  0016E8  0E08               	movlw	8
  1688  0016EA  6E63               	movwf	printf@c,c
  1689  0016EC  D003               	goto	l2453
  1690  0016EE                     l113:
  1691                           
  1692                           ;doprnt.c: 1213: else
  1693                           ;doprnt.c: 1214: c = prec;
  1694  0016EE  C061  F063         	movff	printf@prec,printf@c
  1695  0016F2  D000               	goto	l2453
  1696  0016F4                     l2453:
  1697                           
  1698                           ;doprnt.c: 1215: prec -= c;
  1699  0016F4  5063               	movf	printf@c,w,c
  1700  0016F6  5E61               	subwf	printf@prec,f,c
  1701  0016F8  0E00               	movlw	0
  1702  0016FA  BE63               	btfsc	printf@c,7,c
  1703  0016FC  0EFF               	movlw	255
  1704  0016FE  5A62               	subwfb	printf@prec+1,f,c
  1705                           
  1706                           ;doprnt.c: 1219: if(c)
  1707  001700  5063               	movf	printf@c,w,c
  1708  001702  B4D8               	btfsc	status,2,c
  1709  001704  D004               	goto	l2459
  1710                           
  1711                           ;doprnt.c: 1221: (putch('.') );
  1712  001706  0E2E               	movlw	46
  1713  001708  EC5D  F015         	call	_putch
  1714  00170C  D000               	goto	l2459
  1715  00170E                     l2459:
  1716                           
  1717                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1718  00170E  5063               	movf	printf@c,w,c
  1719  001710  ECC6  F00C         	call	_scale
  1720  001714  C024  F04B         	movff	?_scale,_printf$911
  1721  001718  C025  F04C         	movff	?_scale+1,_printf$911+1
  1722  00171C  C026  F04D         	movff	?_scale+2,_printf$911+2
  1723                           
  1724                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1725  001720  C05E  F018         	movff	printf@fval,___ftmul@f2
  1726  001724  C05F  F019         	movff	printf@fval+1,___ftmul@f2+1
  1727  001728  C060  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1728  00172C  C04B  F015         	movff	_printf$911,___ftmul@f1
  1729  001730  C04C  F016         	movff	_printf$911+1,___ftmul@f1+1
  1730  001734  C04D  F017         	movff	_printf$911+2,___ftmul@f1+2
  1731  001738  ECC7  F011         	call	___ftmul	;wreg free
  1732  00173C  C015  F02B         	movff	?___ftmul,___fttol@f1
  1733  001740  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  1734  001744  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  1735  001748  EC43  F012         	call	___fttol	;wreg free
  1736  00174C  C02B  F050         	movff	?___fttol,printf@val
  1737  001750  C02C  F051         	movff	?___fttol+1,printf@val+1
  1738  001754  C02D  F052         	movff	?___fttol+2,printf@val+2
  1739  001758  C02E  F053         	movff	?___fttol+3,printf@val+3
  1740                           
  1741                           ;doprnt.c: 1228: while(c--) {
  1742  00175C  D06B               	goto	l2469
  1743  00175E                     l2463:
  1744                           
  1745                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1746  00175E  C050  F001         	movff	printf@val,___lldiv@dividend
  1747  001762  C051  F002         	movff	printf@val+1,___lldiv@dividend+1
  1748  001766  C052  F003         	movff	printf@val+2,___lldiv@dividend+2
  1749  00176A  C053  F004         	movff	printf@val+3,___lldiv@dividend+3
  1750  00176E  5063               	movf	printf@c,w,c
  1751  001770  0D04               	mullw	4
  1752  001772  0E01               	movlw	low _dpowers
  1753  001774  24F3               	addwf	prodl,w,c
  1754  001776  6EF6               	movwf	tblptrl,c
  1755  001778  0E10               	movlw	high _dpowers
  1756  00177A  20F4               	addwfc	prodh,w,c
  1757  00177C  6EF7               	movwf	tblptrh,c
  1758  00177E                     	if	0	;There are less than 3 active tblptr bytes
  1759  00177E                     	endif
  1760  00177E  0009               	tblrd		*+
  1761  001780  CFF5 F005          	movff	tablat,___lldiv@divisor
  1762  001784  0009               	tblrd		*+
  1763  001786  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1764  00178A  0009               	tblrd		*+
  1765  00178C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1766  001790  000A               	tblrd		*-
  1767  001792  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1768  001796  ECAF  F013         	call	___lldiv	;wreg free
  1769  00179A  C001  F058         	movff	?___lldiv,printf@tmpval
  1770  00179E  C002  F059         	movff	?___lldiv+1,printf@tmpval+1
  1771  0017A2  C003  F05A         	movff	?___lldiv+2,printf@tmpval+2
  1772  0017A6  C004  F05B         	movff	?___lldiv+3,printf@tmpval+3
  1773                           
  1774                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1775  0017AA  C058  F001         	movff	printf@tmpval,___llmod@dividend
  1776  0017AE  C059  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1777  0017B2  C05A  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1778  0017B6  C05B  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1779  0017BA  0E0A               	movlw	10
  1780  0017BC  6E05               	movwf	___llmod@divisor,c
  1781  0017BE  0E00               	movlw	0
  1782  0017C0  6E06               	movwf	___llmod@divisor+1,c
  1783  0017C2  0E00               	movlw	0
  1784  0017C4  6E07               	movwf	___llmod@divisor+2,c
  1785  0017C6  0E00               	movlw	0
  1786  0017C8  6E08               	movwf	___llmod@divisor+3,c
  1787  0017CA  EC36  F014         	call	___llmod	;wreg free
  1788  0017CE  C001  F058         	movff	?___llmod,printf@tmpval
  1789  0017D2  C002  F059         	movff	?___llmod+1,printf@tmpval+1
  1790  0017D6  C003  F05A         	movff	?___llmod+2,printf@tmpval+2
  1791  0017DA  C004  F05B         	movff	?___llmod+3,printf@tmpval+3
  1792                           
  1793                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1794  0017DE  5058               	movf	printf@tmpval,w,c
  1795  0017E0  0F30               	addlw	48
  1796  0017E2  EC5D  F015         	call	_putch
  1797                           
  1798                           ;doprnt.c: 1232: val %= dpowers[c];
  1799  0017E6  C050  F001         	movff	printf@val,___llmod@dividend
  1800  0017EA  C051  F002         	movff	printf@val+1,___llmod@dividend+1
  1801  0017EE  C052  F003         	movff	printf@val+2,___llmod@dividend+2
  1802  0017F2  C053  F004         	movff	printf@val+3,___llmod@dividend+3
  1803  0017F6  5063               	movf	printf@c,w,c
  1804  0017F8  0D04               	mullw	4
  1805  0017FA  0E01               	movlw	low _dpowers
  1806  0017FC  24F3               	addwf	prodl,w,c
  1807  0017FE  6EF6               	movwf	tblptrl,c
  1808  001800  0E10               	movlw	high _dpowers
  1809  001802  20F4               	addwfc	prodh,w,c
  1810  001804  6EF7               	movwf	tblptrh,c
  1811  001806                     	if	0	;There are less than 3 active tblptr bytes
  1812  001806                     	endif
  1813  001806  0009               	tblrd		*+
  1814  001808  CFF5 F005          	movff	tablat,___llmod@divisor
  1815  00180C  0009               	tblrd		*+
  1816  00180E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1817  001812  0009               	tblrd		*+
  1818  001814  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1819  001818  000A               	tblrd		*-
  1820  00181A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1821  00181E  EC36  F014         	call	___llmod	;wreg free
  1822  001822  C001  F050         	movff	?___llmod,printf@val
  1823  001826  C002  F051         	movff	?___llmod+1,printf@val+1
  1824  00182A  C003  F052         	movff	?___llmod+2,printf@val+2
  1825  00182E  C004  F053         	movff	?___llmod+3,printf@val+3
  1826  001832  D000               	goto	l2469
  1827  001834                     l2469:
  1828  001834  0663               	decf	printf@c,f,c
  1829  001836  2863               	incf	printf@c,w,c
  1830  001838  B4D8               	btfsc	status,2,c
  1831  00183A  D009               	goto	l2475
  1832  00183C  D790               	goto	l2463
  1833                           
  1834                           ;doprnt.c: 1233: }
  1835                           ;doprnt.c: 1235: while(prec) {
  1836  00183E  D007               	goto	l2475
  1837  001840                     l2471:
  1838                           
  1839                           ;doprnt.c: 1236: (putch('0') );
  1840  001840  0E30               	movlw	48
  1841  001842  EC5D  F015         	call	_putch
  1842                           
  1843                           ;doprnt.c: 1237: prec--;
  1844  001846  0661               	decf	printf@prec,f,c
  1845  001848  A0D8               	btfss	status,0,c
  1846  00184A  0662               	decf	printf@prec+1,f,c
  1847  00184C  D000               	goto	l2475
  1848  00184E                     l2475:
  1849  00184E  5061               	movf	printf@prec,w,c
  1850  001850  1062               	iorwf	printf@prec+1,w,c
  1851  001852  B4D8               	btfsc	status,2,c
  1852  001854  D08B               	goto	l2521
  1853  001856  D7F4               	goto	l2471
  1854                           
  1855                           ;doprnt.c: 1238: }
  1856                           ;doprnt.c: 1245: continue;
  1857  001858  D089               	goto	l2521
  1858  00185A                     l2477:
  1859                           
  1860                           ;doprnt.c: 1246: }
  1861                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1862  00185A  5061               	movf	printf@prec,w,c
  1863  00185C  1062               	iorwf	printf@prec+1,w,c
  1864  00185E  A4D8               	btfss	status,2,c
  1865  001860  D009               	goto	l2483
  1866  001862  5050               	movf	printf@val,w,c
  1867  001864  1051               	iorwf	printf@val+1,w,c
  1868  001866  1052               	iorwf	printf@val+2,w,c
  1869  001868  1053               	iorwf	printf@val+3,w,c
  1870  00186A  A4D8               	btfss	status,2,c
  1871  00186C  D003               	goto	l2483
  1872                           
  1873                           ;doprnt.c: 1291: prec++;
  1874  00186E  4A61               	infsnz	printf@prec,f,c
  1875  001870  2A62               	incf	printf@prec+1,f,c
  1876  001872  D000               	goto	l2483
  1877  001874                     l2483:
  1878                           
  1879                           ;doprnt.c: 1339: if(c < prec)
  1880  001874  0E80               	movlw	128
  1881  001876  BE63               	btfsc	printf@c,7,c
  1882  001878  0E7F               	movlw	127
  1883  00187A  6E45               	movwf	??_printf& (0+255),c
  1884  00187C  5061               	movf	printf@prec,w,c
  1885  00187E  5C63               	subwf	printf@c,w,c
  1886  001880  5062               	movf	printf@prec+1,w,c
  1887  001882  0A80               	xorlw	128
  1888  001884  5845               	subwfb	??_printf& (0+255),w,c
  1889  001886  B0D8               	btfsc	status,0,c
  1890  001888  D003               	goto	l2487
  1891                           
  1892                           ;doprnt.c: 1340: c = prec;
  1893  00188A  C061  F063         	movff	printf@prec,printf@c
  1894  00188E  D011               	goto	l2491
  1895  001890                     l2487:
  1896                           
  1897                           ;doprnt.c: 1341: else if(prec < c)
  1898  001890  5062               	movf	printf@prec+1,w,c
  1899  001892  0A80               	xorlw	128
  1900  001894  6E45               	movwf	??_printf& (0+255),c
  1901  001896  5063               	movf	printf@c,w,c
  1902  001898  5C61               	subwf	printf@prec,w,c
  1903  00189A  0E80               	movlw	128
  1904  00189C  BE63               	btfsc	printf@c,7,c
  1905  00189E  0E7F               	movlw	127
  1906  0018A0  5845               	subwfb	??_printf& (0+255),w,c
  1907  0018A2  B0D8               	btfsc	status,0,c
  1908  0018A4  D006               	goto	l2491
  1909                           
  1910                           ;doprnt.c: 1342: prec = c;
  1911  0018A6  5063               	movf	printf@c,w,c
  1912  0018A8  6E61               	movwf	printf@prec,c
  1913  0018AA  6A62               	clrf	printf@prec+1,c
  1914  0018AC  BE61               	btfsc	printf@prec,7,c
  1915  0018AE  0662               	decf	printf@prec+1,f,c
  1916  0018B0  D000               	goto	l2491
  1917  0018B2                     l2491:
  1918                           
  1919                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1920  0018B2  5056               	movf	printf@width,w,c
  1921  0018B4  1057               	iorwf	printf@width+1,w,c
  1922  0018B6  B4D8               	btfsc	status,2,c
  1923  0018B8  D00E               	goto	l2497
  1924  0018BA  0E03               	movlw	3
  1925  0018BC  1454               	andwf	printf@flag,w,c
  1926  0018BE  6E45               	movwf	??_printf& (0+255),c
  1927  0018C0  0E00               	movlw	0
  1928  0018C2  1455               	andwf	printf@flag+1,w,c
  1929  0018C4  6E46               	movwf	(??_printf+1)& (0+255),c
  1930  0018C6  5045               	movf	??_printf,w,c
  1931  0018C8  1046               	iorwf	??_printf+1,w,c
  1932  0018CA  B4D8               	btfsc	status,2,c
  1933  0018CC  D004               	goto	l2497
  1934                           
  1935                           ;doprnt.c: 1346: width--;
  1936  0018CE  0656               	decf	printf@width,f,c
  1937  0018D0  A0D8               	btfss	status,0,c
  1938  0018D2  0657               	decf	printf@width+1,f,c
  1939  0018D4  D000               	goto	l2497
  1940  0018D6                     l2497:
  1941                           
  1942                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1943  0018D6  AC55               	btfss	printf@flag+1,6,c
  1944  0018D8  D014               	goto	l2505
  1945                           
  1946                           ;doprnt.c: 1349: if(width > prec)
  1947  0018DA  5056               	movf	printf@width,w,c
  1948  0018DC  5C61               	subwf	printf@prec,w,c
  1949  0018DE  5062               	movf	printf@prec+1,w,c
  1950  0018E0  0A80               	xorlw	128
  1951  0018E2  6E45               	movwf	??_printf& (0+255),c
  1952  0018E4  5057               	movf	printf@width+1,w,c
  1953  0018E6  0A80               	xorlw	128
  1954  0018E8  5845               	subwfb	??_printf& (0+255),w,c
  1955  0018EA  B0D8               	btfsc	status,0,c
  1956  0018EC  D005               	goto	l2503
  1957                           
  1958                           ;doprnt.c: 1350: width -= prec;
  1959  0018EE  5061               	movf	printf@prec,w,c
  1960  0018F0  5E56               	subwf	printf@width,f,c
  1961  0018F2  5062               	movf	printf@prec+1,w,c
  1962  0018F4  5A57               	subwfb	printf@width+1,f,c
  1963  0018F6  D005               	goto	l2505
  1964  0018F8                     l2503:
  1965                           
  1966                           ;doprnt.c: 1351: else
  1967                           ;doprnt.c: 1352: width = 0;
  1968  0018F8  0E00               	movlw	0
  1969  0018FA  6E57               	movwf	printf@width+1,c
  1970  0018FC  0E00               	movlw	0
  1971  0018FE  6E56               	movwf	printf@width,c
  1972  001900  D000               	goto	l2505
  1973  001902                     l2505:
  1974                           
  1975                           ;doprnt.c: 1353: }
  1976                           ;doprnt.c: 1381: if(width > c)
  1977  001902  0E80               	movlw	128
  1978  001904  BE63               	btfsc	printf@c,7,c
  1979  001906  0E7F               	movlw	127
  1980  001908  6E45               	movwf	??_printf& (0+255),c
  1981  00190A  5056               	movf	printf@width,w,c
  1982  00190C  5C63               	subwf	printf@c,w,c
  1983  00190E  5057               	movf	printf@width+1,w,c
  1984  001910  0A80               	xorlw	128
  1985  001912  5845               	subwfb	??_printf& (0+255),w,c
  1986  001914  B0D8               	btfsc	status,0,c
  1987  001916  D007               	goto	l2509
  1988                           
  1989                           ;doprnt.c: 1382: width -= c;
  1990  001918  5063               	movf	printf@c,w,c
  1991  00191A  5E56               	subwf	printf@width,f,c
  1992  00191C  0E00               	movlw	0
  1993  00191E  BE63               	btfsc	printf@c,7,c
  1994  001920  0EFF               	movlw	255
  1995  001922  5A57               	subwfb	printf@width+1,f,c
  1996  001924  D005               	goto	l2511
  1997  001926                     l2509:
  1998                           
  1999                           ;doprnt.c: 1383: else
  2000                           ;doprnt.c: 1384: width = 0;
  2001  001926  0E00               	movlw	0
  2002  001928  6E57               	movwf	printf@width+1,c
  2003  00192A  0E00               	movlw	0
  2004  00192C  6E56               	movwf	printf@width,c
  2005  00192E  D000               	goto	l2511
  2006  001930                     l2511:
  2007                           
  2008                           ;doprnt.c: 1422: {
  2009                           ;doprnt.c: 1424: if(width
  2010                           ;doprnt.c: 1428: )
  2011  001930  5056               	movf	printf@width,w,c
  2012  001932  1057               	iorwf	printf@width+1,w,c
  2013  001934  B4D8               	btfsc	status,2,c
  2014  001936  D00C               	goto	l2517
  2015  001938                     l2513:
  2016                           
  2017                           ;doprnt.c: 1430: (putch(' ') );
  2018  001938  0E20               	movlw	32
  2019  00193A  EC5D  F015         	call	_putch
  2020                           
  2021                           ;doprnt.c: 1431: while(--width);
  2022  00193E  0656               	decf	printf@width,f,c
  2023  001940  A0D8               	btfss	status,0,c
  2024  001942  0657               	decf	printf@width+1,f,c
  2025  001944  5056               	movf	printf@width,w,c
  2026  001946  1057               	iorwf	printf@width+1,w,c
  2027  001948  B4D8               	btfsc	status,2,c
  2028  00194A  D002               	goto	l2517
  2029  00194C  D7F5               	goto	l2513
  2030  00194E  D000               	goto	l2517
  2031  001950                     l2517:
  2032                           
  2033                           ;doprnt.c: 1438: if(flag & 0x03)
  2034  001950  0E03               	movlw	3
  2035  001952  1454               	andwf	printf@flag,w,c
  2036  001954  6E45               	movwf	??_printf& (0+255),c
  2037  001956  0E00               	movlw	0
  2038  001958  1455               	andwf	printf@flag+1,w,c
  2039  00195A  6E46               	movwf	(??_printf+1)& (0+255),c
  2040  00195C  5045               	movf	??_printf,w,c
  2041  00195E  1046               	iorwf	??_printf+1,w,c
  2042  001960  B4D8               	btfsc	status,2,c
  2043  001962  D004               	goto	l2521
  2044                           
  2045                           ;doprnt.c: 1439: (putch('-') );
  2046  001964  0E2D               	movlw	45
  2047  001966  EC5D  F015         	call	_putch
  2048  00196A  D000               	goto	l2521
  2049  00196C                     l2521:
  2050  00196C  C040  FFF6         	movff	printf@f,tblptrl
  2051  001970  C041  FFF7         	movff	printf@f+1,tblptrh
  2052  001974  4A40               	infsnz	printf@f,f,c
  2053  001976  2A41               	incf	printf@f+1,f,c
  2054  001978                     	if	0	;tblptru may be non-zero
  2055  001978                     	endif
  2056  001978                     	if	0	;tblptru may be non-zero
  2057  001978                     	endif
  2058  001978  0008               	tblrd		*
  2059  00197A  CFF5 F063          	movff	tablat,printf@c
  2060  00197E  5063               	movf	printf@c,w,c
  2061  001980  B4D8               	btfsc	status,2,c
  2062  001982  D003               	goto	l137
  2063  001984  EF84  F008         	goto	l2289
  2064  001988  D000               	goto	l137
  2065  00198A                     l137:
  2066  00198A  0012               	return		;funcret
  2067  00198C                     __end_of_printf:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           prodh	equ	0xFF4
  2074                           prodl	equ	0xFF3
  2075                           wreg	equ	0xFE8
  2076                           postinc2	equ	0xFDE
  2077                           postdec2	equ	0xFDD
  2078                           fsr2h	equ	0xFDA
  2079                           fsr2l	equ	0xFD9
  2080                           status	equ	0xFD8
  2081                           
  2082 ;; *************** function _scale *****************
  2083 ;; Defined at:
  2084 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;  scl             1    wreg     char 
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;  scl             1   41[COMRAM] char 
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  3   35[COMRAM] char 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2098 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;Total ram usage:        7 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    2
  2105 ;; This function calls:
  2106 ;;		___awdiv
  2107 ;;		___awmod
  2108 ;;		___ftmul
  2109 ;;		___wmul
  2110 ;; This function is called by:
  2111 ;;		_printf
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text2
  2116  00198C                     __ptext2:
  2117                           	opt stack 0
  2118  00198C                     _scale:
  2119                           	opt stack 27
  2120                           
  2121                           ;incstack = 0
  2122                           ;scale@scl stored from wreg
  2123  00198C  6E2A               	movwf	scale@scl,c
  2124                           
  2125                           ;doprnt.c: 428: if(scl < 0) {
  2126  00198E  AE2A               	btfss	scale@scl,7,c
  2127  001990  D0EF               	goto	l2013
  2128                           
  2129                           ;doprnt.c: 429: scl = -scl;
  2130  001992  6C2A               	negf	scale@scl,c
  2131                           
  2132                           ;doprnt.c: 430: if(scl>=110)
  2133  001994  502A               	movf	scale@scl,w,c
  2134  001996  0A80               	xorlw	128
  2135  001998  0F12               	addlw	-238
  2136  00199A  A0D8               	btfss	status,0,c
  2137  00199C  D08D               	goto	l2003
  2138                           
  2139                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2140  00199E  0E00               	movlw	0
  2141  0019A0  6E12               	movwf	___wmul@multiplicand+1,c
  2142  0019A2  0E03               	movlw	3
  2143  0019A4  6E11               	movwf	___wmul@multiplicand,c
  2144  0019A6  0E00               	movlw	0
  2145  0019A8  6E0A               	movwf	___awdiv@divisor+1,c
  2146  0019AA  0E0A               	movlw	10
  2147  0019AC  6E09               	movwf	___awdiv@divisor,c
  2148  0019AE  0E00               	movlw	0
  2149  0019B0  6E04               	movwf	___awmod@divisor+1,c
  2150  0019B2  0E64               	movlw	100
  2151  0019B4  6E03               	movwf	___awmod@divisor,c
  2152  0019B6  502A               	movf	scale@scl,w,c
  2153  0019B8  6E01               	movwf	___awmod@dividend,c
  2154  0019BA  6A02               	clrf	___awmod@dividend+1,c
  2155  0019BC  BE01               	btfsc	___awmod@dividend,7,c
  2156  0019BE  0602               	decf	___awmod@dividend+1,f,c
  2157  0019C0  ECF5  F013         	call	___awmod	;wreg free
  2158  0019C4  C001  F007         	movff	?___awmod,___awdiv@dividend
  2159  0019C8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2160  0019CC  EC19  F013         	call	___awdiv	;wreg free
  2161  0019D0  0E09               	movlw	9
  2162  0019D2  2407               	addwf	?___awdiv,w,c
  2163  0019D4  6E0F               	movwf	___wmul@multiplier,c
  2164  0019D6  0E00               	movlw	0
  2165  0019D8  2008               	addwfc	?___awdiv+1,w,c
  2166  0019DA  6E10               	movwf	___wmul@multiplier+1,c
  2167  0019DC  EC1C  F015         	call	___wmul	;wreg free
  2168  0019E0  0E29               	movlw	low __npowers_
  2169  0019E2  240F               	addwf	?___wmul,w,c
  2170  0019E4  6EF6               	movwf	tblptrl,c
  2171  0019E6  0E10               	movlw	high __npowers_
  2172  0019E8  2010               	addwfc	?___wmul+1,w,c
  2173  0019EA  6EF7               	movwf	tblptrh,c
  2174  0019EC                     	if	0	;There are less than 3 active tblptr bytes
  2175  0019EC                     	endif
  2176  0019EC  0009               	tblrd		*+
  2177  0019EE  CFF5 F018          	movff	tablat,___ftmul@f2
  2178  0019F2  0009               	tblrd		*+
  2179  0019F4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2180  0019F8  000A               	tblrd		*-
  2181  0019FA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2182  0019FE  0E00               	movlw	0
  2183  001A00  6E0A               	movwf	___awdiv@divisor+1,c
  2184  001A02  0E64               	movlw	100
  2185  001A04  6E09               	movwf	___awdiv@divisor,c
  2186  001A06  502A               	movf	scale@scl,w,c
  2187  001A08  6E07               	movwf	___awdiv@dividend,c
  2188  001A0A  6A08               	clrf	___awdiv@dividend+1,c
  2189  001A0C  BE07               	btfsc	___awdiv@dividend,7,c
  2190  001A0E  0608               	decf	___awdiv@dividend+1,f,c
  2191  001A10  EC19  F013         	call	___awdiv	;wreg free
  2192  001A14  0E12               	movlw	18
  2193  001A16  2407               	addwf	?___awdiv,w,c
  2194  001A18  6E0F               	movwf	___wmul@multiplier,c
  2195  001A1A  0E00               	movlw	0
  2196  001A1C  2008               	addwfc	?___awdiv+1,w,c
  2197  001A1E  6E10               	movwf	___wmul@multiplier+1,c
  2198  001A20  0E00               	movlw	0
  2199  001A22  6E12               	movwf	___wmul@multiplicand+1,c
  2200  001A24  0E03               	movlw	3
  2201  001A26  6E11               	movwf	___wmul@multiplicand,c
  2202  001A28  EC1C  F015         	call	___wmul	;wreg free
  2203  001A2C  0E29               	movlw	low __npowers_
  2204  001A2E  240F               	addwf	?___wmul,w,c
  2205  001A30  6EF6               	movwf	tblptrl,c
  2206  001A32  0E10               	movlw	high __npowers_
  2207  001A34  2010               	addwfc	?___wmul+1,w,c
  2208  001A36  6EF7               	movwf	tblptrh,c
  2209  001A38                     	if	0	;There are less than 3 active tblptr bytes
  2210  001A38                     	endif
  2211  001A38  0009               	tblrd		*+
  2212  001A3A  CFF5 F015          	movff	tablat,___ftmul@f1
  2213  001A3E  0009               	tblrd		*+
  2214  001A40  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2215  001A44  000A               	tblrd		*-
  2216  001A46  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2217  001A4A  ECC7  F011         	call	___ftmul	;wreg free
  2218  001A4E  C015  F027         	movff	?___ftmul,_scale$910
  2219  001A52  C016  F028         	movff	?___ftmul+1,_scale$910+1
  2220  001A56  C017  F029         	movff	?___ftmul+2,_scale$910+2
  2221                           
  2222                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2223  001A5A  C027  F015         	movff	_scale$910,___ftmul@f1
  2224  001A5E  C028  F016         	movff	_scale$910+1,___ftmul@f1+1
  2225  001A62  C029  F017         	movff	_scale$910+2,___ftmul@f1+2
  2226  001A66  0E00               	movlw	0
  2227  001A68  6E12               	movwf	___wmul@multiplicand+1,c
  2228  001A6A  0E03               	movlw	3
  2229  001A6C  6E11               	movwf	___wmul@multiplicand,c
  2230  001A6E  0E00               	movlw	0
  2231  001A70  6E04               	movwf	___awmod@divisor+1,c
  2232  001A72  0E0A               	movlw	10
  2233  001A74  6E03               	movwf	___awmod@divisor,c
  2234  001A76  502A               	movf	scale@scl,w,c
  2235  001A78  6E01               	movwf	___awmod@dividend,c
  2236  001A7A  6A02               	clrf	___awmod@dividend+1,c
  2237  001A7C  BE01               	btfsc	___awmod@dividend,7,c
  2238  001A7E  0602               	decf	___awmod@dividend+1,f,c
  2239  001A80  ECF5  F013         	call	___awmod	;wreg free
  2240  001A84  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2241  001A88  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2242  001A8C  EC1C  F015         	call	___wmul	;wreg free
  2243  001A90  0E29               	movlw	low __npowers_
  2244  001A92  240F               	addwf	?___wmul,w,c
  2245  001A94  6EF6               	movwf	tblptrl,c
  2246  001A96  0E10               	movlw	high __npowers_
  2247  001A98  2010               	addwfc	?___wmul+1,w,c
  2248  001A9A  6EF7               	movwf	tblptrh,c
  2249  001A9C                     	if	0	;There are less than 3 active tblptr bytes
  2250  001A9C                     	endif
  2251  001A9C  0009               	tblrd		*+
  2252  001A9E  CFF5 F018          	movff	tablat,___ftmul@f2
  2253  001AA2  0009               	tblrd		*+
  2254  001AA4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2255  001AA8  000A               	tblrd		*-
  2256  001AAA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2257  001AAE  ECC7  F011         	call	___ftmul	;wreg free
  2258  001AB2  D141               	goto	L5
  2259  001AB4  D15A               	goto	l54
  2260  001AB6  D054               	goto	l2009
  2261  001AB8                     l2003:
  2262                           
  2263                           ;doprnt.c: 432: else if(scl > 10)
  2264  001AB8  502A               	movf	scale@scl,w,c
  2265  001ABA  0A80               	xorlw	128
  2266  001ABC  0F75               	addlw	-139
  2267  001ABE  A0D8               	btfss	status,0,c
  2268  001AC0  D04F               	goto	l2009
  2269                           
  2270                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2271  001AC2  0E00               	movlw	0
  2272  001AC4  6E0A               	movwf	___awdiv@divisor+1,c
  2273  001AC6  0E0A               	movlw	10
  2274  001AC8  6E09               	movwf	___awdiv@divisor,c
  2275  001ACA  502A               	movf	scale@scl,w,c
  2276  001ACC  6E07               	movwf	___awdiv@dividend,c
  2277  001ACE  6A08               	clrf	___awdiv@dividend+1,c
  2278  001AD0  BE07               	btfsc	___awdiv@dividend,7,c
  2279  001AD2  0608               	decf	___awdiv@dividend+1,f,c
  2280  001AD4  EC19  F013         	call	___awdiv	;wreg free
  2281  001AD8  0E09               	movlw	9
  2282  001ADA  2407               	addwf	?___awdiv,w,c
  2283  001ADC  6E0F               	movwf	___wmul@multiplier,c
  2284  001ADE  0E00               	movlw	0
  2285  001AE0  2008               	addwfc	?___awdiv+1,w,c
  2286  001AE2  6E10               	movwf	___wmul@multiplier+1,c
  2287  001AE4  0E00               	movlw	0
  2288  001AE6  6E12               	movwf	___wmul@multiplicand+1,c
  2289  001AE8  0E03               	movlw	3
  2290  001AEA  6E11               	movwf	___wmul@multiplicand,c
  2291  001AEC  EC1C  F015         	call	___wmul	;wreg free
  2292  001AF0  0E29               	movlw	low __npowers_
  2293  001AF2  240F               	addwf	?___wmul,w,c
  2294  001AF4  6EF6               	movwf	tblptrl,c
  2295  001AF6  0E10               	movlw	high __npowers_
  2296  001AF8  2010               	addwfc	?___wmul+1,w,c
  2297  001AFA  6EF7               	movwf	tblptrh,c
  2298  001AFC                     	if	0	;There are less than 3 active tblptr bytes
  2299  001AFC                     	endif
  2300  001AFC  0009               	tblrd		*+
  2301  001AFE  CFF5 F015          	movff	tablat,___ftmul@f1
  2302  001B02  0009               	tblrd		*+
  2303  001B04  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2304  001B08  000A               	tblrd		*-
  2305  001B0A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2306  001B0E  0E00               	movlw	0
  2307  001B10  6E12               	movwf	___wmul@multiplicand+1,c
  2308  001B12  0E03               	movlw	3
  2309  001B14  6E11               	movwf	___wmul@multiplicand,c
  2310  001B16  0E00               	movlw	0
  2311  001B18  6E04               	movwf	___awmod@divisor+1,c
  2312  001B1A  0E0A               	movlw	10
  2313  001B1C  6E03               	movwf	___awmod@divisor,c
  2314  001B1E  502A               	movf	scale@scl,w,c
  2315  001B20  6E01               	movwf	___awmod@dividend,c
  2316  001B22  6A02               	clrf	___awmod@dividend+1,c
  2317  001B24  BE01               	btfsc	___awmod@dividend,7,c
  2318  001B26  0602               	decf	___awmod@dividend+1,f,c
  2319  001B28  ECF5  F013         	call	___awmod	;wreg free
  2320  001B2C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2321  001B30  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2322  001B34  EC1C  F015         	call	___wmul	;wreg free
  2323  001B38  0E29               	movlw	low __npowers_
  2324  001B3A  240F               	addwf	?___wmul,w,c
  2325  001B3C  6EF6               	movwf	tblptrl,c
  2326  001B3E  0E10               	movlw	high __npowers_
  2327  001B40  2010               	addwfc	?___wmul+1,w,c
  2328  001B42  6EF7               	movwf	tblptrh,c
  2329  001B44                     	if	0	;There are less than 3 active tblptr bytes
  2330  001B44                     	endif
  2331  001B44  0009               	tblrd		*+
  2332  001B46  CFF5 F018          	movff	tablat,___ftmul@f2
  2333  001B4A  0009               	tblrd		*+
  2334  001B4C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2335  001B50  000A               	tblrd		*-
  2336  001B52  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2337  001B56  ECC7  F011         	call	___ftmul	;wreg free
  2338  001B5A  D0ED               	goto	L5
  2339  001B5C  D106               	goto	l54
  2340  001B5E  D000               	goto	l2009
  2341  001B60                     l2009:
  2342                           
  2343                           ;doprnt.c: 434: return _npowers_[scl];
  2344  001B60  502A               	movf	scale@scl,w,c
  2345  001B62  0D03               	mullw	3
  2346  001B64  0E29               	movlw	low __npowers_
  2347  001B66  24F3               	addwf	prodl,w,c
  2348  001B68  6EF6               	movwf	tblptrl,c
  2349  001B6A  0E10               	movlw	high __npowers_
  2350  001B6C  D0F2               	goto	L4
  2351  001B6E  D0FD               	goto	l54
  2352  001B70                     l2013:
  2353                           
  2354                           ;doprnt.c: 435: }
  2355                           ;doprnt.c: 436: if(scl>=110)
  2356  001B70  502A               	movf	scale@scl,w,c
  2357  001B72  0A80               	xorlw	128
  2358  001B74  0F12               	addlw	-238
  2359  001B76  A0D8               	btfss	status,0,c
  2360  001B78  D08D               	goto	l2021
  2361                           
  2362                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2363  001B7A  0E00               	movlw	0
  2364  001B7C  6E12               	movwf	___wmul@multiplicand+1,c
  2365  001B7E  0E03               	movlw	3
  2366  001B80  6E11               	movwf	___wmul@multiplicand,c
  2367  001B82  0E00               	movlw	0
  2368  001B84  6E0A               	movwf	___awdiv@divisor+1,c
  2369  001B86  0E0A               	movlw	10
  2370  001B88  6E09               	movwf	___awdiv@divisor,c
  2371  001B8A  0E00               	movlw	0
  2372  001B8C  6E04               	movwf	___awmod@divisor+1,c
  2373  001B8E  0E64               	movlw	100
  2374  001B90  6E03               	movwf	___awmod@divisor,c
  2375  001B92  502A               	movf	scale@scl,w,c
  2376  001B94  6E01               	movwf	___awmod@dividend,c
  2377  001B96  6A02               	clrf	___awmod@dividend+1,c
  2378  001B98  BE01               	btfsc	___awmod@dividend,7,c
  2379  001B9A  0602               	decf	___awmod@dividend+1,f,c
  2380  001B9C  ECF5  F013         	call	___awmod	;wreg free
  2381  001BA0  C001  F007         	movff	?___awmod,___awdiv@dividend
  2382  001BA4  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2383  001BA8  EC19  F013         	call	___awdiv	;wreg free
  2384  001BAC  0E09               	movlw	9
  2385  001BAE  2407               	addwf	?___awdiv,w,c
  2386  001BB0  6E0F               	movwf	___wmul@multiplier,c
  2387  001BB2  0E00               	movlw	0
  2388  001BB4  2008               	addwfc	?___awdiv+1,w,c
  2389  001BB6  6E10               	movwf	___wmul@multiplier+1,c
  2390  001BB8  EC1C  F015         	call	___wmul	;wreg free
  2391  001BBC  0E50               	movlw	low __powers_
  2392  001BBE  240F               	addwf	?___wmul,w,c
  2393  001BC0  6EF6               	movwf	tblptrl,c
  2394  001BC2  0E10               	movlw	high __powers_
  2395  001BC4  2010               	addwfc	?___wmul+1,w,c
  2396  001BC6  6EF7               	movwf	tblptrh,c
  2397  001BC8                     	if	0	;There are less than 3 active tblptr bytes
  2398  001BC8                     	endif
  2399  001BC8  0009               	tblrd		*+
  2400  001BCA  CFF5 F018          	movff	tablat,___ftmul@f2
  2401  001BCE  0009               	tblrd		*+
  2402  001BD0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2403  001BD4  000A               	tblrd		*-
  2404  001BD6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2405  001BDA  0E00               	movlw	0
  2406  001BDC  6E0A               	movwf	___awdiv@divisor+1,c
  2407  001BDE  0E64               	movlw	100
  2408  001BE0  6E09               	movwf	___awdiv@divisor,c
  2409  001BE2  502A               	movf	scale@scl,w,c
  2410  001BE4  6E07               	movwf	___awdiv@dividend,c
  2411  001BE6  6A08               	clrf	___awdiv@dividend+1,c
  2412  001BE8  BE07               	btfsc	___awdiv@dividend,7,c
  2413  001BEA  0608               	decf	___awdiv@dividend+1,f,c
  2414  001BEC  EC19  F013         	call	___awdiv	;wreg free
  2415  001BF0  0E12               	movlw	18
  2416  001BF2  2407               	addwf	?___awdiv,w,c
  2417  001BF4  6E0F               	movwf	___wmul@multiplier,c
  2418  001BF6  0E00               	movlw	0
  2419  001BF8  2008               	addwfc	?___awdiv+1,w,c
  2420  001BFA  6E10               	movwf	___wmul@multiplier+1,c
  2421  001BFC  0E00               	movlw	0
  2422  001BFE  6E12               	movwf	___wmul@multiplicand+1,c
  2423  001C00  0E03               	movlw	3
  2424  001C02  6E11               	movwf	___wmul@multiplicand,c
  2425  001C04  EC1C  F015         	call	___wmul	;wreg free
  2426  001C08  0E50               	movlw	low __powers_
  2427  001C0A  240F               	addwf	?___wmul,w,c
  2428  001C0C  6EF6               	movwf	tblptrl,c
  2429  001C0E  0E10               	movlw	high __powers_
  2430  001C10  2010               	addwfc	?___wmul+1,w,c
  2431  001C12  6EF7               	movwf	tblptrh,c
  2432  001C14                     	if	0	;There are less than 3 active tblptr bytes
  2433  001C14                     	endif
  2434  001C14  0009               	tblrd		*+
  2435  001C16  CFF5 F015          	movff	tablat,___ftmul@f1
  2436  001C1A  0009               	tblrd		*+
  2437  001C1C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2438  001C20  000A               	tblrd		*-
  2439  001C22  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2440  001C26  ECC7  F011         	call	___ftmul	;wreg free
  2441  001C2A  C015  F027         	movff	?___ftmul,_scale$910
  2442  001C2E  C016  F028         	movff	?___ftmul+1,_scale$910+1
  2443  001C32  C017  F029         	movff	?___ftmul+2,_scale$910+2
  2444                           
  2445                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2446  001C36  C027  F015         	movff	_scale$910,___ftmul@f1
  2447  001C3A  C028  F016         	movff	_scale$910+1,___ftmul@f1+1
  2448  001C3E  C029  F017         	movff	_scale$910+2,___ftmul@f1+2
  2449  001C42  0E00               	movlw	0
  2450  001C44  6E12               	movwf	___wmul@multiplicand+1,c
  2451  001C46  0E03               	movlw	3
  2452  001C48  6E11               	movwf	___wmul@multiplicand,c
  2453  001C4A  0E00               	movlw	0
  2454  001C4C  6E04               	movwf	___awmod@divisor+1,c
  2455  001C4E  0E0A               	movlw	10
  2456  001C50  6E03               	movwf	___awmod@divisor,c
  2457  001C52  502A               	movf	scale@scl,w,c
  2458  001C54  6E01               	movwf	___awmod@dividend,c
  2459  001C56  6A02               	clrf	___awmod@dividend+1,c
  2460  001C58  BE01               	btfsc	___awmod@dividend,7,c
  2461  001C5A  0602               	decf	___awmod@dividend+1,f,c
  2462  001C5C  ECF5  F013         	call	___awmod	;wreg free
  2463  001C60  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2464  001C64  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2465  001C68  EC1C  F015         	call	___wmul	;wreg free
  2466  001C6C  0E50               	movlw	low __powers_
  2467  001C6E  240F               	addwf	?___wmul,w,c
  2468  001C70  6EF6               	movwf	tblptrl,c
  2469  001C72  0E10               	movlw	high __powers_
  2470  001C74  2010               	addwfc	?___wmul+1,w,c
  2471  001C76  6EF7               	movwf	tblptrh,c
  2472  001C78                     	if	0	;There are less than 3 active tblptr bytes
  2473  001C78                     	endif
  2474  001C78  0009               	tblrd		*+
  2475  001C7A  CFF5 F018          	movff	tablat,___ftmul@f2
  2476  001C7E  0009               	tblrd		*+
  2477  001C80  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2478  001C84  000A               	tblrd		*-
  2479  001C86  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2480  001C8A  ECC7  F011         	call	___ftmul	;wreg free
  2481  001C8E  D053               	goto	L5
  2482  001C90  D06C               	goto	l54
  2483  001C92  D059               	goto	l2027
  2484  001C94                     l2021:
  2485                           
  2486                           ;doprnt.c: 438: else if(scl > 10)
  2487  001C94  502A               	movf	scale@scl,w,c
  2488  001C96  0A80               	xorlw	128
  2489  001C98  0F75               	addlw	-139
  2490  001C9A  A0D8               	btfss	status,0,c
  2491  001C9C  D054               	goto	l2027
  2492                           
  2493                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2494  001C9E  0E00               	movlw	0
  2495  001CA0  6E0A               	movwf	___awdiv@divisor+1,c
  2496  001CA2  0E0A               	movlw	10
  2497  001CA4  6E09               	movwf	___awdiv@divisor,c
  2498  001CA6  502A               	movf	scale@scl,w,c
  2499  001CA8  6E07               	movwf	___awdiv@dividend,c
  2500  001CAA  6A08               	clrf	___awdiv@dividend+1,c
  2501  001CAC  BE07               	btfsc	___awdiv@dividend,7,c
  2502  001CAE  0608               	decf	___awdiv@dividend+1,f,c
  2503  001CB0  EC19  F013         	call	___awdiv	;wreg free
  2504  001CB4  0E09               	movlw	9
  2505  001CB6  2407               	addwf	?___awdiv,w,c
  2506  001CB8  6E0F               	movwf	___wmul@multiplier,c
  2507  001CBA  0E00               	movlw	0
  2508  001CBC  2008               	addwfc	?___awdiv+1,w,c
  2509  001CBE  6E10               	movwf	___wmul@multiplier+1,c
  2510  001CC0  0E00               	movlw	0
  2511  001CC2  6E12               	movwf	___wmul@multiplicand+1,c
  2512  001CC4  0E03               	movlw	3
  2513  001CC6  6E11               	movwf	___wmul@multiplicand,c
  2514  001CC8  EC1C  F015         	call	___wmul	;wreg free
  2515  001CCC  0E50               	movlw	low __powers_
  2516  001CCE  240F               	addwf	?___wmul,w,c
  2517  001CD0  6EF6               	movwf	tblptrl,c
  2518  001CD2  0E10               	movlw	high __powers_
  2519  001CD4  2010               	addwfc	?___wmul+1,w,c
  2520  001CD6  6EF7               	movwf	tblptrh,c
  2521  001CD8                     	if	0	;There are less than 3 active tblptr bytes
  2522  001CD8                     	endif
  2523  001CD8  0009               	tblrd		*+
  2524  001CDA  CFF5 F015          	movff	tablat,___ftmul@f1
  2525  001CDE  0009               	tblrd		*+
  2526  001CE0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2527  001CE4  000A               	tblrd		*-
  2528  001CE6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2529  001CEA  0E00               	movlw	0
  2530  001CEC  6E12               	movwf	___wmul@multiplicand+1,c
  2531  001CEE  0E03               	movlw	3
  2532  001CF0  6E11               	movwf	___wmul@multiplicand,c
  2533  001CF2  0E00               	movlw	0
  2534  001CF4  6E04               	movwf	___awmod@divisor+1,c
  2535  001CF6  0E0A               	movlw	10
  2536  001CF8  6E03               	movwf	___awmod@divisor,c
  2537  001CFA  502A               	movf	scale@scl,w,c
  2538  001CFC  6E01               	movwf	___awmod@dividend,c
  2539  001CFE  6A02               	clrf	___awmod@dividend+1,c
  2540  001D00  BE01               	btfsc	___awmod@dividend,7,c
  2541  001D02  0602               	decf	___awmod@dividend+1,f,c
  2542  001D04  ECF5  F013         	call	___awmod	;wreg free
  2543  001D08  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2544  001D0C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2545  001D10  EC1C  F015         	call	___wmul	;wreg free
  2546  001D14  0E50               	movlw	low __powers_
  2547  001D16  240F               	addwf	?___wmul,w,c
  2548  001D18  6EF6               	movwf	tblptrl,c
  2549  001D1A  0E10               	movlw	high __powers_
  2550  001D1C  2010               	addwfc	?___wmul+1,w,c
  2551  001D1E  6EF7               	movwf	tblptrh,c
  2552  001D20                     	if	0	;There are less than 3 active tblptr bytes
  2553  001D20                     	endif
  2554  001D20  0009               	tblrd		*+
  2555  001D22  CFF5 F018          	movff	tablat,___ftmul@f2
  2556  001D26  0009               	tblrd		*+
  2557  001D28  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2558  001D2C  000A               	tblrd		*-
  2559  001D2E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2560  001D32  ECC7  F011         	call	___ftmul	;wreg free
  2561  001D36                     L5:
  2562  001D36  C015  F024         	movff	?___ftmul,?_scale
  2563  001D3A  C016  F025         	movff	?___ftmul+1,?_scale+1
  2564  001D3E  C017  F026         	movff	?___ftmul+2,?_scale+2
  2565  001D42  D013               	goto	l54
  2566  001D44  D000               	goto	l2027
  2567  001D46                     l2027:
  2568                           
  2569                           ;doprnt.c: 440: return _powers_[scl];
  2570  001D46  502A               	movf	scale@scl,w,c
  2571  001D48  0D03               	mullw	3
  2572  001D4A  0E50               	movlw	low __powers_
  2573  001D4C  24F3               	addwf	prodl,w,c
  2574  001D4E  6EF6               	movwf	tblptrl,c
  2575  001D50  0E10               	movlw	high __powers_
  2576  001D52                     L4:
  2577  001D52  20F4               	addwfc	prodh,w,c
  2578  001D54  6EF7               	movwf	tblptrh,c
  2579  001D56                     	if	0	;There are less than 3 active tblptr bytes
  2580  001D56                     	endif
  2581  001D56  0009               	tblrd		*+
  2582  001D58  CFF5 F024          	movff	tablat,?_scale
  2583  001D5C  0009               	tblrd		*+
  2584  001D5E  CFF5 F025          	movff	tablat,?_scale+1
  2585  001D62  000A               	tblrd		*-
  2586  001D64  CFF5 F026          	movff	tablat,?_scale+2
  2587  001D68  D000               	goto	l54
  2588  001D6A                     l54:
  2589  001D6A  0012               	return		;funcret
  2590  001D6C                     __end_of_scale:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           prodh	equ	0xFF4
  2597                           prodl	equ	0xFF3
  2598                           wreg	equ	0xFE8
  2599                           postinc2	equ	0xFDE
  2600                           postdec2	equ	0xFDD
  2601                           fsr2h	equ	0xFDA
  2602                           fsr2l	equ	0xFD9
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function _putch *****************
  2606 ;; Defined at:
  2607 ;;		line 19 in file "lab1p2.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  c               1    wreg     unsigned char 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  c               1    0[COMRAM] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;		None               void
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;Total ram usage:        1 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_printf
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text3
  2635  002ABA                     __ptext3:
  2636                           	opt stack 0
  2637  002ABA                     _putch:
  2638                           	opt stack 29
  2639                           
  2640                           ;incstack = 0
  2641                           ;putch@c stored from wreg
  2642  002ABA  6E01               	movwf	putch@c,c
  2643                           
  2644                           ;lab1p2.c: 20: while(!TRMT)
  2645  002ABC  D003               	goto	l1969
  2646  002ABE                     l1967:
  2647                           
  2648                           ;lab1p2.c: 21: TXREG = c;
  2649  002ABE  C001  FFAD         	movff	putch@c,4013	;volatile
  2650  002AC2  D000               	goto	l1969
  2651  002AC4                     l1969:
  2652  002AC4  A2AC               	btfss	4012,1,c	;volatile
  2653  002AC6  D7FB               	goto	l1967
  2654  002AC8  0012               	return		;funcret
  2655  002ACA                     __end_of_putch:
  2656                           	opt stack 0
  2657                           tblptru	equ	0xFF8
  2658                           tblptrh	equ	0xFF7
  2659                           tblptrl	equ	0xFF6
  2660                           tablat	equ	0xFF5
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           wreg	equ	0xFE8
  2664                           postinc2	equ	0xFDE
  2665                           postdec2	equ	0xFDD
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _isdigit *****************
  2671 ;; Defined at:
  2672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  c               1    wreg     unsigned char 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  c               1    2[COMRAM] unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;		None               void
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;Total ram usage:        3 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_printf
  2696 ;; This function uses a non-reentrant model
  2697 ;;
  2698                           
  2699                           	psect	text4
  2700  002A84                     __ptext4:
  2701                           	opt stack 0
  2702  002A84                     _isdigit:
  2703                           	opt stack 29
  2704                           
  2705                           ;incstack = 0
  2706                           ;isdigit@c stored from wreg
  2707  002A84  6E03               	movwf	isdigit@c,c
  2708  002A86  0E00               	movlw	0
  2709  002A88  6E02               	movwf	_isdigit$680,c
  2710  002A8A  0E3A               	movlw	58
  2711  002A8C  6003               	cpfslt	isdigit@c,c
  2712  002A8E  D006               	goto	l2039
  2713  002A90  0E2F               	movlw	47
  2714  002A92  6403               	cpfsgt	isdigit@c,c
  2715  002A94  D003               	goto	l2039
  2716  002A96  0E01               	movlw	1
  2717  002A98  6E02               	movwf	_isdigit$680,c
  2718  002A9A  D000               	goto	l2039
  2719  002A9C                     l2039:
  2720  002A9C  C002  F001         	movff	_isdigit$680,??_isdigit
  2721  002AA0  3001               	rrcf	??_isdigit,w,c
  2722  002AA2  D000               	goto	l638
  2723  002AA4                     l638:
  2724  002AA4  0012               	return		;funcret
  2725  002AA6                     __end_of_isdigit:
  2726                           	opt stack 0
  2727                           tblptru	equ	0xFF8
  2728                           tblptrh	equ	0xFF7
  2729                           tblptrl	equ	0xFF6
  2730                           tablat	equ	0xFF5
  2731                           prodh	equ	0xFF4
  2732                           prodl	equ	0xFF3
  2733                           wreg	equ	0xFE8
  2734                           postinc2	equ	0xFDE
  2735                           postdec2	equ	0xFDD
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _fround *****************
  2741 ;; Defined at:
  2742 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  prec            1    wreg     unsigned char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  prec            1   44[COMRAM] unsigned char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  3   35[COMRAM] unsigned char 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2756 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;Total ram usage:       10 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    2
  2763 ;; This function calls:
  2764 ;;		___awdiv
  2765 ;;		___awmod
  2766 ;;		___ftmul
  2767 ;;		___wmul
  2768 ;; This function is called by:
  2769 ;;		_printf
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text5
  2774  001D6C                     __ptext5:
  2775                           	opt stack 0
  2776  001D6C                     _fround:
  2777                           	opt stack 27
  2778                           
  2779                           ;incstack = 0
  2780                           ;fround@prec stored from wreg
  2781  001D6C  6E2D               	movwf	fround@prec,c
  2782                           
  2783                           ;doprnt.c: 413: if(prec>=110)
  2784  001D6E  0E6D               	movlw	109
  2785  001D70  642D               	cpfsgt	fround@prec,c
  2786  001D72  D09B               	goto	l1981
  2787                           
  2788                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2789  001D74  0E00               	movlw	0
  2790  001D76  6E12               	movwf	___wmul@multiplicand+1,c
  2791  001D78  0E03               	movlw	3
  2792  001D7A  6E11               	movwf	___wmul@multiplicand,c
  2793  001D7C  0E00               	movlw	0
  2794  001D7E  6E0A               	movwf	___awdiv@divisor+1,c
  2795  001D80  0E0A               	movlw	10
  2796  001D82  6E09               	movwf	___awdiv@divisor,c
  2797  001D84  0E00               	movlw	0
  2798  001D86  6E04               	movwf	___awmod@divisor+1,c
  2799  001D88  0E64               	movlw	100
  2800  001D8A  6E03               	movwf	___awmod@divisor,c
  2801  001D8C  C02D  F001         	movff	fround@prec,___awmod@dividend
  2802  001D90  6A02               	clrf	___awmod@dividend+1,c
  2803  001D92  ECF5  F013         	call	___awmod	;wreg free
  2804  001D96  C001  F007         	movff	?___awmod,___awdiv@dividend
  2805  001D9A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2806  001D9E  EC19  F013         	call	___awdiv	;wreg free
  2807  001DA2  0E09               	movlw	9
  2808  001DA4  2407               	addwf	?___awdiv,w,c
  2809  001DA6  6E0F               	movwf	___wmul@multiplier,c
  2810  001DA8  0E00               	movlw	0
  2811  001DAA  2008               	addwfc	?___awdiv+1,w,c
  2812  001DAC  6E10               	movwf	___wmul@multiplier+1,c
  2813  001DAE  EC1C  F015         	call	___wmul	;wreg free
  2814  001DB2  0E29               	movlw	low __npowers_
  2815  001DB4  240F               	addwf	?___wmul,w,c
  2816  001DB6  6EF6               	movwf	tblptrl,c
  2817  001DB8  0E10               	movlw	high __npowers_
  2818  001DBA  2010               	addwfc	?___wmul+1,w,c
  2819  001DBC  6EF7               	movwf	tblptrh,c
  2820  001DBE                     	if	0	;There are less than 3 active tblptr bytes
  2821  001DBE                     	endif
  2822  001DBE  0009               	tblrd		*+
  2823  001DC0  CFF5 F018          	movff	tablat,___ftmul@f2
  2824  001DC4  0009               	tblrd		*+
  2825  001DC6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2826  001DCA  000A               	tblrd		*-
  2827  001DCC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2828  001DD0  0E00               	movlw	0
  2829  001DD2  6E0A               	movwf	___awdiv@divisor+1,c
  2830  001DD4  0E64               	movlw	100
  2831  001DD6  6E09               	movwf	___awdiv@divisor,c
  2832  001DD8  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2833  001DDC  6A08               	clrf	___awdiv@dividend+1,c
  2834  001DDE  EC19  F013         	call	___awdiv	;wreg free
  2835  001DE2  0E12               	movlw	18
  2836  001DE4  2407               	addwf	?___awdiv,w,c
  2837  001DE6  6E0F               	movwf	___wmul@multiplier,c
  2838  001DE8  0E00               	movlw	0
  2839  001DEA  2008               	addwfc	?___awdiv+1,w,c
  2840  001DEC  6E10               	movwf	___wmul@multiplier+1,c
  2841  001DEE  0E00               	movlw	0
  2842  001DF0  6E12               	movwf	___wmul@multiplicand+1,c
  2843  001DF2  0E03               	movlw	3
  2844  001DF4  6E11               	movwf	___wmul@multiplicand,c
  2845  001DF6  EC1C  F015         	call	___wmul	;wreg free
  2846  001DFA  0E29               	movlw	low __npowers_
  2847  001DFC  240F               	addwf	?___wmul,w,c
  2848  001DFE  6EF6               	movwf	tblptrl,c
  2849  001E00  0E10               	movlw	high __npowers_
  2850  001E02  2010               	addwfc	?___wmul+1,w,c
  2851  001E04  6EF7               	movwf	tblptrh,c
  2852  001E06                     	if	0	;There are less than 3 active tblptr bytes
  2853  001E06                     	endif
  2854  001E06  0009               	tblrd		*+
  2855  001E08  CFF5 F015          	movff	tablat,___ftmul@f1
  2856  001E0C  0009               	tblrd		*+
  2857  001E0E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2858  001E12  000A               	tblrd		*-
  2859  001E14  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2860  001E18  ECC7  F011         	call	___ftmul	;wreg free
  2861  001E1C  C015  F02A         	movff	?___ftmul,_fround$908
  2862  001E20  C016  F02B         	movff	?___ftmul+1,_fround$908+1
  2863  001E24  C017  F02C         	movff	?___ftmul+2,_fround$908+2
  2864                           
  2865                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2866  001E28  0E00               	movlw	0
  2867  001E2A  6E12               	movwf	___wmul@multiplicand+1,c
  2868  001E2C  0E03               	movlw	3
  2869  001E2E  6E11               	movwf	___wmul@multiplicand,c
  2870  001E30  0E00               	movlw	0
  2871  001E32  6E04               	movwf	___awmod@divisor+1,c
  2872  001E34  0E0A               	movlw	10
  2873  001E36  6E03               	movwf	___awmod@divisor,c
  2874  001E38  C02D  F001         	movff	fround@prec,___awmod@dividend
  2875  001E3C  6A02               	clrf	___awmod@dividend+1,c
  2876  001E3E  ECF5  F013         	call	___awmod	;wreg free
  2877  001E42  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2878  001E46  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2879  001E4A  EC1C  F015         	call	___wmul	;wreg free
  2880  001E4E  0E29               	movlw	low __npowers_
  2881  001E50  240F               	addwf	?___wmul,w,c
  2882  001E52  6EF6               	movwf	tblptrl,c
  2883  001E54  0E10               	movlw	high __npowers_
  2884  001E56  2010               	addwfc	?___wmul+1,w,c
  2885  001E58  6EF7               	movwf	tblptrh,c
  2886  001E5A                     	if	0	;There are less than 3 active tblptr bytes
  2887  001E5A                     	endif
  2888  001E5A  0009               	tblrd		*+
  2889  001E5C  CFF5 F018          	movff	tablat,___ftmul@f2
  2890  001E60  0009               	tblrd		*+
  2891  001E62  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2892  001E66  000A               	tblrd		*-
  2893  001E68  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2894  001E6C  C02A  F015         	movff	_fround$908,___ftmul@f1
  2895  001E70  C02B  F016         	movff	_fround$908+1,___ftmul@f1+1
  2896  001E74  C02C  F017         	movff	_fround$908+2,___ftmul@f1+2
  2897  001E78  ECC7  F011         	call	___ftmul	;wreg free
  2898  001E7C  C015  F027         	movff	?___ftmul,_fround$909
  2899  001E80  C016  F028         	movff	?___ftmul+1,_fround$909+1
  2900  001E84  C017  F029         	movff	?___ftmul+2,_fround$909+2
  2901                           
  2902                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2903  001E88  C027  F015         	movff	_fround$909,___ftmul@f1
  2904  001E8C  C028  F016         	movff	_fround$909+1,___ftmul@f1+1
  2905  001E90  C029  F017         	movff	_fround$909+2,___ftmul@f1+2
  2906  001E94  0E00               	movlw	0
  2907  001E96  6E18               	movwf	___ftmul@f2,c
  2908  001E98  0E00               	movlw	0
  2909  001E9A  6E19               	movwf	___ftmul@f2+1,c
  2910  001E9C  0E3F               	movlw	63
  2911  001E9E  6E1A               	movwf	___ftmul@f2+2,c
  2912  001EA0  ECC7  F011         	call	___ftmul	;wreg free
  2913  001EA4  D07D               	goto	L7
  2914  001EA6  D083               	goto	l47
  2915  001EA8  D062               	goto	l1989
  2916  001EAA                     l1981:
  2917                           
  2918                           ;doprnt.c: 415: else if(prec > 10)
  2919  001EAA  0E0A               	movlw	10
  2920  001EAC  642D               	cpfsgt	fround@prec,c
  2921  001EAE  D05F               	goto	l1989
  2922                           
  2923                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2924  001EB0  0E00               	movlw	0
  2925  001EB2  6E12               	movwf	___wmul@multiplicand+1,c
  2926  001EB4  0E03               	movlw	3
  2927  001EB6  6E11               	movwf	___wmul@multiplicand,c
  2928  001EB8  0E00               	movlw	0
  2929  001EBA  6E04               	movwf	___awmod@divisor+1,c
  2930  001EBC  0E0A               	movlw	10
  2931  001EBE  6E03               	movwf	___awmod@divisor,c
  2932  001EC0  C02D  F001         	movff	fround@prec,___awmod@dividend
  2933  001EC4  6A02               	clrf	___awmod@dividend+1,c
  2934  001EC6  ECF5  F013         	call	___awmod	;wreg free
  2935  001ECA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2936  001ECE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2937  001ED2  EC1C  F015         	call	___wmul	;wreg free
  2938  001ED6  0E29               	movlw	low __npowers_
  2939  001ED8  240F               	addwf	?___wmul,w,c
  2940  001EDA  6EF6               	movwf	tblptrl,c
  2941  001EDC  0E10               	movlw	high __npowers_
  2942  001EDE  2010               	addwfc	?___wmul+1,w,c
  2943  001EE0  6EF7               	movwf	tblptrh,c
  2944  001EE2                     	if	0	;There are less than 3 active tblptr bytes
  2945  001EE2                     	endif
  2946  001EE2  0009               	tblrd		*+
  2947  001EE4  CFF5 F018          	movff	tablat,___ftmul@f2
  2948  001EE8  0009               	tblrd		*+
  2949  001EEA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2950  001EEE  000A               	tblrd		*-
  2951  001EF0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2952  001EF4  0E00               	movlw	0
  2953  001EF6  6E0A               	movwf	___awdiv@divisor+1,c
  2954  001EF8  0E0A               	movlw	10
  2955  001EFA  6E09               	movwf	___awdiv@divisor,c
  2956  001EFC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  2957  001F00  6A08               	clrf	___awdiv@dividend+1,c
  2958  001F02  EC19  F013         	call	___awdiv	;wreg free
  2959  001F06  0E09               	movlw	9
  2960  001F08  2407               	addwf	?___awdiv,w,c
  2961  001F0A  6E0F               	movwf	___wmul@multiplier,c
  2962  001F0C  0E00               	movlw	0
  2963  001F0E  2008               	addwfc	?___awdiv+1,w,c
  2964  001F10  6E10               	movwf	___wmul@multiplier+1,c
  2965  001F12  0E00               	movlw	0
  2966  001F14  6E12               	movwf	___wmul@multiplicand+1,c
  2967  001F16  0E03               	movlw	3
  2968  001F18  6E11               	movwf	___wmul@multiplicand,c
  2969  001F1A  EC1C  F015         	call	___wmul	;wreg free
  2970  001F1E  0E29               	movlw	low __npowers_
  2971  001F20  240F               	addwf	?___wmul,w,c
  2972  001F22  6EF6               	movwf	tblptrl,c
  2973  001F24  0E10               	movlw	high __npowers_
  2974  001F26  2010               	addwfc	?___wmul+1,w,c
  2975  001F28  6EF7               	movwf	tblptrh,c
  2976  001F2A                     	if	0	;There are less than 3 active tblptr bytes
  2977  001F2A                     	endif
  2978  001F2A  0009               	tblrd		*+
  2979  001F2C  CFF5 F015          	movff	tablat,___ftmul@f1
  2980  001F30  0009               	tblrd		*+
  2981  001F32  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2982  001F36  000A               	tblrd		*-
  2983  001F38  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2984  001F3C  ECC7  F011         	call	___ftmul	;wreg free
  2985  001F40  C015  F02A         	movff	?___ftmul,_fround$908
  2986  001F44  C016  F02B         	movff	?___ftmul+1,_fround$908+1
  2987  001F48  C017  F02C         	movff	?___ftmul+2,_fround$908+2
  2988                           
  2989                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2990  001F4C  C02A  F015         	movff	_fround$908,___ftmul@f1
  2991  001F50  C02B  F016         	movff	_fround$908+1,___ftmul@f1+1
  2992  001F54  C02C  F017         	movff	_fround$908+2,___ftmul@f1+2
  2993  001F58  0E00               	movlw	0
  2994  001F5A  6E18               	movwf	___ftmul@f2,c
  2995  001F5C  0E00               	movlw	0
  2996  001F5E  6E19               	movwf	___ftmul@f2+1,c
  2997  001F60  0E3F               	movlw	63
  2998  001F62  6E1A               	movwf	___ftmul@f2+2,c
  2999  001F64  ECC7  F011         	call	___ftmul	;wreg free
  3000  001F68  D01B               	goto	L7
  3001  001F6A  D021               	goto	l47
  3002  001F6C  D000               	goto	l1989
  3003  001F6E                     l1989:
  3004                           
  3005                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3006  001F6E  502D               	movf	fround@prec,w,c
  3007  001F70  0D03               	mullw	3
  3008  001F72  0E29               	movlw	low __npowers_
  3009  001F74  24F3               	addwf	prodl,w,c
  3010  001F76  6EF6               	movwf	tblptrl,c
  3011  001F78  0E10               	movlw	high __npowers_
  3012  001F7A  20F4               	addwfc	prodh,w,c
  3013  001F7C  6EF7               	movwf	tblptrh,c
  3014  001F7E                     	if	0	;There are less than 3 active tblptr bytes
  3015  001F7E                     	endif
  3016  001F7E  0009               	tblrd		*+
  3017  001F80  CFF5 F015          	movff	tablat,___ftmul@f1
  3018  001F84  0009               	tblrd		*+
  3019  001F86  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3020  001F8A  000A               	tblrd		*-
  3021  001F8C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3022  001F90  0E00               	movlw	0
  3023  001F92  6E18               	movwf	___ftmul@f2,c
  3024  001F94  0E00               	movlw	0
  3025  001F96  6E19               	movwf	___ftmul@f2+1,c
  3026  001F98  0E3F               	movlw	63
  3027  001F9A  6E1A               	movwf	___ftmul@f2+2,c
  3028  001F9C  ECC7  F011         	call	___ftmul	;wreg free
  3029  001FA0                     L7:
  3030  001FA0  C015  F024         	movff	?___ftmul,?_fround
  3031  001FA4  C016  F025         	movff	?___ftmul+1,?_fround+1
  3032  001FA8  C017  F026         	movff	?___ftmul+2,?_fround+2
  3033  001FAC  D000               	goto	l47
  3034  001FAE                     l47:
  3035  001FAE  0012               	return		;funcret
  3036  001FB0                     __end_of_fround:
  3037                           	opt stack 0
  3038                           tblptru	equ	0xFF8
  3039                           tblptrh	equ	0xFF7
  3040                           tblptrl	equ	0xFF6
  3041                           tablat	equ	0xFF5
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           wreg	equ	0xFE8
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function ___wmul *****************
  3052 ;; Defined at:
  3053 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  multiplier      2   14[COMRAM] unsigned int 
  3056 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  product         2   18[COMRAM] unsigned int 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  2   14[COMRAM] unsigned int 
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, status,0, prodl, prodh
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3068 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;Total ram usage:        6 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_fround
  3078 ;;		_scale
  3079 ;;		_printf
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text6
  3084  002A38                     __ptext6:
  3085                           	opt stack 0
  3086  002A38                     ___wmul:
  3087                           	opt stack 28
  3088                           
  3089                           ;incstack = 0
  3090  002A38  500F               	movf	___wmul@multiplier,w,c
  3091  002A3A  0211               	mulwf	___wmul@multiplicand,c
  3092  002A3C  CFF3 F013          	movff	prodl,___wmul@product
  3093  002A40  CFF4 F014          	movff	prodh,___wmul@product+1
  3094  002A44  500F               	movf	___wmul@multiplier,w,c
  3095  002A46  0212               	mulwf	___wmul@multiplicand+1,c
  3096  002A48  50F3               	movf	prodl,w,c
  3097  002A4A  2614               	addwf	___wmul@product+1,f,c
  3098  002A4C  5010               	movf	___wmul@multiplier+1,w,c
  3099  002A4E  0211               	mulwf	___wmul@multiplicand,c
  3100  002A50  50F3               	movf	prodl,w,c
  3101  002A52  2614               	addwf	___wmul@product+1,f,c
  3102  002A54  C013  F00F         	movff	___wmul@product,?___wmul
  3103  002A58  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3104  002A5C  D000               	goto	l173
  3105  002A5E                     l173:
  3106  002A5E  0012               	return		;funcret
  3107  002A60                     __end_of___wmul:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           wreg	equ	0xFE8
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           fsr2h	equ	0xFDA
  3119                           fsr2l	equ	0xFD9
  3120                           status	equ	0xFD8
  3121                           
  3122 ;; *************** function ___ftmul *****************
  3123 ;; Defined at:
  3124 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;  f1              3   20[COMRAM] float 
  3127 ;;  f2              3   23[COMRAM] float 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3130 ;;  sign            1   34[COMRAM] unsigned char 
  3131 ;;  cntr            1   33[COMRAM] unsigned char 
  3132 ;;  exp             1   29[COMRAM] unsigned char 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  3   20[COMRAM] float 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2, status,0, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:       15 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    1
  3149 ;; This function calls:
  3150 ;;		___ftpack
  3151 ;; This function is called by:
  3152 ;;		_fround
  3153 ;;		_scale
  3154 ;;		_printf
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text7
  3159  00238E                     __ptext7:
  3160                           	opt stack 0
  3161  00238E                     ___ftmul:
  3162                           	opt stack 27
  3163                           
  3164                           ;incstack = 0
  3165  00238E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3166  002392  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3167  002394  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3168  002396  3416               	rlcf	___ftmul@f1+1,w,c
  3169  002398  361B               	rlcf	??___ftmul& (0+255),f,c
  3170  00239A  E301               	bnc	u1781
  3171  00239C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3172  00239E                     u1781:
  3173  00239E  501B               	movf	??___ftmul,w,c
  3174  0023A0  6E1E               	movwf	___ftmul@exp,c
  3175  0023A2  501E               	movf	___ftmul@exp,w,c
  3176  0023A4  A4D8               	btfss	status,2,c
  3177  0023A6  D002               	goto	l1793
  3178  0023A8  D00E               	goto	l1795
  3179  0023AA  D06C               	goto	l602
  3180  0023AC                     l1793:
  3181  0023AC  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3182  0023B0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3183  0023B2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3184  0023B4  3419               	rlcf	___ftmul@f2+1,w,c
  3185  0023B6  361B               	rlcf	??___ftmul& (0+255),f,c
  3186  0023B8  E301               	bnc	u1801
  3187  0023BA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3188  0023BC                     u1801:
  3189  0023BC  501B               	movf	??___ftmul,w,c
  3190  0023BE  6E23               	movwf	___ftmul@sign,c
  3191  0023C0  5023               	movf	___ftmul@sign,w,c
  3192  0023C2  A4D8               	btfss	status,2,c
  3193  0023C4  D007               	goto	l1799
  3194  0023C6                     l1795:
  3195  0023C6  0E00               	movlw	0
  3196  0023C8  6E15               	movwf	?___ftmul,c
  3197  0023CA  0E00               	movlw	0
  3198  0023CC  6E16               	movwf	?___ftmul+1,c
  3199  0023CE  0E00               	movlw	0
  3200  0023D0  6E17               	movwf	?___ftmul+2,c
  3201  0023D2  D058               	goto	l602
  3202  0023D4                     l1799:
  3203  0023D4  5023               	movf	___ftmul@sign,w,c
  3204  0023D6  0F7B               	addlw	123
  3205  0023D8  261E               	addwf	___ftmul@exp,f,c
  3206  0023DA  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3207  0023DE  501A               	movf	___ftmul@f2+2,w,c
  3208  0023E0  1A23               	xorwf	___ftmul@sign,f,c
  3209  0023E2  0E80               	movlw	128
  3210  0023E4  1623               	andwf	___ftmul@sign,f,c
  3211  0023E6  8E16               	bsf	___ftmul@f1+1,7,c
  3212  0023E8  8E19               	bsf	___ftmul@f2+1,7,c
  3213  0023EA  0EFF               	movlw	255
  3214  0023EC  1618               	andwf	___ftmul@f2,f,c
  3215  0023EE  0EFF               	movlw	255
  3216  0023F0  1619               	andwf	___ftmul@f2+1,f,c
  3217  0023F2  0E00               	movlw	0
  3218  0023F4  161A               	andwf	___ftmul@f2+2,f,c
  3219  0023F6  0E00               	movlw	0
  3220  0023F8  6E1F               	movwf	___ftmul@f3_as_product,c
  3221  0023FA  0E00               	movlw	0
  3222  0023FC  6E20               	movwf	___ftmul@f3_as_product+1,c
  3223  0023FE  0E00               	movlw	0
  3224  002400  6E21               	movwf	___ftmul@f3_as_product+2,c
  3225  002402  0E07               	movlw	7
  3226  002404  6E22               	movwf	___ftmul@cntr,c
  3227  002406  D000               	goto	l1813
  3228  002408                     l1813:
  3229  002408  A015               	btfss	___ftmul@f1,0,c
  3230  00240A  D007               	goto	l1817
  3231  00240C  5018               	movf	___ftmul@f2,w,c
  3232  00240E  261F               	addwf	___ftmul@f3_as_product,f,c
  3233  002410  5019               	movf	___ftmul@f2+1,w,c
  3234  002412  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3235  002414  501A               	movf	___ftmul@f2+2,w,c
  3236  002416  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3237  002418  D000               	goto	l1817
  3238  00241A                     l1817:
  3239  00241A  90D8               	bcf	status,0,c
  3240  00241C  3217               	rrcf	___ftmul@f1+2,f,c
  3241  00241E  3216               	rrcf	___ftmul@f1+1,f,c
  3242  002420  3215               	rrcf	___ftmul@f1,f,c
  3243  002422  90D8               	bcf	status,0,c
  3244  002424  3618               	rlcf	___ftmul@f2,f,c
  3245  002426  3619               	rlcf	___ftmul@f2+1,f,c
  3246  002428  361A               	rlcf	___ftmul@f2+2,f,c
  3247  00242A  2E22               	decfsz	___ftmul@cntr,f,c
  3248  00242C  D7ED               	goto	l1813
  3249  00242E  D000               	goto	l1821
  3250  002430                     l1821:
  3251  002430  0E09               	movlw	9
  3252  002432  6E22               	movwf	___ftmul@cntr,c
  3253  002434  D000               	goto	l1823
  3254  002436                     l1823:
  3255  002436  A015               	btfss	___ftmul@f1,0,c
  3256  002438  D007               	goto	l1827
  3257  00243A  5018               	movf	___ftmul@f2,w,c
  3258  00243C  261F               	addwf	___ftmul@f3_as_product,f,c
  3259  00243E  5019               	movf	___ftmul@f2+1,w,c
  3260  002440  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3261  002442  501A               	movf	___ftmul@f2+2,w,c
  3262  002444  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3263  002446  D000               	goto	l1827
  3264  002448                     l1827:
  3265  002448  90D8               	bcf	status,0,c
  3266  00244A  3217               	rrcf	___ftmul@f1+2,f,c
  3267  00244C  3216               	rrcf	___ftmul@f1+1,f,c
  3268  00244E  3215               	rrcf	___ftmul@f1,f,c
  3269  002450  90D8               	bcf	status,0,c
  3270  002452  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3271  002454  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3272  002456  321F               	rrcf	___ftmul@f3_as_product,f,c
  3273  002458  2E22               	decfsz	___ftmul@cntr,f,c
  3274  00245A  D7ED               	goto	l1823
  3275  00245C  D000               	goto	l1831
  3276  00245E                     l1831:
  3277  00245E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3278  002462  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3279  002466  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3280  00246A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3281  00246E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3282  002472  ECB6  F012         	call	___ftpack	;wreg free
  3283  002476  C001  F015         	movff	?___ftpack,?___ftmul
  3284  00247A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3285  00247E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3286  002482  D000               	goto	l602
  3287  002484                     l602:
  3288  002484  0012               	return		;funcret
  3289  002486                     __end_of___ftmul:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           wreg	equ	0xFE8
  3298                           postinc2	equ	0xFDE
  3299                           postdec2	equ	0xFDD
  3300                           fsr2h	equ	0xFDA
  3301                           fsr2l	equ	0xFD9
  3302                           status	equ	0xFD8
  3303                           
  3304 ;; *************** function ___awmod *****************
  3305 ;; Defined at:
  3306 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  dividend        2    0[COMRAM] int 
  3309 ;;  divisor         2    2[COMRAM] int 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  sign            1    5[COMRAM] unsigned char 
  3312 ;;  counter         1    4[COMRAM] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  2    0[COMRAM] int 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;Total ram usage:        6 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_fround
  3332 ;;		_scale
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text8
  3337  0027EA                     __ptext8:
  3338                           	opt stack 0
  3339  0027EA                     ___awmod:
  3340                           	opt stack 28
  3341                           
  3342                           ;incstack = 0
  3343  0027EA  0E00               	movlw	0
  3344  0027EC  6E06               	movwf	___awmod@sign,c
  3345  0027EE  AE02               	btfss	___awmod@dividend+1,7,c
  3346  0027F0  D007               	goto	l1887
  3347  0027F2  6C01               	negf	___awmod@dividend,c
  3348  0027F4  1E02               	comf	___awmod@dividend+1,f,c
  3349  0027F6  B0D8               	btfsc	status,0,c
  3350  0027F8  2A02               	incf	___awmod@dividend+1,f,c
  3351  0027FA  0E01               	movlw	1
  3352  0027FC  6E06               	movwf	___awmod@sign,c
  3353  0027FE  D000               	goto	l1887
  3354  002800                     l1887:
  3355  002800  AE04               	btfss	___awmod@divisor+1,7,c
  3356  002802  D005               	goto	l1891
  3357  002804  6C03               	negf	___awmod@divisor,c
  3358  002806  1E04               	comf	___awmod@divisor+1,f,c
  3359  002808  B0D8               	btfsc	status,0,c
  3360  00280A  2A04               	incf	___awmod@divisor+1,f,c
  3361  00280C  D000               	goto	l1891
  3362  00280E                     l1891:
  3363  00280E  5003               	movf	___awmod@divisor,w,c
  3364  002810  1004               	iorwf	___awmod@divisor+1,w,c
  3365  002812  B4D8               	btfsc	status,2,c
  3366  002814  D01D               	goto	l1907
  3367  002816  0E01               	movlw	1
  3368  002818  6E05               	movwf	___awmod@counter,c
  3369  00281A  D005               	goto	l1897
  3370  00281C                     l1895:
  3371  00281C  90D8               	bcf	status,0,c
  3372  00281E  3603               	rlcf	___awmod@divisor,f,c
  3373  002820  3604               	rlcf	___awmod@divisor+1,f,c
  3374  002822  2A05               	incf	___awmod@counter,f,c
  3375  002824  D000               	goto	l1897
  3376  002826                     l1897:
  3377  002826  BE04               	btfsc	___awmod@divisor+1,7,c
  3378  002828  D002               	goto	l1899
  3379  00282A  D7F8               	goto	l1895
  3380  00282C  D000               	goto	l1899
  3381  00282E                     l1899:
  3382  00282E  5003               	movf	___awmod@divisor,w,c
  3383  002830  5C01               	subwf	___awmod@dividend,w,c
  3384  002832  5004               	movf	___awmod@divisor+1,w,c
  3385  002834  5802               	subwfb	___awmod@dividend+1,w,c
  3386  002836  A0D8               	btfss	status,0,c
  3387  002838  D005               	goto	l1903
  3388  00283A  5003               	movf	___awmod@divisor,w,c
  3389  00283C  5E01               	subwf	___awmod@dividend,f,c
  3390  00283E  5004               	movf	___awmod@divisor+1,w,c
  3391  002840  5A02               	subwfb	___awmod@dividend+1,f,c
  3392  002842  D000               	goto	l1903
  3393  002844                     l1903:
  3394  002844  90D8               	bcf	status,0,c
  3395  002846  3204               	rrcf	___awmod@divisor+1,f,c
  3396  002848  3203               	rrcf	___awmod@divisor,f,c
  3397  00284A  2E05               	decfsz	___awmod@counter,f,c
  3398  00284C  D7F0               	goto	l1899
  3399  00284E  D000               	goto	l1907
  3400  002850                     l1907:
  3401  002850  5006               	movf	___awmod@sign,w,c
  3402  002852  B4D8               	btfsc	status,2,c
  3403  002854  D005               	goto	l1911
  3404  002856  6C01               	negf	___awmod@dividend,c
  3405  002858  1E02               	comf	___awmod@dividend+1,f,c
  3406  00285A  B0D8               	btfsc	status,0,c
  3407  00285C  2A02               	incf	___awmod@dividend+1,f,c
  3408  00285E  D000               	goto	l1911
  3409  002860                     l1911:
  3410  002860  C001  F001         	movff	___awmod@dividend,?___awmod
  3411  002864  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3412  002868  D000               	goto	l379
  3413  00286A                     l379:
  3414  00286A  0012               	return		;funcret
  3415  00286C                     __end_of___awmod:
  3416                           	opt stack 0
  3417                           tblptru	equ	0xFF8
  3418                           tblptrh	equ	0xFF7
  3419                           tblptrl	equ	0xFF6
  3420                           tablat	equ	0xFF5
  3421                           prodh	equ	0xFF4
  3422                           prodl	equ	0xFF3
  3423                           wreg	equ	0xFE8
  3424                           postinc2	equ	0xFDE
  3425                           postdec2	equ	0xFDD
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function ___awdiv *****************
  3431 ;; Defined at:
  3432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  dividend        2    6[COMRAM] int 
  3435 ;;  divisor         2    8[COMRAM] int 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  quotient        2   12[COMRAM] int 
  3438 ;;  sign            1   11[COMRAM] unsigned char 
  3439 ;;  counter         1   10[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  2    6[COMRAM] int 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;Total ram usage:        8 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_fround
  3459 ;;		_scale
  3460 ;;		_printf
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text9
  3465  002632                     __ptext9:
  3466                           	opt stack 0
  3467  002632                     ___awdiv:
  3468                           	opt stack 28
  3469                           
  3470                           ;incstack = 0
  3471  002632  0E00               	movlw	0
  3472  002634  6E0C               	movwf	___awdiv@sign,c
  3473  002636  AE0A               	btfss	___awdiv@divisor+1,7,c
  3474  002638  D007               	goto	l1843
  3475  00263A  6C09               	negf	___awdiv@divisor,c
  3476  00263C  1E0A               	comf	___awdiv@divisor+1,f,c
  3477  00263E  B0D8               	btfsc	status,0,c
  3478  002640  2A0A               	incf	___awdiv@divisor+1,f,c
  3479  002642  0E01               	movlw	1
  3480  002644  6E0C               	movwf	___awdiv@sign,c
  3481  002646  D000               	goto	l1843
  3482  002648                     l1843:
  3483  002648  AE08               	btfss	___awdiv@dividend+1,7,c
  3484  00264A  D007               	goto	l1849
  3485  00264C  6C07               	negf	___awdiv@dividend,c
  3486  00264E  1E08               	comf	___awdiv@dividend+1,f,c
  3487  002650  B0D8               	btfsc	status,0,c
  3488  002652  2A08               	incf	___awdiv@dividend+1,f,c
  3489  002654  0E01               	movlw	1
  3490  002656  1A0C               	xorwf	___awdiv@sign,f,c
  3491  002658  D000               	goto	l1849
  3492  00265A                     l1849:
  3493  00265A  0E00               	movlw	0
  3494  00265C  6E0E               	movwf	___awdiv@quotient+1,c
  3495  00265E  0E00               	movlw	0
  3496  002660  6E0D               	movwf	___awdiv@quotient,c
  3497  002662  5009               	movf	___awdiv@divisor,w,c
  3498  002664  100A               	iorwf	___awdiv@divisor+1,w,c
  3499  002666  B4D8               	btfsc	status,2,c
  3500  002668  D021               	goto	l1871
  3501  00266A  0E01               	movlw	1
  3502  00266C  6E0B               	movwf	___awdiv@counter,c
  3503  00266E  D005               	goto	l1857
  3504  002670                     l1855:
  3505  002670  90D8               	bcf	status,0,c
  3506  002672  3609               	rlcf	___awdiv@divisor,f,c
  3507  002674  360A               	rlcf	___awdiv@divisor+1,f,c
  3508  002676  2A0B               	incf	___awdiv@counter,f,c
  3509  002678  D000               	goto	l1857
  3510  00267A                     l1857:
  3511  00267A  BE0A               	btfsc	___awdiv@divisor+1,7,c
  3512  00267C  D002               	goto	l1859
  3513  00267E  D7F8               	goto	l1855
  3514  002680  D000               	goto	l1859
  3515  002682                     l1859:
  3516  002682  90D8               	bcf	status,0,c
  3517  002684  360D               	rlcf	___awdiv@quotient,f,c
  3518  002686  360E               	rlcf	___awdiv@quotient+1,f,c
  3519  002688  5009               	movf	___awdiv@divisor,w,c
  3520  00268A  5C07               	subwf	___awdiv@dividend,w,c
  3521  00268C  500A               	movf	___awdiv@divisor+1,w,c
  3522  00268E  5808               	subwfb	___awdiv@dividend+1,w,c
  3523  002690  A0D8               	btfss	status,0,c
  3524  002692  D006               	goto	l1867
  3525  002694  5009               	movf	___awdiv@divisor,w,c
  3526  002696  5E07               	subwf	___awdiv@dividend,f,c
  3527  002698  500A               	movf	___awdiv@divisor+1,w,c
  3528  00269A  5A08               	subwfb	___awdiv@dividend+1,f,c
  3529  00269C  800D               	bsf	___awdiv@quotient,0,c
  3530  00269E  D000               	goto	l1867
  3531  0026A0                     l1867:
  3532  0026A0  90D8               	bcf	status,0,c
  3533  0026A2  320A               	rrcf	___awdiv@divisor+1,f,c
  3534  0026A4  3209               	rrcf	___awdiv@divisor,f,c
  3535  0026A6  2E0B               	decfsz	___awdiv@counter,f,c
  3536  0026A8  D7EC               	goto	l1859
  3537  0026AA  D000               	goto	l1871
  3538  0026AC                     l1871:
  3539  0026AC  500C               	movf	___awdiv@sign,w,c
  3540  0026AE  B4D8               	btfsc	status,2,c
  3541  0026B0  D005               	goto	l1875
  3542  0026B2  6C0D               	negf	___awdiv@quotient,c
  3543  0026B4  1E0E               	comf	___awdiv@quotient+1,f,c
  3544  0026B6  B0D8               	btfsc	status,0,c
  3545  0026B8  2A0E               	incf	___awdiv@quotient+1,f,c
  3546  0026BA  D000               	goto	l1875
  3547  0026BC                     l1875:
  3548  0026BC  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3549  0026C0  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3550  0026C4  D000               	goto	l366
  3551  0026C6                     l366:
  3552  0026C6  0012               	return		;funcret
  3553  0026C8                     __end_of___awdiv:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           wreg	equ	0xFE8
  3562                           postinc2	equ	0xFDE
  3563                           postdec2	equ	0xFDD
  3564                           fsr2h	equ	0xFDA
  3565                           fsr2l	equ	0xFD9
  3566                           status	equ	0xFD8
  3567                           
  3568 ;; *************** function __tdiv_to_l_ *****************
  3569 ;; Defined at:
  3570 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  f1              3    0[COMRAM] float 
  3573 ;;  f2              3    3[COMRAM] float 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  quot            4    9[COMRAM] unsigned long 
  3576 ;;  exp1            1   14[COMRAM] unsigned char 
  3577 ;;  cntr            1   13[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  4    0[COMRAM] unsigned long 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3587 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;Total ram usage:       15 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_printf
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text10
  3601  002174                     __ptext10:
  3602                           	opt stack 0
  3603  002174                     __tdiv_to_l_:
  3604                           	opt stack 29
  3605                           
  3606                           ;incstack = 0
  3607  002174  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3608  002178  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3609  00217A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3610  00217C  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3611  00217E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3612  002180  E301               	bnc	u2161
  3613  002182  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3614  002184                     u2161:
  3615  002184  5007               	movf	??__tdiv_to_l_,w,c
  3616  002186  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3617  002188  500F               	movf	__tdiv_to_l_@exp1,w,c
  3618  00218A  A4D8               	btfss	status,2,c
  3619  00218C  D002               	goto	l2049
  3620  00218E  D05D               	goto	l2091
  3621  002190  D078               	goto	l578
  3622  002192                     l2049:
  3623  002192  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3624  002196  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3625  002198  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3626  00219A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3627  00219C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3628  00219E  E301               	bnc	u2181
  3629  0021A0  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3630  0021A2                     u2181:
  3631  0021A2  5007               	movf	??__tdiv_to_l_,w,c
  3632  0021A4  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3633  0021A6  500E               	movf	__tdiv_to_l_@cntr,w,c
  3634  0021A8  A4D8               	btfss	status,2,c
  3635  0021AA  D002               	goto	l2055
  3636  0021AC  D04E               	goto	l2091
  3637  0021AE  D069               	goto	l578
  3638  0021B0                     l2055:
  3639  0021B0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3640  0021B2  0EFF               	movlw	255
  3641  0021B4  1601               	andwf	__tdiv_to_l_@f1,f,c
  3642  0021B6  0EFF               	movlw	255
  3643  0021B8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3644  0021BA  0E00               	movlw	0
  3645  0021BC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3646  0021BE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3647  0021C0  0EFF               	movlw	255
  3648  0021C2  1604               	andwf	__tdiv_to_l_@f2,f,c
  3649  0021C4  0EFF               	movlw	255
  3650  0021C6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3651  0021C8  0E00               	movlw	0
  3652  0021CA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3653  0021CC  0E00               	movlw	0
  3654  0021CE  6E0A               	movwf	__tdiv_to_l_@quot,c
  3655  0021D0  0E00               	movlw	0
  3656  0021D2  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3657  0021D4  0E00               	movlw	0
  3658  0021D6  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3659  0021D8  0E00               	movlw	0
  3660  0021DA  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3661  0021DC  0E7F               	movlw	127
  3662  0021DE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3663  0021E0  500E               	movf	__tdiv_to_l_@cntr,w,c
  3664  0021E2  0F98               	addlw	152
  3665  0021E4  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3666  0021E6  0E18               	movlw	24
  3667  0021E8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3668  0021EA                     l580:
  3669  0021EA  90D8               	bcf	status,0,c
  3670  0021EC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3671  0021EE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3672  0021F0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3673  0021F2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3674  0021F4  5004               	movf	__tdiv_to_l_@f2,w,c
  3675  0021F6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3676  0021F8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3677  0021FA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3678  0021FC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3679  0021FE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3680  002200  A0D8               	btfss	status,0,c
  3681  002202  D007               	goto	l581
  3682  002204  5004               	movf	__tdiv_to_l_@f2,w,c
  3683  002206  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3684  002208  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3685  00220A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3686  00220C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3687  00220E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3688  002210  800A               	bsf	__tdiv_to_l_@quot,0,c
  3689  002212                     l581:
  3690  002212  90D8               	bcf	status,0,c
  3691  002214  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3692  002216  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3693  002218  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3694  00221A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3695  00221C  D7E6               	goto	l580
  3696  00221E  D000               	goto	l2077
  3697  002220                     l2077:
  3698  002220  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3699  002222  D010               	goto	l2089
  3700  002224  500F               	movf	__tdiv_to_l_@exp1,w,c
  3701  002226  0A80               	xorlw	128
  3702  002228  0F97               	addlw	151
  3703  00222A  B0D8               	btfsc	status,0,c
  3704  00222C  D003               	goto	l2085
  3705  00222E  D00D               	goto	l2091
  3706  002230  D028               	goto	l578
  3707  002232  D000               	goto	l2085
  3708  002234                     l2085:
  3709  002234  90D8               	bcf	status,0,c
  3710  002236  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3711  002238  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3712  00223A  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3713  00223C  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3714  00223E  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3715  002240  D7F9               	goto	l2085
  3716  002242  D017               	goto	l587
  3717  002244                     l2089:
  3718  002244  0E17               	movlw	23
  3719  002246  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3720  002248  D011               	goto	l2097
  3721  00224A                     l2091:
  3722  00224A  0E00               	movlw	0
  3723  00224C  6E01               	movwf	?__tdiv_to_l_,c
  3724  00224E  0E00               	movlw	0
  3725  002250  6E02               	movwf	?__tdiv_to_l_+1,c
  3726  002252  0E00               	movlw	0
  3727  002254  6E03               	movwf	?__tdiv_to_l_+2,c
  3728  002256  0E00               	movlw	0
  3729  002258  6E04               	movwf	?__tdiv_to_l_+3,c
  3730  00225A  D013               	goto	l578
  3731  00225C  D007               	goto	l2097
  3732  00225E                     l2095:
  3733  00225E  90D8               	bcf	status,0,c
  3734  002260  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3735  002262  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3736  002264  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3737  002266  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3738  002268  060F               	decf	__tdiv_to_l_@exp1,f,c
  3739  00226A  D000               	goto	l2097
  3740  00226C                     l2097:
  3741  00226C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3742  00226E  A4D8               	btfss	status,2,c
  3743  002270  D7F6               	goto	l2095
  3744  002272                     l587:
  3745  002272  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3746  002276  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3747  00227A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3748  00227E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3749  002282                     l578:
  3750  002282  0012               	return		;funcret
  3751  002284                     __end_of__tdiv_to_l_:
  3752                           	opt stack 0
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           wreg	equ	0xFE8
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function __div_to_l_ *****************
  3767 ;; Defined at:
  3768 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  f1              3    0[COMRAM] unsigned long 
  3771 ;;  f2              3    3[COMRAM] unsigned long 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  quot            4    6[COMRAM] unsigned long 
  3774 ;;  exp1            1   11[COMRAM] unsigned char 
  3775 ;;  cntr            1   10[COMRAM] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  4    0[COMRAM] unsigned long 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3785 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3788 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3789 ;;Total ram usage:       12 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; This function calls:
  3792 ;;		Nothing
  3793 ;; This function is called by:
  3794 ;;		_printf
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text11
  3799  002284                     __ptext11:
  3800                           	opt stack 0
  3801  002284                     __div_to_l_:
  3802                           	opt stack 29
  3803                           
  3804                           ;incstack = 0
  3805  002284  3403               	rlcf	__div_to_l_@f1+2,w,c
  3806  002286  3404               	rlcf	__div_to_l_@f1+3,w,c
  3807  002288  6E0C               	movwf	__div_to_l_@exp1,c
  3808  00228A  500C               	movf	__div_to_l_@exp1,w,c
  3809  00228C  A4D8               	btfss	status,2,c
  3810  00228E  D002               	goto	l2105
  3811  002290  D061               	goto	l2151
  3812  002292  D07C               	goto	l457
  3813  002294                     l2105:
  3814  002294  3406               	rlcf	__div_to_l_@f2+2,w,c
  3815  002296  3407               	rlcf	__div_to_l_@f2+3,w,c
  3816  002298  6E0B               	movwf	__div_to_l_@cntr,c
  3817  00229A  500B               	movf	__div_to_l_@cntr,w,c
  3818  00229C  A4D8               	btfss	status,2,c
  3819  00229E  D002               	goto	l2111
  3820  0022A0  D059               	goto	l2151
  3821  0022A2  D074               	goto	l457
  3822  0022A4                     l2111:
  3823  0022A4  8E03               	bsf	__div_to_l_@f1+2,7,c
  3824  0022A6  0EFF               	movlw	255
  3825  0022A8  1601               	andwf	__div_to_l_@f1,f,c
  3826  0022AA  0EFF               	movlw	255
  3827  0022AC  1602               	andwf	__div_to_l_@f1+1,f,c
  3828  0022AE  0EFF               	movlw	255
  3829  0022B0  1603               	andwf	__div_to_l_@f1+2,f,c
  3830  0022B2  0E00               	movlw	0
  3831  0022B4  1604               	andwf	__div_to_l_@f1+3,f,c
  3832  0022B6  8E06               	bsf	__div_to_l_@f2+2,7,c
  3833  0022B8  0EFF               	movlw	255
  3834  0022BA  1604               	andwf	__div_to_l_@f2,f,c
  3835  0022BC  0EFF               	movlw	255
  3836  0022BE  1605               	andwf	__div_to_l_@f2+1,f,c
  3837  0022C0  0EFF               	movlw	255
  3838  0022C2  1606               	andwf	__div_to_l_@f2+2,f,c
  3839  0022C4  0E00               	movlw	0
  3840  0022C6  1607               	andwf	__div_to_l_@f2+3,f,c
  3841  0022C8  0E00               	movlw	0
  3842  0022CA  6E07               	movwf	__div_to_l_@quot,c
  3843  0022CC  0E00               	movlw	0
  3844  0022CE  6E08               	movwf	__div_to_l_@quot+1,c
  3845  0022D0  0E00               	movlw	0
  3846  0022D2  6E09               	movwf	__div_to_l_@quot+2,c
  3847  0022D4  0E00               	movlw	0
  3848  0022D6  6E0A               	movwf	__div_to_l_@quot+3,c
  3849  0022D8  0E7F               	movlw	127
  3850  0022DA  5E0C               	subwf	__div_to_l_@exp1,f,c
  3851  0022DC  500B               	movf	__div_to_l_@cntr,w,c
  3852  0022DE  0FA0               	addlw	160
  3853  0022E0  5E0C               	subwf	__div_to_l_@exp1,f,c
  3854  0022E2  0E20               	movlw	32
  3855  0022E4  6E0B               	movwf	__div_to_l_@cntr,c
  3856  0022E6  D000               	goto	l2125
  3857  0022E8                     l2125:
  3858  0022E8  90D8               	bcf	status,0,c
  3859  0022EA  3607               	rlcf	__div_to_l_@quot,f,c
  3860  0022EC  3608               	rlcf	__div_to_l_@quot+1,f,c
  3861  0022EE  3609               	rlcf	__div_to_l_@quot+2,f,c
  3862  0022F0  360A               	rlcf	__div_to_l_@quot+3,f,c
  3863  0022F2  5004               	movf	__div_to_l_@f2,w,c
  3864  0022F4  5C01               	subwf	__div_to_l_@f1,w,c
  3865  0022F6  5005               	movf	__div_to_l_@f2+1,w,c
  3866  0022F8  5802               	subwfb	__div_to_l_@f1+1,w,c
  3867  0022FA  5006               	movf	__div_to_l_@f2+2,w,c
  3868  0022FC  5803               	subwfb	__div_to_l_@f1+2,w,c
  3869  0022FE  5007               	movf	__div_to_l_@f2+3,w,c
  3870  002300  5804               	subwfb	__div_to_l_@f1+3,w,c
  3871  002302  A0D8               	btfss	status,0,c
  3872  002304  D00A               	goto	l2133
  3873  002306  5004               	movf	__div_to_l_@f2,w,c
  3874  002308  5E01               	subwf	__div_to_l_@f1,f,c
  3875  00230A  5005               	movf	__div_to_l_@f2+1,w,c
  3876  00230C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3877  00230E  5006               	movf	__div_to_l_@f2+2,w,c
  3878  002310  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3879  002312  5007               	movf	__div_to_l_@f2+3,w,c
  3880  002314  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3881  002316  8007               	bsf	__div_to_l_@quot,0,c
  3882  002318  D000               	goto	l2133
  3883  00231A                     l2133:
  3884  00231A  90D8               	bcf	status,0,c
  3885  00231C  3601               	rlcf	__div_to_l_@f1,f,c
  3886  00231E  3602               	rlcf	__div_to_l_@f1+1,f,c
  3887  002320  3603               	rlcf	__div_to_l_@f1+2,f,c
  3888  002322  3604               	rlcf	__div_to_l_@f1+3,f,c
  3889  002324  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3890  002326  D7E0               	goto	l2125
  3891  002328  D000               	goto	l2137
  3892  00232A                     l2137:
  3893  00232A  AE0C               	btfss	__div_to_l_@exp1,7,c
  3894  00232C  D010               	goto	l2149
  3895  00232E  500C               	movf	__div_to_l_@exp1,w,c
  3896  002330  0A80               	xorlw	128
  3897  002332  0F9F               	addlw	159
  3898  002334  B0D8               	btfsc	status,0,c
  3899  002336  D003               	goto	l2145
  3900  002338  D00D               	goto	l2151
  3901  00233A  D028               	goto	l457
  3902  00233C  D000               	goto	l2145
  3903  00233E                     l2145:
  3904  00233E  90D8               	bcf	status,0,c
  3905  002340  320A               	rrcf	__div_to_l_@quot+3,f,c
  3906  002342  3209               	rrcf	__div_to_l_@quot+2,f,c
  3907  002344  3208               	rrcf	__div_to_l_@quot+1,f,c
  3908  002346  3207               	rrcf	__div_to_l_@quot,f,c
  3909  002348  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3910  00234A  D7F9               	goto	l2145
  3911  00234C  D017               	goto	l466
  3912  00234E                     l2149:
  3913  00234E  0E1F               	movlw	31
  3914  002350  640C               	cpfsgt	__div_to_l_@exp1,c
  3915  002352  D011               	goto	l2157
  3916  002354                     l2151:
  3917  002354  0E00               	movlw	0
  3918  002356  6E01               	movwf	?__div_to_l_,c
  3919  002358  0E00               	movlw	0
  3920  00235A  6E02               	movwf	?__div_to_l_+1,c
  3921  00235C  0E00               	movlw	0
  3922  00235E  6E03               	movwf	?__div_to_l_+2,c
  3923  002360  0E00               	movlw	0
  3924  002362  6E04               	movwf	?__div_to_l_+3,c
  3925  002364  D013               	goto	l457
  3926  002366  D007               	goto	l2157
  3927  002368                     l2155:
  3928  002368  90D8               	bcf	status,0,c
  3929  00236A  3607               	rlcf	__div_to_l_@quot,f,c
  3930  00236C  3608               	rlcf	__div_to_l_@quot+1,f,c
  3931  00236E  3609               	rlcf	__div_to_l_@quot+2,f,c
  3932  002370  360A               	rlcf	__div_to_l_@quot+3,f,c
  3933  002372  060C               	decf	__div_to_l_@exp1,f,c
  3934  002374  D000               	goto	l2157
  3935  002376                     l2157:
  3936  002376  500C               	movf	__div_to_l_@exp1,w,c
  3937  002378  A4D8               	btfss	status,2,c
  3938  00237A  D7F6               	goto	l2155
  3939  00237C                     l466:
  3940  00237C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3941  002380  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3942  002384  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3943  002388  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3944  00238C                     l457:
  3945  00238C  0012               	return		;funcret
  3946  00238E                     __end_of__div_to_l_:
  3947                           	opt stack 0
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           wreg	equ	0xFE8
  3955                           postinc2	equ	0xFDE
  3956                           postdec2	equ	0xFDD
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function ___lltoft *****************
  3962 ;; Defined at:
  3963 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  c               4    8[COMRAM] unsigned long 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  exp             1   16[COMRAM] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  3    8[COMRAM] float 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        9 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    1
  3984 ;; This function calls:
  3985 ;;		___ftpack
  3986 ;; This function is called by:
  3987 ;;		_printf
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text12
  3992  00294C                     __ptext12:
  3993                           	opt stack 0
  3994  00294C                     ___lltoft:
  3995                           	opt stack 28
  3996                           
  3997                           ;incstack = 0
  3998  00294C  0E8E               	movlw	142
  3999  00294E  6E11               	movwf	___lltoft@exp,c
  4000  002950  D007               	goto	l2277
  4001  002952                     l2275:
  4002  002952  90D8               	bcf	status,0,c
  4003  002954  320C               	rrcf	___lltoft@c+3,f,c
  4004  002956  320B               	rrcf	___lltoft@c+2,f,c
  4005  002958  320A               	rrcf	___lltoft@c+1,f,c
  4006  00295A  3209               	rrcf	___lltoft@c,f,c
  4007  00295C  2A11               	incf	___lltoft@exp,f,c
  4008  00295E  D000               	goto	l2277
  4009  002960                     l2277:
  4010  002960  0E00               	movlw	0
  4011  002962  1409               	andwf	___lltoft@c,w,c
  4012  002964  6E0D               	movwf	??___lltoft& (0+255),c
  4013  002966  0E00               	movlw	0
  4014  002968  140A               	andwf	___lltoft@c+1,w,c
  4015  00296A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4016  00296C  0E00               	movlw	0
  4017  00296E  140B               	andwf	___lltoft@c+2,w,c
  4018  002970  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4019  002972  0EFF               	movlw	255
  4020  002974  140C               	andwf	___lltoft@c+3,w,c
  4021  002976  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4022  002978  500D               	movf	??___lltoft,w,c
  4023  00297A  100E               	iorwf	??___lltoft+1,w,c
  4024  00297C  100F               	iorwf	??___lltoft+2,w,c
  4025  00297E  1010               	iorwf	??___lltoft+3,w,c
  4026  002980  A4D8               	btfss	status,2,c
  4027  002982  D7E7               	goto	l2275
  4028  002984  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4029  002988  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4030  00298C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4031  002990  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4032  002994  0E00               	movlw	0
  4033  002996  6E05               	movwf	___ftpack@sign,c
  4034  002998  ECB6  F012         	call	___ftpack	;wreg free
  4035  00299C  C001  F009         	movff	?___ftpack,?___lltoft
  4036  0029A0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4037  0029A4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4038  0029A8  D000               	goto	l697
  4039  0029AA                     l697:
  4040  0029AA  0012               	return		;funcret
  4041  0029AC                     __end_of___lltoft:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           wreg	equ	0xFE8
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function ___llmod *****************
  4057 ;; Defined at:
  4058 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  dividend        4    0[COMRAM] unsigned long 
  4061 ;;  divisor         4    4[COMRAM] unsigned long 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  counter         1    8[COMRAM] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  4    0[COMRAM] unsigned long 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4073 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;Total ram usage:        9 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_printf
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text13
  4087  00286C                     __ptext13:
  4088                           	opt stack 0
  4089  00286C                     ___llmod:
  4090                           	opt stack 29
  4091                           
  4092                           ;incstack = 0
  4093  00286C  5005               	movf	___llmod@divisor,w,c
  4094  00286E  1006               	iorwf	___llmod@divisor+1,w,c
  4095  002870  1007               	iorwf	___llmod@divisor+2,w,c
  4096  002872  1008               	iorwf	___llmod@divisor+3,w,c
  4097  002874  B4D8               	btfsc	status,2,c
  4098  002876  D029               	goto	l677
  4099  002878  0E01               	movlw	1
  4100  00287A  6E09               	movwf	___llmod@counter,c
  4101  00287C  D007               	goto	l2263
  4102  00287E                     l2261:
  4103  00287E  90D8               	bcf	status,0,c
  4104  002880  3605               	rlcf	___llmod@divisor,f,c
  4105  002882  3606               	rlcf	___llmod@divisor+1,f,c
  4106  002884  3607               	rlcf	___llmod@divisor+2,f,c
  4107  002886  3608               	rlcf	___llmod@divisor+3,f,c
  4108  002888  2A09               	incf	___llmod@counter,f,c
  4109  00288A  D000               	goto	l2263
  4110  00288C                     l2263:
  4111  00288C  BE08               	btfsc	___llmod@divisor+3,7,c
  4112  00288E  D002               	goto	l2265
  4113  002890  D7F6               	goto	l2261
  4114  002892  D000               	goto	l2265
  4115  002894                     l2265:
  4116  002894  5005               	movf	___llmod@divisor,w,c
  4117  002896  5C01               	subwf	___llmod@dividend,w,c
  4118  002898  5006               	movf	___llmod@divisor+1,w,c
  4119  00289A  5802               	subwfb	___llmod@dividend+1,w,c
  4120  00289C  5007               	movf	___llmod@divisor+2,w,c
  4121  00289E  5803               	subwfb	___llmod@dividend+2,w,c
  4122  0028A0  5008               	movf	___llmod@divisor+3,w,c
  4123  0028A2  5804               	subwfb	___llmod@dividend+3,w,c
  4124  0028A4  A0D8               	btfss	status,0,c
  4125  0028A6  D009               	goto	l2269
  4126  0028A8  5005               	movf	___llmod@divisor,w,c
  4127  0028AA  5E01               	subwf	___llmod@dividend,f,c
  4128  0028AC  5006               	movf	___llmod@divisor+1,w,c
  4129  0028AE  5A02               	subwfb	___llmod@dividend+1,f,c
  4130  0028B0  5007               	movf	___llmod@divisor+2,w,c
  4131  0028B2  5A03               	subwfb	___llmod@dividend+2,f,c
  4132  0028B4  5008               	movf	___llmod@divisor+3,w,c
  4133  0028B6  5A04               	subwfb	___llmod@dividend+3,f,c
  4134  0028B8  D000               	goto	l2269
  4135  0028BA                     l2269:
  4136  0028BA  90D8               	bcf	status,0,c
  4137  0028BC  3208               	rrcf	___llmod@divisor+3,f,c
  4138  0028BE  3207               	rrcf	___llmod@divisor+2,f,c
  4139  0028C0  3206               	rrcf	___llmod@divisor+1,f,c
  4140  0028C2  3205               	rrcf	___llmod@divisor,f,c
  4141  0028C4  2E09               	decfsz	___llmod@counter,f,c
  4142  0028C6  D7E6               	goto	l2265
  4143  0028C8  D000               	goto	l677
  4144  0028CA                     l677:
  4145  0028CA  C001  F001         	movff	___llmod@dividend,?___llmod
  4146  0028CE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4147  0028D2  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4148  0028D6  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4149  0028DA  0012               	return		;funcret
  4150  0028DC                     __end_of___llmod:
  4151                           	opt stack 0
  4152                           tblptru	equ	0xFF8
  4153                           tblptrh	equ	0xFF7
  4154                           tblptrl	equ	0xFF6
  4155                           tablat	equ	0xFF5
  4156                           prodh	equ	0xFF4
  4157                           prodl	equ	0xFF3
  4158                           wreg	equ	0xFE8
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function ___lldiv *****************
  4166 ;; Defined at:
  4167 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  dividend        4    0[COMRAM] unsigned long 
  4170 ;;  divisor         4    4[COMRAM] unsigned long 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  quotient        4    8[COMRAM] unsigned long 
  4173 ;;  counter         1   12[COMRAM] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  4    0[COMRAM] unsigned long 
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, status,0
  4178 ;; Tracked objects:
  4179 ;;		On entry : 0/0
  4180 ;;		On exit  : 0/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4183 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;Total ram usage:       13 bytes
  4188 ;; Hardware stack levels used:    1
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_printf
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text14
  4197  00275E                     __ptext14:
  4198                           	opt stack 0
  4199  00275E                     ___lldiv:
  4200                           	opt stack 29
  4201                           
  4202                           ;incstack = 0
  4203  00275E  0E00               	movlw	0
  4204  002760  6E09               	movwf	___lldiv@quotient,c
  4205  002762  0E00               	movlw	0
  4206  002764  6E0A               	movwf	___lldiv@quotient+1,c
  4207  002766  0E00               	movlw	0
  4208  002768  6E0B               	movwf	___lldiv@quotient+2,c
  4209  00276A  0E00               	movlw	0
  4210  00276C  6E0C               	movwf	___lldiv@quotient+3,c
  4211  00276E  5005               	movf	___lldiv@divisor,w,c
  4212  002770  1006               	iorwf	___lldiv@divisor+1,w,c
  4213  002772  1007               	iorwf	___lldiv@divisor+2,w,c
  4214  002774  1008               	iorwf	___lldiv@divisor+3,w,c
  4215  002776  B4D8               	btfsc	status,2,c
  4216  002778  D02F               	goto	l667
  4217  00277A  0E01               	movlw	1
  4218  00277C  6E0D               	movwf	___lldiv@counter,c
  4219  00277E  D007               	goto	l2243
  4220  002780                     l2241:
  4221  002780  90D8               	bcf	status,0,c
  4222  002782  3605               	rlcf	___lldiv@divisor,f,c
  4223  002784  3606               	rlcf	___lldiv@divisor+1,f,c
  4224  002786  3607               	rlcf	___lldiv@divisor+2,f,c
  4225  002788  3608               	rlcf	___lldiv@divisor+3,f,c
  4226  00278A  2A0D               	incf	___lldiv@counter,f,c
  4227  00278C  D000               	goto	l2243
  4228  00278E                     l2243:
  4229  00278E  BE08               	btfsc	___lldiv@divisor+3,7,c
  4230  002790  D002               	goto	l2245
  4231  002792  D7F6               	goto	l2241
  4232  002794  D000               	goto	l2245
  4233  002796                     l2245:
  4234  002796  90D8               	bcf	status,0,c
  4235  002798  3609               	rlcf	___lldiv@quotient,f,c
  4236  00279A  360A               	rlcf	___lldiv@quotient+1,f,c
  4237  00279C  360B               	rlcf	___lldiv@quotient+2,f,c
  4238  00279E  360C               	rlcf	___lldiv@quotient+3,f,c
  4239  0027A0  5005               	movf	___lldiv@divisor,w,c
  4240  0027A2  5C01               	subwf	___lldiv@dividend,w,c
  4241  0027A4  5006               	movf	___lldiv@divisor+1,w,c
  4242  0027A6  5802               	subwfb	___lldiv@dividend+1,w,c
  4243  0027A8  5007               	movf	___lldiv@divisor+2,w,c
  4244  0027AA  5803               	subwfb	___lldiv@dividend+2,w,c
  4245  0027AC  5008               	movf	___lldiv@divisor+3,w,c
  4246  0027AE  5804               	subwfb	___lldiv@dividend+3,w,c
  4247  0027B0  A0D8               	btfss	status,0,c
  4248  0027B2  D00A               	goto	l2253
  4249  0027B4  5005               	movf	___lldiv@divisor,w,c
  4250  0027B6  5E01               	subwf	___lldiv@dividend,f,c
  4251  0027B8  5006               	movf	___lldiv@divisor+1,w,c
  4252  0027BA  5A02               	subwfb	___lldiv@dividend+1,f,c
  4253  0027BC  5007               	movf	___lldiv@divisor+2,w,c
  4254  0027BE  5A03               	subwfb	___lldiv@dividend+2,f,c
  4255  0027C0  5008               	movf	___lldiv@divisor+3,w,c
  4256  0027C2  5A04               	subwfb	___lldiv@dividend+3,f,c
  4257  0027C4  8009               	bsf	___lldiv@quotient,0,c
  4258  0027C6  D000               	goto	l2253
  4259  0027C8                     l2253:
  4260  0027C8  90D8               	bcf	status,0,c
  4261  0027CA  3208               	rrcf	___lldiv@divisor+3,f,c
  4262  0027CC  3207               	rrcf	___lldiv@divisor+2,f,c
  4263  0027CE  3206               	rrcf	___lldiv@divisor+1,f,c
  4264  0027D0  3205               	rrcf	___lldiv@divisor,f,c
  4265  0027D2  2E0D               	decfsz	___lldiv@counter,f,c
  4266  0027D4  D7E0               	goto	l2245
  4267  0027D6  D000               	goto	l667
  4268  0027D8                     l667:
  4269  0027D8  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4270  0027DC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4271  0027E0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4272  0027E4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4273  0027E8  0012               	return		;funcret
  4274  0027EA                     __end_of___lldiv:
  4275                           	opt stack 0
  4276                           tblptru	equ	0xFF8
  4277                           tblptrh	equ	0xFF7
  4278                           tblptrl	equ	0xFF6
  4279                           tablat	equ	0xFF5
  4280                           prodh	equ	0xFF4
  4281                           prodl	equ	0xFF3
  4282                           wreg	equ	0xFE8
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           fsr2h	equ	0xFDA
  4286                           fsr2l	equ	0xFD9
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function ___fttol *****************
  4290 ;; Defined at:
  4291 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  f1              3   42[COMRAM] float 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  lval            4   52[COMRAM] unsigned long 
  4296 ;;  exp1            1   56[COMRAM] unsigned char 
  4297 ;;  sign1           1   51[COMRAM] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  4   42[COMRAM] long 
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4308 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4309 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4310 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4311 ;;Total ram usage:       15 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; This function calls:
  4314 ;;		Nothing
  4315 ;; This function is called by:
  4316 ;;		_printf
  4317 ;; This function uses a non-reentrant model
  4318 ;;
  4319                           
  4320                           	psect	text15
  4321  002486                     __ptext15:
  4322                           	opt stack 0
  4323  002486                     ___fttol:
  4324                           	opt stack 29
  4325                           
  4326                           ;incstack = 0
  4327  002486  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4328  00248A  6A30               	clrf	(??___fttol+1)& (0+255),c
  4329  00248C  6A31               	clrf	(??___fttol+2)& (0+255),c
  4330  00248E  342C               	rlcf	___fttol@f1+1,w,c
  4331  002490  362F               	rlcf	??___fttol& (0+255),f,c
  4332  002492  E301               	bnc	u2371
  4333  002494  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4334  002496                     u2371:
  4335  002496  502F               	movf	??___fttol,w,c
  4336  002498  6E39               	movwf	___fttol@exp1,c
  4337  00249A  5039               	movf	___fttol@exp1,w,c
  4338  00249C  A4D8               	btfss	status,2,c
  4339  00249E  D002               	goto	l2195
  4340  0024A0  D039               	goto	l2219
  4341  0024A2  D063               	goto	l623
  4342  0024A4                     l2195:
  4343  0024A4  0E17               	movlw	23
  4344  0024A6  6E2F               	movwf	??___fttol& (0+255),c
  4345  0024A8  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4346  0024AC  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4347  0024B0  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4348  0024B4  282F               	incf	??___fttol,w,c
  4349  0024B6  6E33               	movwf	(??___fttol+4)& (0+255),c
  4350  0024B8  D004               	goto	u2390
  4351  0024BA                     u2395:
  4352  0024BA  90D8               	bcf	status,0,c
  4353  0024BC  3232               	rrcf	??___fttol+3,f,c
  4354  0024BE  3231               	rrcf	??___fttol+2,f,c
  4355  0024C0  3230               	rrcf	??___fttol+1,f,c
  4356  0024C2                     u2390:
  4357  0024C2  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4358  0024C4  D7FA               	goto	u2395
  4359  0024C6  5030               	movf	??___fttol+1,w,c
  4360  0024C8  6E34               	movwf	___fttol@sign1,c
  4361  0024CA  8E2C               	bsf	___fttol@f1+1,7,c
  4362  0024CC  0EFF               	movlw	255
  4363  0024CE  162B               	andwf	___fttol@f1,f,c
  4364  0024D0  0EFF               	movlw	255
  4365  0024D2  162C               	andwf	___fttol@f1+1,f,c
  4366  0024D4  0E00               	movlw	0
  4367  0024D6  162D               	andwf	___fttol@f1+2,f,c
  4368  0024D8  502B               	movf	___fttol@f1,w,c
  4369  0024DA  6E35               	movwf	___fttol@lval,c
  4370  0024DC  502C               	movf	___fttol@f1+1,w,c
  4371  0024DE  6E36               	movwf	___fttol@lval+1,c
  4372  0024E0  502D               	movf	___fttol@f1+2,w,c
  4373  0024E2  6E37               	movwf	___fttol@lval+2,c
  4374  0024E4  6A38               	clrf	___fttol@lval+3,c
  4375  0024E6  0E8E               	movlw	142
  4376  0024E8  5E39               	subwf	___fttol@exp1,f,c
  4377  0024EA  AE39               	btfss	___fttol@exp1,7,c
  4378  0024EC  D010               	goto	l2217
  4379  0024EE  5039               	movf	___fttol@exp1,w,c
  4380  0024F0  0A80               	xorlw	128
  4381  0024F2  0F8F               	addlw	143
  4382  0024F4  B0D8               	btfsc	status,0,c
  4383  0024F6  D003               	goto	l2213
  4384  0024F8  D00D               	goto	l2219
  4385  0024FA  D037               	goto	l623
  4386  0024FC  D000               	goto	l2213
  4387  0024FE                     l2213:
  4388  0024FE  90D8               	bcf	status,0,c
  4389  002500  3238               	rrcf	___fttol@lval+3,f,c
  4390  002502  3237               	rrcf	___fttol@lval+2,f,c
  4391  002504  3236               	rrcf	___fttol@lval+1,f,c
  4392  002506  3235               	rrcf	___fttol@lval,f,c
  4393  002508  3E39               	incfsz	___fttol@exp1,f,c
  4394  00250A  D7F9               	goto	l2213
  4395  00250C  D019               	goto	l2227
  4396  00250E                     l2217:
  4397  00250E  0E17               	movlw	23
  4398  002510  6439               	cpfsgt	___fttol@exp1,c
  4399  002512  D011               	goto	l2225
  4400  002514                     l2219:
  4401  002514  0E00               	movlw	0
  4402  002516  6E2B               	movwf	?___fttol,c
  4403  002518  0E00               	movlw	0
  4404  00251A  6E2C               	movwf	?___fttol+1,c
  4405  00251C  0E00               	movlw	0
  4406  00251E  6E2D               	movwf	?___fttol+2,c
  4407  002520  0E00               	movlw	0
  4408  002522  6E2E               	movwf	?___fttol+3,c
  4409  002524  D022               	goto	l623
  4410  002526  D007               	goto	l2225
  4411  002528                     l2223:
  4412  002528  90D8               	bcf	status,0,c
  4413  00252A  3635               	rlcf	___fttol@lval,f,c
  4414  00252C  3636               	rlcf	___fttol@lval+1,f,c
  4415  00252E  3637               	rlcf	___fttol@lval+2,f,c
  4416  002530  3638               	rlcf	___fttol@lval+3,f,c
  4417  002532  0639               	decf	___fttol@exp1,f,c
  4418  002534  D000               	goto	l2225
  4419  002536                     l2225:
  4420  002536  5039               	movf	___fttol@exp1,w,c
  4421  002538  B4D8               	btfsc	status,2,c
  4422  00253A  D002               	goto	l2227
  4423  00253C  D7F5               	goto	l2223
  4424  00253E  D000               	goto	l2227
  4425  002540                     l2227:
  4426  002540  5034               	movf	___fttol@sign1,w,c
  4427  002542  B4D8               	btfsc	status,2,c
  4428  002544  D009               	goto	l2231
  4429  002546  1E38               	comf	___fttol@lval+3,f,c
  4430  002548  1E37               	comf	___fttol@lval+2,f,c
  4431  00254A  1E36               	comf	___fttol@lval+1,f,c
  4432  00254C  6C35               	negf	___fttol@lval,c
  4433  00254E  0E00               	movlw	0
  4434  002550  2236               	addwfc	___fttol@lval+1,f,c
  4435  002552  2237               	addwfc	___fttol@lval+2,f,c
  4436  002554  2238               	addwfc	___fttol@lval+3,f,c
  4437  002556  D000               	goto	l2231
  4438  002558                     l2231:
  4439  002558  C035  F02B         	movff	___fttol@lval,?___fttol
  4440  00255C  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4441  002560  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4442  002564  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4443  002568  D000               	goto	l623
  4444  00256A                     l623:
  4445  00256A  0012               	return		;funcret
  4446  00256C                     __end_of___fttol:
  4447                           	opt stack 0
  4448                           tblptru	equ	0xFF8
  4449                           tblptrh	equ	0xFF7
  4450                           tblptrl	equ	0xFF6
  4451                           tablat	equ	0xFF5
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           wreg	equ	0xFE8
  4455                           postinc2	equ	0xFDE
  4456                           postdec2	equ	0xFDD
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function ___ftsub *****************
  4462 ;; Defined at:
  4463 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  f1              3   57[COMRAM] float 
  4466 ;;  f2              3   60[COMRAM] float 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  3   57[COMRAM] float 
  4471 ;; Registers used:
  4472 ;;		wreg, status,2, status,0, cstack
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4478 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;Total ram usage:        6 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    2
  4485 ;; This function calls:
  4486 ;;		___ftadd
  4487 ;; This function is called by:
  4488 ;;		_printf
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text16
  4493  0029F4                     __ptext16:
  4494                           	opt stack 0
  4495  0029F4                     ___ftsub:
  4496                           	opt stack 27
  4497                           
  4498                           ;incstack = 0
  4499  0029F4  503D               	movf	___ftsub@f2,w,c
  4500  0029F6  103E               	iorwf	___ftsub@f2+1,w,c
  4501  0029F8  103F               	iorwf	___ftsub@f2+2,w,c
  4502  0029FA  B4D8               	btfsc	status,2,c
  4503  0029FC  D007               	goto	l2163
  4504  0029FE  0E00               	movlw	0
  4505  002A00  1A3D               	xorwf	___ftsub@f2,f,c
  4506  002A02  0E00               	movlw	0
  4507  002A04  1A3E               	xorwf	___ftsub@f2+1,f,c
  4508  002A06  0E80               	movlw	128
  4509  002A08  1A3F               	xorwf	___ftsub@f2+2,f,c
  4510  002A0A  D000               	goto	l2163
  4511  002A0C                     l2163:
  4512  002A0C  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4513  002A10  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4514  002A14  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4515  002A18  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4516  002A1C  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4517  002A20  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4518  002A24  ECD8  F00F         	call	___ftadd	;wreg free
  4519  002A28  C02E  F03A         	movff	?___ftadd,?___ftsub
  4520  002A2C  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4521  002A30  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4522  002A34  D000               	goto	l619
  4523  002A36                     l619:
  4524  002A36  0012               	return		;funcret
  4525  002A38                     __end_of___ftsub:
  4526                           	opt stack 0
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           wreg	equ	0xFE8
  4534                           postinc2	equ	0xFDE
  4535                           postdec2	equ	0xFDD
  4536                           fsr2h	equ	0xFDA
  4537                           fsr2l	equ	0xFD9
  4538                           status	equ	0xFD8
  4539                           
  4540 ;; *************** function ___ftadd *****************
  4541 ;; Defined at:
  4542 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;  f1              3   45[COMRAM] float 
  4545 ;;  f2              3   48[COMRAM] float 
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;  exp1            1   56[COMRAM] unsigned char 
  4548 ;;  exp2            1   55[COMRAM] unsigned char 
  4549 ;;  sign            1   54[COMRAM] unsigned char 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  3   45[COMRAM] float 
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4559 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;Total ram usage:       12 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    1
  4566 ;; This function calls:
  4567 ;;		___ftpack
  4568 ;; This function is called by:
  4569 ;;		_printf
  4570 ;;		___ftsub
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           	psect	text17
  4575  001FB0                     __ptext17:
  4576                           	opt stack 0
  4577  001FB0                     ___ftadd:
  4578                           	opt stack 27
  4579                           
  4580                           ;incstack = 0
  4581  001FB0  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4582  001FB4  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4583  001FB6  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4584  001FB8  342F               	rlcf	___ftadd@f1+1,w,c
  4585  001FBA  3634               	rlcf	??___ftadd& (0+255),f,c
  4586  001FBC  E301               	bnc	u1571
  4587  001FBE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4588  001FC0                     u1571:
  4589  001FC0  5034               	movf	??___ftadd,w,c
  4590  001FC2  6E39               	movwf	___ftadd@exp1,c
  4591  001FC4  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4592  001FC8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4593  001FCA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4594  001FCC  3432               	rlcf	___ftadd@f2+1,w,c
  4595  001FCE  3634               	rlcf	??___ftadd& (0+255),f,c
  4596  001FD0  E301               	bnc	u1581
  4597  001FD2  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4598  001FD4                     u1581:
  4599  001FD4  5034               	movf	??___ftadd,w,c
  4600  001FD6  6E38               	movwf	___ftadd@exp2,c
  4601  001FD8  5039               	movf	___ftadd@exp1,w,c
  4602  001FDA  B4D8               	btfsc	status,2,c
  4603  001FDC  D00B               	goto	l538
  4604  001FDE  5038               	movf	___ftadd@exp2,w,c
  4605  001FE0  5C39               	subwf	___ftadd@exp1,w,c
  4606  001FE2  B0D8               	btfsc	status,0,c
  4607  001FE4  D00E               	goto	l1725
  4608  001FE6  5039               	movf	___ftadd@exp1,w,c
  4609  001FE8  0800               	sublw	0
  4610  001FEA  2438               	addwf	___ftadd@exp2,w,c
  4611  001FEC  6E34               	movwf	??___ftadd& (0+255),c
  4612  001FEE  0E18               	movlw	24
  4613  001FF0  6434               	cpfsgt	??___ftadd,c
  4614  001FF2  D007               	goto	l1725
  4615  001FF4                     l538:
  4616  001FF4  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4617  001FF8  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4618  001FFC  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4619  002000  D0B8               	goto	l539
  4620  002002                     l1725:
  4621  002002  5038               	movf	___ftadd@exp2,w,c
  4622  002004  B4D8               	btfsc	status,2,c
  4623  002006  D00B               	goto	l542
  4624  002008  5039               	movf	___ftadd@exp1,w,c
  4625  00200A  5C38               	subwf	___ftadd@exp2,w,c
  4626  00200C  B0D8               	btfsc	status,0,c
  4627  00200E  D00E               	goto	l1731
  4628  002010  5038               	movf	___ftadd@exp2,w,c
  4629  002012  0800               	sublw	0
  4630  002014  2439               	addwf	___ftadd@exp1,w,c
  4631  002016  6E34               	movwf	??___ftadd& (0+255),c
  4632  002018  0E18               	movlw	24
  4633  00201A  6434               	cpfsgt	??___ftadd,c
  4634  00201C  D007               	goto	l1731
  4635  00201E                     l542:
  4636  00201E  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4637  002022  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4638  002026  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4639  00202A  D0A3               	goto	l539
  4640  00202C                     l1731:
  4641  00202C  0E06               	movlw	6
  4642  00202E  6E37               	movwf	___ftadd@sign,c
  4643  002030  AE30               	btfss	___ftadd@f1+2,7,c
  4644  002032  D002               	goto	l1737
  4645  002034  8E37               	bsf	___ftadd@sign,7,c
  4646  002036  D000               	goto	l1737
  4647  002038                     l1737:
  4648  002038  BE33               	btfsc	___ftadd@f2+2,7,c
  4649  00203A  8C37               	bsf	___ftadd@sign,6,c
  4650  00203C  8E2F               	bsf	___ftadd@f1+1,7,c
  4651  00203E  0EFF               	movlw	255
  4652  002040  162E               	andwf	___ftadd@f1,f,c
  4653  002042  0EFF               	movlw	255
  4654  002044  162F               	andwf	___ftadd@f1+1,f,c
  4655  002046  0E00               	movlw	0
  4656  002048  1630               	andwf	___ftadd@f1+2,f,c
  4657  00204A  8E32               	bsf	___ftadd@f2+1,7,c
  4658  00204C  0EFF               	movlw	255
  4659  00204E  1631               	andwf	___ftadd@f2,f,c
  4660  002050  0EFF               	movlw	255
  4661  002052  1632               	andwf	___ftadd@f2+1,f,c
  4662  002054  0E00               	movlw	0
  4663  002056  1633               	andwf	___ftadd@f2+2,f,c
  4664  002058  5038               	movf	___ftadd@exp2,w,c
  4665  00205A  5C39               	subwf	___ftadd@exp1,w,c
  4666  00205C  B0D8               	btfsc	status,0,c
  4667  00205E  D01E               	goto	l1757
  4668  002060                     l1747:
  4669  002060  90D8               	bcf	status,0,c
  4670  002062  3631               	rlcf	___ftadd@f2,f,c
  4671  002064  3632               	rlcf	___ftadd@f2+1,f,c
  4672  002066  3633               	rlcf	___ftadd@f2+2,f,c
  4673  002068  0638               	decf	___ftadd@exp2,f,c
  4674  00206A  5039               	movf	___ftadd@exp1,w,c
  4675  00206C  1838               	xorwf	___ftadd@exp2,w,c
  4676  00206E  B4D8               	btfsc	status,2,c
  4677  002070  D00F               	goto	l1755
  4678  002072  0637               	decf	___ftadd@sign,f,c
  4679  002074  C037  F034         	movff	___ftadd@sign,??___ftadd
  4680  002078  0E07               	movlw	7
  4681  00207A  1634               	andwf	??___ftadd,f,c
  4682  00207C  B4D8               	btfsc	status,2,c
  4683  00207E  D008               	goto	l1755
  4684  002080  D7EF               	goto	l1747
  4685  002082  D006               	goto	l1755
  4686  002084                     l1753:
  4687  002084  90D8               	bcf	status,0,c
  4688  002086  3230               	rrcf	___ftadd@f1+2,f,c
  4689  002088  322F               	rrcf	___ftadd@f1+1,f,c
  4690  00208A  322E               	rrcf	___ftadd@f1,f,c
  4691  00208C  2A39               	incf	___ftadd@exp1,f,c
  4692  00208E  D000               	goto	l1755
  4693  002090                     l1755:
  4694  002090  5038               	movf	___ftadd@exp2,w,c
  4695  002092  1839               	xorwf	___ftadd@exp1,w,c
  4696  002094  B4D8               	btfsc	status,2,c
  4697  002096  D024               	goto	l553
  4698  002098  D7F5               	goto	l1753
  4699  00209A  D022               	goto	l553
  4700  00209C                     l1757:
  4701  00209C  5039               	movf	___ftadd@exp1,w,c
  4702  00209E  5C38               	subwf	___ftadd@exp2,w,c
  4703  0020A0  B0D8               	btfsc	status,0,c
  4704  0020A2  D01E               	goto	l553
  4705  0020A4                     l1759:
  4706  0020A4  90D8               	bcf	status,0,c
  4707  0020A6  362E               	rlcf	___ftadd@f1,f,c
  4708  0020A8  362F               	rlcf	___ftadd@f1+1,f,c
  4709  0020AA  3630               	rlcf	___ftadd@f1+2,f,c
  4710  0020AC  0639               	decf	___ftadd@exp1,f,c
  4711  0020AE  5039               	movf	___ftadd@exp1,w,c
  4712  0020B0  1838               	xorwf	___ftadd@exp2,w,c
  4713  0020B2  B4D8               	btfsc	status,2,c
  4714  0020B4  D00F               	goto	l1767
  4715  0020B6  0637               	decf	___ftadd@sign,f,c
  4716  0020B8  C037  F034         	movff	___ftadd@sign,??___ftadd
  4717  0020BC  0E07               	movlw	7
  4718  0020BE  1634               	andwf	??___ftadd,f,c
  4719  0020C0  B4D8               	btfsc	status,2,c
  4720  0020C2  D008               	goto	l1767
  4721  0020C4  D7EF               	goto	l1759
  4722  0020C6  D006               	goto	l1767
  4723  0020C8                     l1765:
  4724  0020C8  90D8               	bcf	status,0,c
  4725  0020CA  3233               	rrcf	___ftadd@f2+2,f,c
  4726  0020CC  3232               	rrcf	___ftadd@f2+1,f,c
  4727  0020CE  3231               	rrcf	___ftadd@f2,f,c
  4728  0020D0  2A38               	incf	___ftadd@exp2,f,c
  4729  0020D2  D000               	goto	l1767
  4730  0020D4                     l1767:
  4731  0020D4  5038               	movf	___ftadd@exp2,w,c
  4732  0020D6  1839               	xorwf	___ftadd@exp1,w,c
  4733  0020D8  B4D8               	btfsc	status,2,c
  4734  0020DA  D002               	goto	l553
  4735  0020DC  D7F5               	goto	l1765
  4736  0020DE  D000               	goto	l553
  4737  0020E0                     l553:
  4738  0020E0  AE37               	btfss	___ftadd@sign,7,c
  4739  0020E2  D00C               	goto	l562
  4740  0020E4  0EFF               	movlw	255
  4741  0020E6  1A2E               	xorwf	___ftadd@f1,f,c
  4742  0020E8  0EFF               	movlw	255
  4743  0020EA  1A2F               	xorwf	___ftadd@f1+1,f,c
  4744  0020EC  0EFF               	movlw	255
  4745  0020EE  1A30               	xorwf	___ftadd@f1+2,f,c
  4746  0020F0  0E01               	movlw	1
  4747  0020F2  262E               	addwf	___ftadd@f1,f,c
  4748  0020F4  0E00               	movlw	0
  4749  0020F6  222F               	addwfc	___ftadd@f1+1,f,c
  4750  0020F8  0E00               	movlw	0
  4751  0020FA  2230               	addwfc	___ftadd@f1+2,f,c
  4752  0020FC                     l562:
  4753  0020FC  AC37               	btfss	___ftadd@sign,6,c
  4754  0020FE  D00D               	goto	l1773
  4755  002100  0EFF               	movlw	255
  4756  002102  1A31               	xorwf	___ftadd@f2,f,c
  4757  002104  0EFF               	movlw	255
  4758  002106  1A32               	xorwf	___ftadd@f2+1,f,c
  4759  002108  0EFF               	movlw	255
  4760  00210A  1A33               	xorwf	___ftadd@f2+2,f,c
  4761  00210C  0E01               	movlw	1
  4762  00210E  2631               	addwf	___ftadd@f2,f,c
  4763  002110  0E00               	movlw	0
  4764  002112  2232               	addwfc	___ftadd@f2+1,f,c
  4765  002114  0E00               	movlw	0
  4766  002116  2233               	addwfc	___ftadd@f2+2,f,c
  4767  002118  D000               	goto	l1773
  4768  00211A                     l1773:
  4769  00211A  0E00               	movlw	0
  4770  00211C  6E37               	movwf	___ftadd@sign,c
  4771  00211E  502E               	movf	___ftadd@f1,w,c
  4772  002120  2631               	addwf	___ftadd@f2,f,c
  4773  002122  502F               	movf	___ftadd@f1+1,w,c
  4774  002124  2232               	addwfc	___ftadd@f2+1,f,c
  4775  002126  5030               	movf	___ftadd@f1+2,w,c
  4776  002128  2233               	addwfc	___ftadd@f2+2,f,c
  4777  00212A  AE33               	btfss	___ftadd@f2+2,7,c
  4778  00212C  D00F               	goto	l1783
  4779  00212E  0EFF               	movlw	255
  4780  002130  1A31               	xorwf	___ftadd@f2,f,c
  4781  002132  0EFF               	movlw	255
  4782  002134  1A32               	xorwf	___ftadd@f2+1,f,c
  4783  002136  0EFF               	movlw	255
  4784  002138  1A33               	xorwf	___ftadd@f2+2,f,c
  4785  00213A  0E01               	movlw	1
  4786  00213C  2631               	addwf	___ftadd@f2,f,c
  4787  00213E  0E00               	movlw	0
  4788  002140  2232               	addwfc	___ftadd@f2+1,f,c
  4789  002142  0E00               	movlw	0
  4790  002144  2233               	addwfc	___ftadd@f2+2,f,c
  4791  002146  0E01               	movlw	1
  4792  002148  6E37               	movwf	___ftadd@sign,c
  4793  00214A  D000               	goto	l1783
  4794  00214C                     l1783:
  4795  00214C  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4796  002150  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4797  002154  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4798  002158  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4799  00215C  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4800  002160  ECB6  F012         	call	___ftpack	;wreg free
  4801  002164  C001  F02E         	movff	?___ftpack,?___ftadd
  4802  002168  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4803  00216C  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4804  002170  D000               	goto	l539
  4805  002172                     l539:
  4806  002172  0012               	return		;funcret
  4807  002174                     __end_of___ftadd:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           wreg	equ	0xFE8
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function ___ftpack *****************
  4823 ;; Defined at:
  4824 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  arg             3    0[COMRAM] unsigned um
  4827 ;;  exp             1    3[COMRAM] unsigned char 
  4828 ;;  sign            1    4[COMRAM] unsigned char 
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  3    0[COMRAM] float 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4840 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;Total ram usage:        8 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; This function calls:
  4847 ;;		Nothing
  4848 ;; This function is called by:
  4849 ;;		___ftadd
  4850 ;;		___ftmul
  4851 ;;		___lltoft
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text18
  4856  00256C                     __ptext18:
  4857                           	opt stack 0
  4858  00256C                     ___ftpack:
  4859                           	opt stack 27
  4860                           
  4861                           ;incstack = 0
  4862  00256C  5004               	movf	___ftpack@exp,w,c
  4863  00256E  B4D8               	btfsc	status,2,c
  4864  002570  D005               	goto	l1679
  4865  002572  5001               	movf	___ftpack@arg,w,c
  4866  002574  1002               	iorwf	___ftpack@arg+1,w,c
  4867  002576  1003               	iorwf	___ftpack@arg+2,w,c
  4868  002578  A4D8               	btfss	status,2,c
  4869  00257A  D00E               	goto	l1685
  4870  00257C                     l1679:
  4871  00257C  0E00               	movlw	0
  4872  00257E  6E01               	movwf	?___ftpack,c
  4873  002580  0E00               	movlw	0
  4874  002582  6E02               	movwf	?___ftpack+1,c
  4875  002584  0E00               	movlw	0
  4876  002586  6E03               	movwf	?___ftpack+2,c
  4877  002588  D053               	goto	l498
  4878  00258A  D006               	goto	l1685
  4879  00258C                     l1683:
  4880  00258C  2A04               	incf	___ftpack@exp,f,c
  4881  00258E  90D8               	bcf	status,0,c
  4882  002590  3203               	rrcf	___ftpack@arg+2,f,c
  4883  002592  3202               	rrcf	___ftpack@arg+1,f,c
  4884  002594  3201               	rrcf	___ftpack@arg,f,c
  4885  002596  D000               	goto	l1685
  4886  002598                     l1685:
  4887  002598  0E00               	movlw	0
  4888  00259A  1401               	andwf	___ftpack@arg,w,c
  4889  00259C  6E06               	movwf	??___ftpack& (0+255),c
  4890  00259E  0E00               	movlw	0
  4891  0025A0  1402               	andwf	___ftpack@arg+1,w,c
  4892  0025A2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4893  0025A4  0EFE               	movlw	254
  4894  0025A6  1403               	andwf	___ftpack@arg+2,w,c
  4895  0025A8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4896  0025AA  5006               	movf	??___ftpack,w,c
  4897  0025AC  1007               	iorwf	??___ftpack+1,w,c
  4898  0025AE  1008               	iorwf	??___ftpack+2,w,c
  4899  0025B0  B4D8               	btfsc	status,2,c
  4900  0025B2  D00E               	goto	l1691
  4901  0025B4  D7EB               	goto	l1683
  4902  0025B6  D00C               	goto	l1691
  4903  0025B8                     l1687:
  4904  0025B8  2A04               	incf	___ftpack@exp,f,c
  4905  0025BA  0E01               	movlw	1
  4906  0025BC  2601               	addwf	___ftpack@arg,f,c
  4907  0025BE  0E00               	movlw	0
  4908  0025C0  2202               	addwfc	___ftpack@arg+1,f,c
  4909  0025C2  0E00               	movlw	0
  4910  0025C4  2203               	addwfc	___ftpack@arg+2,f,c
  4911  0025C6  90D8               	bcf	status,0,c
  4912  0025C8  3203               	rrcf	___ftpack@arg+2,f,c
  4913  0025CA  3202               	rrcf	___ftpack@arg+1,f,c
  4914  0025CC  3201               	rrcf	___ftpack@arg,f,c
  4915  0025CE  D000               	goto	l1691
  4916  0025D0                     l1691:
  4917  0025D0  0E00               	movlw	0
  4918  0025D2  1401               	andwf	___ftpack@arg,w,c
  4919  0025D4  6E06               	movwf	??___ftpack& (0+255),c
  4920  0025D6  0E00               	movlw	0
  4921  0025D8  1402               	andwf	___ftpack@arg+1,w,c
  4922  0025DA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4923  0025DC  0EFF               	movlw	255
  4924  0025DE  1403               	andwf	___ftpack@arg+2,w,c
  4925  0025E0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4926  0025E2  5006               	movf	??___ftpack,w,c
  4927  0025E4  1007               	iorwf	??___ftpack+1,w,c
  4928  0025E6  1008               	iorwf	??___ftpack+2,w,c
  4929  0025E8  B4D8               	btfsc	status,2,c
  4930  0025EA  D008               	goto	l1695
  4931  0025EC  D7E5               	goto	l1687
  4932  0025EE  D006               	goto	l1695
  4933  0025F0                     l1693:
  4934  0025F0  0604               	decf	___ftpack@exp,f,c
  4935  0025F2  90D8               	bcf	status,0,c
  4936  0025F4  3601               	rlcf	___ftpack@arg,f,c
  4937  0025F6  3602               	rlcf	___ftpack@arg+1,f,c
  4938  0025F8  3603               	rlcf	___ftpack@arg+2,f,c
  4939  0025FA  D000               	goto	l1695
  4940  0025FC                     l1695:
  4941  0025FC  BE02               	btfsc	___ftpack@arg+1,7,c
  4942  0025FE  D004               	goto	l509
  4943  002600  0E02               	movlw	2
  4944  002602  6004               	cpfslt	___ftpack@exp,c
  4945  002604  D7F5               	goto	l1693
  4946  002606  D000               	goto	l509
  4947  002608                     l509:
  4948  002608  B004               	btfsc	___ftpack@exp,0,c
  4949  00260A  D002               	goto	l1701
  4950  00260C  9E02               	bcf	___ftpack@arg+1,7,c
  4951  00260E  D000               	goto	l1701
  4952  002610                     l1701:
  4953  002610  90D8               	bcf	status,0,c
  4954  002612  3204               	rrcf	___ftpack@exp,f,c
  4955  002614  5004               	movf	___ftpack@exp,w,c
  4956  002616  1203               	iorwf	___ftpack@arg+2,f,c
  4957  002618  5005               	movf	___ftpack@sign,w,c
  4958  00261A  B4D8               	btfsc	status,2,c
  4959  00261C  D002               	goto	l1707
  4960  00261E  8E03               	bsf	___ftpack@arg+2,7,c
  4961  002620  D000               	goto	l1707
  4962  002622                     l1707:
  4963  002622  C001  F001         	movff	___ftpack@arg,?___ftpack
  4964  002626  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4965  00262A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4966  00262E  D000               	goto	l498
  4967  002630                     l498:
  4968  002630  0012               	return		;funcret
  4969  002632                     __end_of___ftpack:
  4970                           	opt stack 0
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           prodh	equ	0xFF4
  4976                           prodl	equ	0xFF3
  4977                           wreg	equ	0xFE8
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function ___ftneg *****************
  4985 ;; Defined at:
  4986 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;  f1              3    0[COMRAM] float 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;		None
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  3    0[COMRAM] float 
  4993 ;; Registers used:
  4994 ;;		wreg, status,2, status,0
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;Total ram usage:        3 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_printf
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text19
  5014  002A60                     __ptext19:
  5015                           	opt stack 0
  5016  002A60                     ___ftneg:
  5017                           	opt stack 29
  5018                           
  5019                           ;incstack = 0
  5020  002A60  5001               	movf	___ftneg@f1,w,c
  5021  002A62  1002               	iorwf	___ftneg@f1+1,w,c
  5022  002A64  1003               	iorwf	___ftneg@f1+2,w,c
  5023  002A66  B4D8               	btfsc	status,2,c
  5024  002A68  D006               	goto	l612
  5025  002A6A  0E00               	movlw	0
  5026  002A6C  1A01               	xorwf	___ftneg@f1,f,c
  5027  002A6E  0E00               	movlw	0
  5028  002A70  1A02               	xorwf	___ftneg@f1+1,f,c
  5029  002A72  0E80               	movlw	128
  5030  002A74  1A03               	xorwf	___ftneg@f1+2,f,c
  5031  002A76                     l612:
  5032  002A76  C001  F001         	movff	___ftneg@f1,?___ftneg
  5033  002A7A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5034  002A7E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5035  002A82  0012               	return		;funcret
  5036  002A84                     __end_of___ftneg:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           wreg	equ	0xFE8
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           fsr2h	equ	0xFDA
  5048                           fsr2l	equ	0xFD9
  5049                           status	equ	0xFD8
  5050                           
  5051 ;; *************** function ___ftge *****************
  5052 ;; Defined at:
  5053 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5054 ;; Parameters:    Size  Location     Type
  5055 ;;  ff1             3    0[COMRAM] float 
  5056 ;;  ff2             3    3[COMRAM] float 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;		None
  5059 ;; Return value:  Size  Location     Type
  5060 ;;		None               void
  5061 ;; Registers used:
  5062 ;;		wreg, status,2, status,0
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5068 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;Total ram usage:        9 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; This function calls:
  5075 ;;		Nothing
  5076 ;; This function is called by:
  5077 ;;		_printf
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text20
  5082  0026C8                     __ptext20:
  5083                           	opt stack 0
  5084  0026C8                     ___ftge:
  5085                           	opt stack 29
  5086                           
  5087                           ;incstack = 0
  5088  0026C8  AE03               	btfss	___ftge@ff1+2,7,c
  5089  0026CA  D017               	goto	l2171
  5090  0026CC  C001  F007         	movff	___ftge@ff1,??___ftge
  5091  0026D0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5092  0026D4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5093  0026D8  1E07               	comf	??___ftge,f,c
  5094  0026DA  1E08               	comf	??___ftge+1,f,c
  5095  0026DC  1E09               	comf	??___ftge+2,f,c
  5096  0026DE  2A07               	incf	??___ftge,f,c
  5097  0026E0  0E00               	movlw	0
  5098  0026E2  2208               	addwfc	??___ftge+1,f,c
  5099  0026E4  2209               	addwfc	??___ftge+2,f,c
  5100  0026E6  0E00               	movlw	0
  5101  0026E8  2407               	addwf	??___ftge,w,c
  5102  0026EA  6E01               	movwf	___ftge@ff1,c
  5103  0026EC  0E00               	movlw	0
  5104  0026EE  2008               	addwfc	??___ftge+1,w,c
  5105  0026F0  6E02               	movwf	___ftge@ff1+1,c
  5106  0026F2  0E80               	movlw	128
  5107  0026F4  2009               	addwfc	??___ftge+2,w,c
  5108  0026F6  6E03               	movwf	___ftge@ff1+2,c
  5109  0026F8  D000               	goto	l2171
  5110  0026FA                     l2171:
  5111  0026FA  AE06               	btfss	___ftge@ff2+2,7,c
  5112  0026FC  D017               	goto	l2175
  5113  0026FE  C004  F007         	movff	___ftge@ff2,??___ftge
  5114  002702  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5115  002706  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5116  00270A  1E07               	comf	??___ftge,f,c
  5117  00270C  1E08               	comf	??___ftge+1,f,c
  5118  00270E  1E09               	comf	??___ftge+2,f,c
  5119  002710  2A07               	incf	??___ftge,f,c
  5120  002712  0E00               	movlw	0
  5121  002714  2208               	addwfc	??___ftge+1,f,c
  5122  002716  2209               	addwfc	??___ftge+2,f,c
  5123  002718  0E00               	movlw	0
  5124  00271A  2407               	addwf	??___ftge,w,c
  5125  00271C  6E04               	movwf	___ftge@ff2,c
  5126  00271E  0E00               	movlw	0
  5127  002720  2008               	addwfc	??___ftge+1,w,c
  5128  002722  6E05               	movwf	___ftge@ff2+1,c
  5129  002724  0E80               	movlw	128
  5130  002726  2009               	addwfc	??___ftge+2,w,c
  5131  002728  6E06               	movwf	___ftge@ff2+2,c
  5132  00272A  D000               	goto	l2175
  5133  00272C                     l2175:
  5134  00272C  0E00               	movlw	0
  5135  00272E  1A01               	xorwf	___ftge@ff1,f,c
  5136  002730  0E00               	movlw	0
  5137  002732  1A02               	xorwf	___ftge@ff1+1,f,c
  5138  002734  0E80               	movlw	128
  5139  002736  1A03               	xorwf	___ftge@ff1+2,f,c
  5140  002738  0E00               	movlw	0
  5141  00273A  1A04               	xorwf	___ftge@ff2,f,c
  5142  00273C  0E00               	movlw	0
  5143  00273E  1A05               	xorwf	___ftge@ff2+1,f,c
  5144  002740  0E80               	movlw	128
  5145  002742  1A06               	xorwf	___ftge@ff2+2,f,c
  5146  002744  5004               	movf	___ftge@ff2,w,c
  5147  002746  5C01               	subwf	___ftge@ff1,w,c
  5148  002748  5005               	movf	___ftge@ff2+1,w,c
  5149  00274A  5802               	subwfb	___ftge@ff1+1,w,c
  5150  00274C  5006               	movf	___ftge@ff2+2,w,c
  5151  00274E  5803               	subwfb	___ftge@ff1+2,w,c
  5152  002750  B0D8               	btfsc	status,0,c
  5153  002752  D002               	goto	l2181
  5154  002754  90D8               	bcf	status,0,c
  5155  002756  D002               	goto	l596
  5156  002758                     l2181:
  5157  002758  80D8               	bsf	status,0,c
  5158  00275A  D000               	goto	l596
  5159  00275C                     l596:
  5160  00275C  0012               	return		;funcret
  5161  00275E                     __end_of___ftge:
  5162                           	opt stack 0
  5163                           tblptru	equ	0xFF8
  5164                           tblptrh	equ	0xFF7
  5165                           tblptrl	equ	0xFF6
  5166                           tablat	equ	0xFF5
  5167                           prodh	equ	0xFF4
  5168                           prodl	equ	0xFF3
  5169                           wreg	equ	0xFE8
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function _Init_UART *****************
  5177 ;; Defined at:
  5178 ;;		line 12 in file "lab1p2.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, cstack
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    1
  5199 ;; This function calls:
  5200 ;;		_OpenUSART
  5201 ;; This function is called by:
  5202 ;;		_main
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text21
  5207  002AA6                     __ptext21:
  5208                           	opt stack 0
  5209  002AA6                     _Init_UART:
  5210                           	opt stack 29
  5211                           
  5212                           ;lab1p2.c: 13: OpenUSART (0b01111111 & 0b10111111 &
  5213                           ;lab1p2.c: 14: 0b11111110 & 0b11111101 & 0b11111111 &
  5214                           ;lab1p2.c: 15: 0b11111111, 25);
  5215                           
  5216                           ;incstack = 0
  5217  002AA6  0E00               	movlw	0
  5218  002AA8  6E02               	movwf	OpenUSART@spbrg+1,c
  5219  002AAA  0E19               	movlw	25
  5220  002AAC  6E01               	movwf	OpenUSART@spbrg,c
  5221  002AAE  0E3C               	movlw	60
  5222  002AB0  EC6E  F014         	call	_OpenUSART
  5223                           
  5224                           ;lab1p2.c: 16: OSCCON = 0x60;
  5225  002AB4  0E60               	movlw	96
  5226  002AB6  6ED3               	movwf	4051,c	;volatile
  5227  002AB8  0012               	return		;funcret
  5228  002ABA                     __end_of_Init_UART:
  5229                           	opt stack 0
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           wreg	equ	0xFE8
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _OpenUSART *****************
  5244 ;; Defined at:
  5245 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;  config          1    wreg     unsigned char 
  5248 ;;  spbrg           2    0[COMRAM] unsigned int 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;  config          1    2[COMRAM] unsigned char 
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, status,2
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5260 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5263 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5264 ;;Total ram usage:        3 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_Init_UART
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text22
  5274  0028DC                     __ptext22:
  5275                           	opt stack 0
  5276  0028DC                     _OpenUSART:
  5277                           	opt stack 29
  5278                           
  5279                           ;incstack = 0
  5280                           ;OpenUSART@config stored from wreg
  5281  0028DC  6E03               	movwf	OpenUSART@config,c
  5282  0028DE  0E00               	movlw	0
  5283  0028E0  6EAC               	movwf	4012,c	;volatile
  5284  0028E2  0E00               	movlw	0
  5285  0028E4  6EAB               	movwf	4011,c	;volatile
  5286  0028E6  A003               	btfss	OpenUSART@config,0,c
  5287  0028E8  D002               	goto	l1921
  5288  0028EA  88AC               	bsf	4012,4,c	;volatile
  5289  0028EC  D000               	goto	l1921
  5290  0028EE                     l1921:
  5291  0028EE  A203               	btfss	OpenUSART@config,1,c
  5292  0028F0  D003               	goto	l1925
  5293  0028F2  8CAC               	bsf	4012,6,c	;volatile
  5294  0028F4  8CAB               	bsf	4011,6,c	;volatile
  5295  0028F6  D000               	goto	l1925
  5296  0028F8                     l1925:
  5297  0028F8  A403               	btfss	OpenUSART@config,2,c
  5298  0028FA  D002               	goto	l1929
  5299  0028FC  8EAC               	bsf	4012,7,c	;volatile
  5300  0028FE  D000               	goto	l1929
  5301  002900                     l1929:
  5302  002900  A603               	btfss	OpenUSART@config,3,c
  5303  002902  D002               	goto	l161
  5304  002904  88AB               	bsf	4011,4,c	;volatile
  5305  002906  D002               	goto	l1933
  5306  002908                     l161:
  5307  002908  8AAB               	bsf	4011,5,c	;volatile
  5308  00290A  D000               	goto	l1933
  5309  00290C                     l1933:
  5310  00290C  B803               	btfsc	OpenUSART@config,4,c
  5311  00290E  84AC               	bsf	4012,2,c	;volatile
  5312  002910  989E               	bcf	3998,4,c	;volatile
  5313  002912  AA03               	btfss	OpenUSART@config,5,c
  5314  002914  D002               	goto	l1941
  5315  002916  86AB               	bsf	4011,3,c	;volatile
  5316  002918  D000               	goto	l1941
  5317  00291A                     l1941:
  5318  00291A  AC03               	btfss	OpenUSART@config,6,c
  5319  00291C  D002               	goto	l165
  5320  00291E  8A9D               	bsf	3997,5,c	;volatile
  5321  002920  D001               	goto	l166
  5322  002922                     l165:
  5323  002922  9A9D               	bcf	3997,5,c	;volatile
  5324  002924                     l166:
  5325  002924  9A9E               	bcf	3998,5,c	;volatile
  5326  002926  AE03               	btfss	OpenUSART@config,7,c
  5327  002928  D002               	goto	l167
  5328  00292A  889D               	bsf	3997,4,c	;volatile
  5329  00292C  D001               	goto	l168
  5330  00292E                     l167:
  5331  00292E  989D               	bcf	3997,4,c	;volatile
  5332  002930                     l168:
  5333  002930  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5334  002934  5002               	movf	OpenUSART@spbrg+1,w,c
  5335  002936  6EB0               	movwf	4016,c	;volatile
  5336  002938  8AAC               	bsf	4012,5,c	;volatile
  5337  00293A  8EAB               	bsf	4011,7,c	;volatile
  5338  00293C  9C94               	bcf	3988,6,c	;volatile
  5339  00293E  8E94               	bsf	3988,7,c	;volatile
  5340  002940  B8AC               	btfsc	4012,4,c	;volatile
  5341  002942  BEAC               	btfsc	4012,7,c	;volatile
  5342  002944  D002               	goto	l170
  5343  002946  8C94               	bsf	3988,6,c	;volatile
  5344  002948  D000               	goto	l170
  5345  00294A                     l170:
  5346  00294A  0012               	return		;funcret
  5347  00294C                     __end_of_OpenUSART:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           wreg	equ	0xFE8
  5356                           postinc2	equ	0xFDE
  5357                           postdec2	equ	0xFDD
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           tblptru	equ	0xFF8
  5362                           tblptrh	equ	0xFF7
  5363                           tblptrl	equ	0xFF6
  5364                           tablat	equ	0xFF5
  5365                           prodh	equ	0xFF4
  5366                           prodl	equ	0xFF3
  5367                           wreg	equ	0xFE8
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8
  5373                           
  5374                           	psect	rparam
  5375  0000                     tblptru	equ	0xFF8
  5376                           tblptrh	equ	0xFF7
  5377                           tblptrl	equ	0xFF6
  5378                           tablat	equ	0xFF5
  5379                           prodh	equ	0xFF4
  5380                           prodl	equ	0xFF3
  5381                           wreg	equ	0xFE8
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8


Data Sizes:
    Strings     132
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    102     102
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 66
		 -> STR_2(CODE[66]), STR_1(CODE[66]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   37326
                                             99 COMRAM     3     3      0
                          _Init_UART
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   37008
                                             63 COMRAM    36    31      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8724
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8526
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2067
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3558
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1790
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3053
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2800
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1668
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_UART
     _OpenUSART
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     66      66       1       80.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Feb 02 22:52:47 2022

                     l54 1D6A                       l47 1FAE             ___awdiv@sign 000C  
    ___wmul@multiplicand 0011             ___ftadd@exp1 0039             ___ftadd@exp2 0038  
           ___ftadd@sign 0037                      l113 16EE                      l161 2908  
                    l137 198A                      l170 294A                      l165 2922  
                    l173 2A5E                      l166 2924                      l167 292E  
                    l168 2930                      l602 2484                      l612 2A76  
                    l509 2608                      l542 201E                      l366 26C6  
                    l623 256A                      l553 20E0                      l457 238C  
                    l562 20FC                      l538 1FF4                      l466 237C  
                    l539 2172                      l619 2A36                      l379 286A  
                    l580 21EA                      l581 2212                      l638 2AA4  
                    l498 2630                      l578 2282                      l667 27D8  
                    l587 2272                      l596 275C                      l677 28CA  
                    l697 29AA             ___awmod@sign 0006                      wreg 000FE8  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l2003 1AB8  
                   l2021 1C94                     l2013 1B70                     l2111 22A4  
                   l2105 2294                     l2009 1B60                     l2027 1D46  
                   l2213 24FE                     l2133 231A                     l2125 22E8  
                   l2231 2558                     l2223 2528                     l2151 2354  
                   l2055 21B0                     l2039 2A9C                     l2225 2536  
                   l2217 250E                     l2241 2780                     l2145 233E  
                   l2137 232A                     l2049 2192                     l2313 11CA  
                   l2171 26FA                     l2163 2A0C                     l2219 2514  
                   l2227 2540                     l2243 278E                     l2155 2368  
                   l2091 224A                     l2403 1560                     l2323 1228  
                   l2307 11A8                     l2181 2758                     l1701 2610  
                   l2253 27C8                     l2245 2796                     l2261 287E  
                   l2157 2376                     l2149 234E                     l2085 2234  
                   l2077 2220                     l2421 15D6                     l2413 15A0  
                   l2405 1564                     l2317 1202                     l2175 272C  
                   l2263 288C                     l2095 225E                     l2511 1930  
                   l2503 18F8                     l2431 160A                     l2335 1268  
                   l2327 1230                     l2319 121A                     l2265 2894  
                   l2097 226C                     l2089 2244                     l2513 1938  
                   l2505 1902                     l2441 16B0                     l2425 15EE  
                   l2417 15A4                     l2409 1570                     l2361 133C  
                   l2345 12AA                     l2329 1252                     l2521 196C  
                   l1707 2622                     l1731 202C                     l2195 24A4  
                   l2275 2952                     l2443 16BC                     l2435 1626  
                   l2427 15F4                     l1725 2002                     l2269 28BA  
                   l2277 2960                     l1821 2430                     l1813 2408  
                   l2517 1950                     l2509 1926                     l2453 16F4  
                   l2429 15FC                     l2373 13C6                     l2293 111A  
                   l2525 29B2                     l1911 2860                     l1903 2844  
                   l1831 245E                     l1823 2436                     l2471 1840  
                   l2463 175E                     l2447 16CA                     l2391 147C  
                   l2375 13D6                     l1921 28EE                     l1753 2084  
                   l1737 2038                     l1817 241A                     l2449 16D8  
                   l2385 144E                     l2377 1406                     l2369 13A0  
                   l2289 1108                     l1691 25D0                     l1683 258C  
                   l1755 2090                     l1747 2060                     l1843 2648  
                   l1907 2850                     l1827 2448                     l2491 18B2  
                   l2483 1874                     l2475 184E                     l2459 170E  
                   l2395 14BE                     l2379 1416                     l2299 1148  
                   l1941 291A                     l1933 290C                     l1925 28F8  
                   l1693 25F0                     l1685 2598                     l1773 211A  
                   l1765 20C8                     l1757 209C                     l2469 1834  
                   l2397 14EC                     l2389 1472                     l2477 185A  
                   l1695 25FC                     l1687 25B8                     l1679 257C  
                   l1783 214C                     l1767 20D4                     l1759 20A4  
                   l1855 2670                     l1871 26AC                     l2487 1890  
                   l2399 14FA                     l1929 2900                     l1857 267A  
                   l1849 265A                     l1793 23AC                     l2497 18D6  
                   l1875 26BC                     l1867 26A0                     l1859 2682  
                   l1891 280E                     l1795 23C6                     l1981 1EAA  
                   l1895 281C                     l1887 2800                     l1799 23D4  
                   l1967 2ABE                     l1897 2826                     l1969 2AC4  
                   l1899 282E                     l1989 1F6E                     STR_1 1077  
                   STR_2 10B9                     u2161 2184                     u2181 21A2  
                   u1801 23BC                     u2610 12E2                     u1571 1FC0  
                   u2371 2496                     u1581 1FD4                     u2390 24C2  
                   u2615 12D8                     u2800 16E8                     u2395 24BA  
           printf@tmpval 0058                     u1781 239E                     _TRMT 007D61  
                   _main 29AC             ___ftpack@arg 0001             ___ftpack@exp 0004  
                   fsr2h 000FDA                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___ftmul@cntr 0022  
           ___param_bank 000010             ___ftmul@sign 0023             ___fttol@exp1 0039  
           ___fttol@lval 0035                    ?_main 0001          __end_of___awdiv 26C8  
        __end_of___ftadd 2174          __end_of___awmod 286C          __end_of___ftneg 2A84  
        __end_of___lldiv 27EA          __end_of___ftmul 2486          ___awdiv@divisor 0009  
        __end_of___llmod 28DC          __end_of___ftsub 2A38          __end_of___fttol 256C  
        ___awdiv@counter 000B                    _RCSTA 000FAB                    _SPBRG 000FAF  
                  _TXREG 000FAD                    _TXSTA 000FAC             ___lltoft@exp 0011  
        __end_of_dpowers 1029                    _scale 198C          __end_of_isdigit 2AA6  
          ___ftpack@sign 0005                    _putch 2ABA                    main@t 0064  
         __CFG_BOREN$OFF 000000                    tablat 000FF5                    status 000FD8  
        __initialization 2ACA             __end_of_main 29F4                   ??_main 0064  
          ___fttol@sign1 0034            __activetblptr 000002     __size_of__tdiv_to_l_ 0110  
       ___llmod@dividend 0001                   ?_scale 0024         ___awdiv@dividend 0007  
                 ?_putch 0001         __end_of___ftpack 2632         __end_of___lltoft 29AC  
                 _OSCCON 000FD3       __size_of_Init_UART 0014                   _SPBRGH 000FB0  
       __end_of__powers_ 1077       __size_of_OpenUSART 0070                   ___ftge 26C8  
                 ___wmul 2A38                ??___awdiv 000B                ??___ftadd 0034  
              ??___awmod 0005                ??___ftneg 0004                ??___lldiv 0009  
              ??___ftmul 001B                ??___llmod 0009                ??___ftsub 0040  
              ??___fttol 002F                   _fround 1D6C         ___awdiv@quotient 000D  
        ___awmod@divisor 0003          ___awmod@counter 0005                   _printf 10FC  
  ___ftmul@f3_as_product 001F                ??_isdigit 0001             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
                 putch@c 0001               __accesstop 0080  __end_of__initialization 2ACA  
             ___ftadd@f1 002E               ___ftadd@f2 0031               ___ftge@ff1 0001  
             ___ftge@ff2 0004            ___rparam_used 000001               ___ftneg@f1 0001  
             ___ftmul@f1 0015               ___ftmul@f2 0018               ___ftsub@f1 003A  
             ___ftsub@f2 003D               ___fttol@f1 002B           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale 1D6C            __end_of_putch 2ACA  
      __end_of_Init_UART 2ABA               __div_to_l_ 2284        __end_of_OpenUSART 294C  
        __div_to_l_@exp1 000C          __div_to_l_@cntr 000B                  ??_scale 0027  
        __div_to_l_@quot 0007                  ??_putch 0001            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 000F  
                ?_fround 0024                ?___ftpack 0001                  ?_printf 0040  
              ?___lltoft 0009        __end_of__npowers_ 1050                  __Hparam 0000  
                __Lparam 0000          __size_of___ftge 0096                  ___awdiv 2632  
                ___ftadd 1FB0                  ___awmod 27EA                  ___ftneg 2A60  
                ___lldiv 275E          __size_of___wmul 0028                  ___ftmul 238E  
                ___llmod 286C                  ___ftsub 29F4                  ___fttol 2486  
             _fround$908 002A               _fround$909 0027             __psmallconst 1000  
                __pcinit 2ACA               ??___ftpack 0006          __size_of_fround 0244  
                __ramtop 1000               ??___lltoft 000D                  __ptext0 29AC  
                __ptext1 10FC                  __ptext2 198C                  __ptext3 2ABA  
                __ptext4 2A84                  __ptext5 1D6C                  __ptext6 2A38  
                __ptext7 238E                  __ptext8 27EA                  __ptext9 2632  
        __size_of_printf 0890              ?__div_to_l_ 0001                  _dpowers 1001  
                _isdigit 2A84         ___awmod@dividend 0001     end_of_initialization 2ACA  
          __Lmediumconst 0000          ___lldiv@divisor 0005          ___lldiv@counter 000D  
              _RCSTAbits 000FAB                  printf@c 0063                  printf@f 0040  
                postdec2 000FDD                  postinc2 000FDE           __tdiv_to_l_@f1 0001  
         __tdiv_to_l_@f2 0004               _printf$911 004B            ??__tdiv_to_l_ 0007  
              _TRISCbits 000F94              printf@width 0056                _TXSTAbits 000FAC  
    __size_of__div_to_l_ 010A              ___ftmul@exp 001E           __end_of___ftge 275E  
         __end_of___wmul 2A60           __end_of_fround 1FB0           __end_of_printf 198C  
    start_initialization 2ACA                _Init_UART 2AA6      __end_of__tdiv_to_l_ 2284  
              _OpenUSART 28DC          ___llmod@divisor 0005         __CFG_OSC$INTIO67 000000  
        ___llmod@counter 0009                 ??___ftge 0007                 ??___wmul 0013  
               ??_fround 0027                 ??_printf 0045               fround@prec 002D  
      __size_of___ftpack 00C6        __size_of___lltoft 0060               ?_Init_UART 0001  
             ?_OpenUSART 0001                 ?___awdiv 0007                 ?___ftadd 002E  
               ?___awmod 0001                 ?___ftneg 0001                 ?___lldiv 0001  
               ?___ftmul 0015                 ?___llmod 0001                 ?___ftsub 003A  
              __npowers_ 1029                 ?___fttol 002B              __tdiv_to_l_ 2174  
           ??__div_to_l_ 0007              __smallconst 1000                 ?_isdigit 0001  
              _scale$910 0027           __size_of_scale 03E0           __size_of_putch 0010  
         ___wmul@product 0013                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
     __end_of__div_to_l_ 238E        ___wmul@multiplier 000F               printf@flag 0054  
             printf@fval 005E               printf@prec 0061              ??_Init_UART 0004  
            ??_OpenUSART 0003          OpenUSART@config 0003                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 0096         __size_of___ftadd 01C4  
       __size_of___awmod 0082         __size_of___ftneg 0024         __size_of___lldiv 008C  
       __size_of___ftmul 00F8         __size_of___llmod 0070         __size_of___ftsub 0044  
       __size_of___fttol 00E6                 ___ftpack 256C                 ___lltoft 294C  
            _isdigit$680 0002         __size_of_isdigit 0022                 __ptext10 2174  
               __ptext11 2284                 __ptext20 26C8                 __ptext12 294C  
               __ptext21 2AA6                 __ptext13 286C                 __ptext22 28DC  
               __ptext14 275E                 __ptext15 2486                 __ptext16 29F4  
               __ptext17 1FB0                 __ptext18 256C                 __ptext19 2A60  
               __powers_ 1050            __size_of_main 0048                printf@exp 005C  
              printf@val 0050           OpenUSART@spbrg 0001                 isdigit@c 0003  
               scale@scl 002A         __tdiv_to_l_@exp1 000F         __tdiv_to_l_@cntr 000E  
       __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001                 printf@ap 004E  
           ?__tdiv_to_l_ 0001         ___lldiv@quotient 0009  
